// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 5081 $
// File generated on 04.03.2008 11:03:52 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\WINDOWS\system32\MercFPrtX.ocx (1)
// LIBID: {AB1C5DBF-F491-489B-9B88-0F7B9CF0D904}
// LCID: 0
// Helpfile: 
// HelpString: Инкотекс: Фискальные регистраторы "Меркурий"
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   MercFPrtX_TLBH
#define   MercFPrtX_TLBH

#pragma option push -b -w-inl

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Mercfprtx_tlb
{

// *********************************************************************//
// HelpString: Инкотекс: Фискальные регистраторы "Меркурий"
// Version:    1.4
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_MercFPrtX;
extern __declspec (package) const GUID IID_IMercuryFPrt;
extern __declspec (package) const GUID DIID_IMercuryFPrtEvents;
extern __declspec (package) const GUID IID_IMercuryFPrtX;
extern __declspec (package) const GUID GUID_TxMercOperType;
extern __declspec (package) const GUID GUID_TxMercPayType;
extern __declspec (package) const GUID GUID_TxMercOperInfo;
extern __declspec (package) const GUID GUID_TxMercItemType;
extern __declspec (package) const GUID GUID_TxMercProtocol;
extern __declspec (package) const GUID GUID_TxMercEcrModel;
extern __declspec (package) const GUID GUID_TxMercDocStatus;
extern __declspec (package) const GUID GUID_TxMercEcrStatusFlags;
extern __declspec (package) const GUID GUID_TxMercDevStatusFlags;
extern __declspec (package) const GUID GUID_TxMercDocFlags;
extern __declspec (package) const GUID GUID_TxMercPropFlags;
extern __declspec (package) const GUID GUID_TxMercConnState;
extern __declspec (package) const GUID IID__IMercuryFPrtEventsDirect;
extern __declspec (package) const GUID IID_IMercuryFPrt2;
extern __declspec (package) const GUID IID_IMercuryFPrt3;
extern __declspec (package) const GUID GUID_TxMercBadResponseCode;
extern __declspec (package) const GUID GUID_TxMercInvalidArgCode;
extern __declspec (package) const GUID GUID_TxMercDocPropertyType;
extern __declspec (package) const GUID GUID_TxMercErrorCode;
extern __declspec (package) const GUID GUID_TxMercEcrErrCode;
extern __declspec (package) const GUID GUID_TxMercReportFlags;
extern __declspec (package) const GUID GUID_TxMercLicenceError;
extern __declspec (package) const GUID GUID_TxMercLicenceType;
extern __declspec (package) const GUID GUID_TxMercEcrStatusBits;
extern __declspec (package) const GUID GUID_TxMercDevStatusBits;
extern __declspec (package) const GUID IID_IMercuryFPrtX2;
extern __declspec (package) const GUID IID_IMercuryFPrtX3;
extern __declspec (package) const GUID IID_IMercuryFPrt4;
extern __declspec (package) const GUID IID_IMercuryFPrtX4;
extern __declspec (package) const GUID IID_IMercuryFPrt5;
extern __declspec (package) const GUID IID_IMercuryFPrtX5;
extern __declspec (package) const GUID IID_IMercuryFPrt6;
extern __declspec (package) const GUID IID_IMercuryFPrtX6;
extern __declspec (package) const GUID IID_IMercuryFPrt7;
extern __declspec (package) const GUID IID_IMercuryFPrtX7;
extern __declspec (package) const GUID GUID_TxMercParamCode;
extern __declspec (package) const GUID IID_IMercuryFPrt8;
extern __declspec (package) const GUID IID_IMercuryFPrtX8;
extern __declspec (package) const GUID IID_IMercuryFPrt9;
extern __declspec (package) const GUID IID_IMercuryFPrtX9;
extern __declspec (package) const GUID GUID_TxMercEKLState;
extern __declspec (package) const GUID IID_IMercuryFPrt10;
extern __declspec (package) const GUID IID_IMercuryFPrtX10;
extern __declspec (package) const GUID CLSID_MercuryFPrtCOM;
extern __declspec (package) const GUID CLSID_MercuryFPrtX;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      TxMercOperType;
enum      TxMercPayType;
enum      TxMercOperInfo;
enum      TxMercItemType;
enum      TxMercProtocol;
enum      TxMercEcrModel;
enum      TxMercDocStatus;
enum      TxMercEcrStatusFlags;
enum      TxMercDevStatusFlags;
enum      TxMercDocFlags;
enum      TxMercPropFlags;
enum      TxMercConnState;
enum      TxMercBadResponseCode;
enum      TxMercInvalidArgCode;
enum      TxMercDocPropertyType;
enum      TxMercErrorCode;
enum      TxMercEcrErrCode;
enum      TxMercReportFlags;
enum      TxMercLicenceError;
enum      TxMercLicenceType;
enum      TxMercEcrStatusBits;
enum      TxMercDevStatusBits;
enum      TxMercParamCode;
enum      TxMercEKLState;
interface DECLSPEC_UUID("{525FE0EA-4EA5-45DD-AB9E-EB75ADAF2557}") IMercuryFPrt;
typedef TComInterface<IMercuryFPrt, &IID_IMercuryFPrt> IMercuryFPrtPtr;

interface DECLSPEC_UUID("{2E1B3242-7861-424F-B925-E230D966DDAE}") IMercuryFPrtEvents;
typedef TComInterface<IMercuryFPrtEvents, &DIID_IMercuryFPrtEvents> IMercuryFPrtEventsPtr;

interface DECLSPEC_UUID("{6976823E-B5E5-4748-BD90-6516D22B694E}") IMercuryFPrtX;
typedef TComInterface<IMercuryFPrtX, &IID_IMercuryFPrtX> IMercuryFPrtXPtr;

interface DECLSPEC_UUID("{DF60ED81-A028-4863-8C69-662E5F28512B}") _IMercuryFPrtEventsDirect;
typedef TComInterface<_IMercuryFPrtEventsDirect, &IID__IMercuryFPrtEventsDirect> _IMercuryFPrtEventsDirectPtr;

interface DECLSPEC_UUID("{081E43FF-4768-4C9A-957F-BF117CFDD15B}") IMercuryFPrt2;
typedef TComInterface<IMercuryFPrt2, &IID_IMercuryFPrt2> IMercuryFPrt2Ptr;

interface DECLSPEC_UUID("{761CED73-985A-4FCF-95E7-21D03E489305}") IMercuryFPrt3;
typedef TComInterface<IMercuryFPrt3, &IID_IMercuryFPrt3> IMercuryFPrt3Ptr;

interface DECLSPEC_UUID("{15273680-3D9A-4D78-9FEC-B92FFCD88441}") IMercuryFPrtX2;
typedef TComInterface<IMercuryFPrtX2, &IID_IMercuryFPrtX2> IMercuryFPrtX2Ptr;

interface DECLSPEC_UUID("{7F2562A6-46FE-41FD-A75F-85535472969F}") IMercuryFPrtX3;
typedef TComInterface<IMercuryFPrtX3, &IID_IMercuryFPrtX3> IMercuryFPrtX3Ptr;

interface DECLSPEC_UUID("{01D442F5-56A5-4F04-8C61-FB651172C6F0}") IMercuryFPrt4;
typedef TComInterface<IMercuryFPrt4, &IID_IMercuryFPrt4> IMercuryFPrt4Ptr;

interface DECLSPEC_UUID("{38FC4258-EFAC-49CE-8215-B3ED204C5E7A}") IMercuryFPrtX4;
typedef TComInterface<IMercuryFPrtX4, &IID_IMercuryFPrtX4> IMercuryFPrtX4Ptr;

interface DECLSPEC_UUID("{66636E2A-5015-4156-9D06-FC6F63194254}") IMercuryFPrt5;
typedef TComInterface<IMercuryFPrt5, &IID_IMercuryFPrt5> IMercuryFPrt5Ptr;

interface DECLSPEC_UUID("{D3FA84FF-677F-4244-AEFB-E8343EF7C706}") IMercuryFPrtX5;
typedef TComInterface<IMercuryFPrtX5, &IID_IMercuryFPrtX5> IMercuryFPrtX5Ptr;

interface DECLSPEC_UUID("{FDC67547-0246-4854-9F84-C7EE4E93FB9B}") IMercuryFPrt6;
typedef TComInterface<IMercuryFPrt6, &IID_IMercuryFPrt6> IMercuryFPrt6Ptr;

interface DECLSPEC_UUID("{44595440-34C5-4FCA-A3BE-154BD980C7BA}") IMercuryFPrtX6;
typedef TComInterface<IMercuryFPrtX6, &IID_IMercuryFPrtX6> IMercuryFPrtX6Ptr;

interface DECLSPEC_UUID("{9549BA81-6015-4DA1-996E-53347CD57ABE}") IMercuryFPrt7;
typedef TComInterface<IMercuryFPrt7, &IID_IMercuryFPrt7> IMercuryFPrt7Ptr;

interface DECLSPEC_UUID("{3D5A10AD-307C-49D4-A59B-70FFEE159CB2}") IMercuryFPrtX7;
typedef TComInterface<IMercuryFPrtX7, &IID_IMercuryFPrtX7> IMercuryFPrtX7Ptr;

interface DECLSPEC_UUID("{9397BB3C-769E-47E2-8C0D-028A38B5D48F}") IMercuryFPrt8;
typedef TComInterface<IMercuryFPrt8, &IID_IMercuryFPrt8> IMercuryFPrt8Ptr;

interface DECLSPEC_UUID("{116A8129-4171-4B1D-8A49-6724A8E975DD}") IMercuryFPrtX8;
typedef TComInterface<IMercuryFPrtX8, &IID_IMercuryFPrtX8> IMercuryFPrtX8Ptr;

interface DECLSPEC_UUID("{B9F07D55-3587-4FFE-BFA8-0F1BFE05554F}") IMercuryFPrt9;
typedef TComInterface<IMercuryFPrt9, &IID_IMercuryFPrt9> IMercuryFPrt9Ptr;

interface DECLSPEC_UUID("{47D80BD0-5B41-4BFE-98AA-9E76BA94F37E}") IMercuryFPrtX9;
typedef TComInterface<IMercuryFPrtX9, &IID_IMercuryFPrtX9> IMercuryFPrtX9Ptr;

interface DECLSPEC_UUID("{C389388E-BCC0-4580-8673-47193431C2C3}") IMercuryFPrt10;
typedef TComInterface<IMercuryFPrt10, &IID_IMercuryFPrt10> IMercuryFPrt10Ptr;

interface DECLSPEC_UUID("{10ECF5F7-72AB-4B70-8BB9-4297AC4B8EC3}") IMercuryFPrtX10;
typedef TComInterface<IMercuryFPrtX10, &IID_IMercuryFPrtX10> IMercuryFPrtX10Ptr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IMercuryFPrt10 MercuryFPrtCOM;
typedef IMercuryFPrt10Ptr MercuryFPrtCOMPtr;
typedef IMercuryFPrtX10 MercuryFPrtX;
typedef IMercuryFPrtX10Ptr MercuryFPrtXPtr;

#define LIBID_OF_MercuryFPrtCOM (&LIBID_MercFPrtX)
#define LIBID_OF_MercuryFPrtX (&LIBID_MercFPrtX)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum TxMercOperType
{
  motUnknown = 0, 
  motSale = 1, 
  motRefund = 2, 
  motRefundCashless = 3, 
  motVoid = 4, 
  motCashIn = 5, 
  motCashOut = 6, 
  motBuying = 7, 
  motBuyingRefund = 8, 
  motBuyingVoid = 9, 
  motDayOpening = 10, 
  motXReport = 11, 
  motZReport = 12
} TxMercOperType;

typedef enum TxMercPayType
{
  mptCash = 0, 
  mptCredit = 1, 
  mptCard = 2, 
  mptCashCredit = 3, 
  mptCashCard = 4
} TxMercPayType;

typedef enum TxMercOperInfo
{
  moiNumber = 0, 
  moiName = 1, 
  moiNumberName = 2
} TxMercOperInfo;

typedef enum TxMercItemType
{
  mitItem = 0, 
  mitPercentAdj = 1, 
  mitAmountAdj = 2, 
  mitVoidItem = 3, 
  mitVoidPercentAdj = 4, 
  mitVoidAmountAdj = 5
} TxMercItemType;

typedef enum TxMercProtocol
{
  mprUnknown = 0, 
  mprBS = 1, 
  mprXOnXoff = 2
} TxMercProtocol;

typedef enum TxMercEcrModel
{
  memUnknown = 0, 
  mem114_1F = 1, 
  memSystemF = 2, 
  memMSK = 3, 
  mem114_1K = 4, 
  mem114_1FMD = 5, 
  memSystemK = 6, 
  mem118K = 7, 
  mem119K = 8, 
  mem119FAZ = 9, 
  memNTSF = 10
} TxMercEcrModel;

typedef enum TxMercDocStatus
{
  mdsUnknown = 0, 
  mdsClosed = 1, 
  mdsCached = 2, 
  mdsOpened = 3, 
  mdsTotal = 4, 
  mdsCompleted = 5, 
  mdsReceipt = 6, 
  mdsCustom = 7, 
  mdsForm = 8
} TxMercDocStatus;

typedef enum TxMercEcrStatusFlags
{
  MERC_S_DAY_OPENED = 1, 
  MERC_S_BUFFER_ATTENTION = 2, 
  MERC_S_FISCAL_ECR = 4, 
  MERC_S_FISCAL_ATTENTION = 8, 
  MERC_S_FISCAL_FULL = 16, 
  MERC_S_DOC_COPY = 32, 
  MERC_S_NARROW_PAPER = 64, 
  MERC_S_GRAPHIC_HEADER = 128
} TxMercEcrStatusFlags;

typedef enum TxMercDevStatusFlags
{
  MERC_DS_CASH_DRAWER = 1, 
  MERC_DS_OFFLINE = 2, 
  MERC_DS_OPENED_COVER = 4, 
  MERC_DS_PAPER_FEEDING = 8, 
  MERC_DS_STOP_ON_PAPER_OUT = 16, 
  MERC_DS_PRINTER_ERROR = 32, 
  MERC_DS_MECHANICAL_ERROR = 64, 
  MERC_DS_CUTTER_ERROR = 128, 
  MERC_DS_FATAL_ERROR = 256, 
  MERC_DS_OVERHEATING = 512, 
  MERC_DS_JOURNAL_ATTENTION = 1024, 
  MERC_DS_RECEIPT_ATTENTION = 2048, 
  MERC_DS_JOURNAL_OUT = 4096, 
  MERC_DS_RECEIPT_OUT = 8192, 
  MERC_DS_SLIP_SELECTED = 16384, 
  MERC_DS_SLIP_WAITING = 32768, 
  MERC_DS_NO_SLIP_IN = 65536, 
  MERC_DS_NO_SLIP_OUT = 131072, 
  MERC_DS_DISPLAY_READY = 262144, 
  MERC_DS_SERVICE_MODE = 524288, 
  MERC_DS_PRINTER_SELECTED = 1048576, 
  MERC_DS_CUT_DISABLED = 2097152, 
  MERC_DS_PAPER_OUT = 4194304, 
  MERC_DS_PRINTER_READY = 8388608, 
  MERC_DS_PRINTER_BUSY = 16777216, 
  MERC_DS_FACTORY_SETTINGS = 33554432, 
  MERC_DS_HARDWARE_RESET = 67108864, 
  MERC_DS_HEAD_LIFTED = 134217728, 
  MERC_DS_JRN_HEAD_LIFTED = 268435456, 
  MERC_DS_EX_STATUS = 1073741824
} TxMercDevStatusFlags;

typedef enum TxMercDocFlags
{
  MERC_DOCF_PRINT_RECEIPT = 1, 
  MERC_DOCF_REVERSE = 2, 
  MERC_DOCF_BOTTOM_REJ = 4
} TxMercDocFlags;

typedef enum TxMercPropFlags
{
  MERC_PROPF_FONT_14X30 = 2, 
  MERC_PROPF_FONT_10X30 = 3, 
  MERC_PROPF_FONT_9X9 = 4, 
  MERC_PROPF_DOUBLE_WIDTH = 8, 
  MERC_PROPF_DOUBLE_HEIGHT = 16, 
  MERC_PROPF_UNDERLINE = 32, 
  MERC_PROPF_NO_ORIGINAL = 64, 
  MERC_PROPF_NO_COPY = 128, 
  MERC_PROPF_JOURNAL_LINE1 = 256, 
  MERC_PROPF_JOURNAL_LINE2 = 512, 
  MERC_PROPF_NO_JOURNAL = 1024, 
  MERC_PROPF_VOIDED = 2048
} TxMercPropFlags;

typedef enum TxMercConnState
{
  mcsNone = 0, 
  mcsIdle = 1, 
  mcsWriting = 2, 
  mcsReading = 3, 
  mcsNoResponse = 4, 
  mcsPrinterError = 5, 
  mcsDisplayError = 6
} TxMercConnState;

typedef enum TxMercBadResponseCode
{
  MERC_BRE_INVALID_NUMBER = 1, 
  MERC_BRE_INVALID_HEX = 2, 
  MERC_BRE_INVALID_DATE = 3, 
  MERC_BRE_INVALID_TIME = 4, 
  MERC_BRE_PACKET_FORMAT = 5, 
  MERC_BRE_UNEXPECTED_DATA = 6, 
  MERC_BRE_INVALID_BCC = 7, 
  MERC_BRE_INVALID_DOC_TYPE = 8, 
  MERC_BRE_PACKET_SIZE = 9
} TxMercBadResponseCode;

typedef enum TxMercInvalidArgCode
{
  MERC_IAE_INVALID_PORT_NUM = 1, 
  MERC_IAE_INVALID_BAUD_RATE = 2, 
  MERC_IAE_UNSUPPORTED_BAUD_RATE = 3, 
  MERC_IAE_INVALID_TIMEOUT = 4, 
  MERC_IAE_INVALID_PROTOCOL = 5, 
  MERC_IAE_INVALID_OPER_NUM = 6, 
  MERC_IAE_INVALID_LIC_TYPE = 7, 
  MERC_IAE_INVALID_OPER_TYPE = 8, 
  MERC_IAE_UNSUPPORTED_OPER_TYPE = 9, 
  MERC_IAE_INVALID_COPIES_NUM = 10, 
  MERC_IAE_INVALID_OFFSET = 11, 
  MERC_IAE_INVALID_PROP_OFFSET = 12, 
  MERC_IAE_INVALID_FISCAL_HOFFSET = 13, 
  MERC_IAE_INVALID_FISCAL_VOFFSET = 14, 
  MERC_IAE_INVALID_FISCAL_COPY = 15, 
  MERC_IAE_INVALID_OPER_INFO = 16, 
  MERC_IAE_INVALID_PAY_TYPE = 17, 
  MERC_IAE_UNSUPPORTED_PAY_TYPE = 18, 
  MERC_IAE_FORBIDDEN_PAY_TYPE = 19, 
  MERC_IAE_INVALID_PAY_SUM = 20, 
  MERC_IAE_INVALID_ITEM_SUM = 21, 
  MERC_IAE_INVALID_DEPARTMENT = 22, 
  MERC_IAE_INVALID_ITEM_CODE = 23, 
  MERC_IAE_INVALID_ADJUSTMENT = 24, 
  MERC_IAE_INVALID_QUANTITY = 25, 
  MERC_IAE_INVALID_QUAN_PREC = 26, 
  MERC_IAE_INVALID_TAX_INDEX = 27, 
  MERC_IAE_TOTAL_OVERFLOW = 28, 
  MERC_IAE_INVALID_HEADER_LINE = 29, 
  MERC_IAE_INVALID_ITEM_TYPE = 30, 
  MERC_IAE_UNSUPPORTED_ITEM_TYPE = 31, 
  MERC_IAE_FORBIDDEN_ITEM_TYPE = 32, 
  MERC_IAE_INVALID_DATE = 33, 
  MERC_IAE_INVALID_CHANNEL = 34, 
  MERC_IAE_INVALID_PULSE_TIME = 35, 
  MERC_IAE_INVALID_PULSE_COUNT = 36, 
  MERC_IAE_INVALID_LINE_COUNT = 37, 
  MERC_IAE_UNSUPPORTED_FEED = 38, 
  MERC_IAE_INVALID_TITLE = 39, 
  MERC_IAE_INVALID_SERIAL_NUM = 40, 
  MERC_IAE_INVALID_TAX_RATE = 41, 
  MERC_IAE_INVALID_COUNTER = 42, 
  MERC_IAE_UNSUPPORTED_COUNTER = 43, 
  MERC_IAE_INVALID_FISCAL_NUM = 44, 
  MERC_IAE_INVALID_CONTRAST = 45, 
  MERC_IAE_INVALID_TIMEOUT_TYPE = 46, 
  MERC_IAE_INVALID_LEFT_SPACE = 47, 
  MERC_IAE_INVALID_HEADER_WIDTH = 48, 
  MERC_IAE_INVALID_HEADER_HEIGHT = 49, 
  MERC_IAE_INVALID_HEADER_DATA = 50, 
  MERC_IAE_INVALID_ACCOUNT = 51, 
  MERC_IAE_INVALID_EKLZ_VOFFSET = 52, 
  MERC_IAE_INVALID_GRAPHIC_NUM = 53, 
  MERC_IAE_INVALID_PARAM_CODE = 54, 
  MERC_IAE_INVALID_ROUNDUP_MODE = 55, 
  MERC_IAE_INVALID_ROUNDUP_UNIT = 56, 
  MERC_IAE_INVALID_FISC_INTERVAL = 57, 
  MERC_IAE_INVALID_I2C_FREQUENCY = 58, 
  MERC_IAE_INVALID_REP_TOTAL_MODE = 59, 
  MERC_IAE_INVALID_CUTTER_COUNT = 60
} TxMercInvalidArgCode;

typedef enum TxMercDocPropertyType
{
  MERC_PT_SERIAL_NUMBER = 0, 
  MERC_PT_HEADER_LINE1 = 1, 
  MERC_PT_HEADER_LINE2 = 2, 
  MERC_PT_HEADER_LINE3 = 3, 
  MERC_PT_HEADER_LINE4 = 4, 
  MERC_PT_DATE_TIME = 5, 
  MERC_PT_OPER_INFO = 6, 
  MERC_PT_DOC_NUMBER = 7, 
  MERC_PT_RECEIPT_NUMBER = 8, 
  MERC_PT_ACCOUNT = 9, 
  MERC_PT_TAX_PAYER_NUMBER = 10, 
  MERC_PT_ITEM = 11, 
  MERC_PT_TOTAL = 12, 
  MERC_PT_PAY = 13, 
  MERC_PT_CHANGE = 14, 
  MERC_PT_TAX0 = 15, 
  MERC_PT_TAX1 = 16, 
  MERC_PT_TAX2 = 17, 
  MERC_PT_TAX3 = 18, 
  MERC_PT_TAX4 = 19, 
  MERC_PT_FISCAL_SIGN = 20, 
  MERC_PT_ADJUSTMENT = 21, 
  MERC_PT_EKLZ_DATA = 22, 
  MERC_PT_GRAPHIC_HEADER = 23, 
  MERC_PT_REG_NUMBER = 24, 
  MERC_PT_BARCODE = 98, 
  MERC_PT_CUSTOM = 99
} TxMercDocPropertyType;

typedef enum TxMercErrorCode
{
  MERC_SUCCESS = 0, 
  MERC_ERR_CONN_OPENED = 1, 
  MERC_ERR_CONN_CLOSED = 2, 
  MERC_ERR_NO_RESPONSE = 3, 
  MERC_ERR_UNKNOWN_DEVICE = 4, 
  MERC_ERR_NO_CONVERSION = 5, 
  MERC_ERR_UNSUPPORTED = 6, 
  MERC_ERR_DOC_OVERFLOW = 7, 
  MERC_ERR_NO_DOCUMENT = 8, 
  MERC_ERR_DOC_OPENED = 9, 
  MERC_ERR_DOC_FORBIDDEN = 10, 
  MERC_ERR_DOC_FORBIDDEN_VERSION = 11, 
  MERC_ERR_DUPLICATION = 12, 
  MERC_ERR_NO_PROPERTY = 13, 
  MERC_ERR_INVALID_ARG = 14, 
  MERC_ERR_BAD_RESPONSE = 15, 
  MERC_ERR_OUT_OF_MEMORY = 16, 
  MERC_ERR_OS_ERROR = 17, 
  MERC_ERR_ECR_ERROR = 18, 
  MERC_ERR_NO_LICENCE = 19, 
  MERC_ERR_UNKNOWN = 999
} TxMercErrorCode;

typedef enum TxMercEcrErrCode
{
  MERC_ERR_ECR_FISCAL = 1, 
  MERC_ERR_ECR_OPENED_SESSION = 2, 
  MERC_ERR_ECR_OUT_OF_FISCAL = 3, 
  MERC_ERR_ECR_FIELD_TOO_LONG = 4, 
  MERC_ERR_ECR_BAD_FIELD_FORMAT = 5, 
  MERC_ERR_ECR_TIMER_READ_ERROR = 6, 
  MERC_ERR_ECR_INVALID_DATE = 7, 
  MERC_ERR_ECR_INVALID_TIME = 8, 
  MERC_ERR_ECR_EARLY_DATE = 9, 
  MERC_ERR_ECR_USER_BREAK = 10, 
  MERC_ERR_ECR_FORBIDDEN = 11, 
  MERC_ERR_ECR_CLOSED_SESSION = 12, 
  MERC_ERR_ECR_EMPTY_JOURNAL = 0xFFFFFFF3, 
  MERC_ERR_ECR_INPUT_OVERFLOW = 14, 
  MERC_ERR_ECR_FISCAL_WRITE_ERROR = 15, 
  MERC_ERR_ECR_TIMER_SET_ERROR = 16, 
  MERC_ERR_ECR_BAD_INSPECTOR_PSWD = 17, 
  MERC_ERR_ECR_BAD_CONN_PSWD = 18, 
  MERC_ERR_ECR_REG_OVERFLOW = 19, 
  MERC_ERR_ECR_NO_FISCAL = 20, 
  MERC_ERR_ECR_FIELD_OVERFLOW = 21, 
  MERC_ERR_ECR_FISCAL_READ_ERROR = 22, 
  MERC_ERR_ECR_COUNTER_OVERFLOW = 23, 
  MERC_ERR_ECR_ZERO_FIELD = 24, 
  MERC_ERR_ECR_BAD_CMD_FORMAT = 25, 
  MERC_ERR_ECR_EARLY_DOCUMENT = 26, 
  MERC_ERR_ECR_JOURNAL_OVERFLOW = 27, 
  MERC_ERR_ECR_BAD_PROPERTIES = 28, 
  MERC_ERR_ECR_INVALID_CMD = 29, 
  MERC_ERR_ECR_INVALID_BCC = 30, 
  MERC_ERR_ECR_EMPTY_FISCAL = 31, 
  MERC_ERR_ECR_DOC_CANCELED = 33, 
  MERC_ERR_ECR_EMPTY_RESPONSE = 36, 
  MERC_ERR_ECR_SERVICE_ABSENT = 37, 
  MERC_ERR_ECR_NO_SERVICE = 39, 
  MERC_ERR_ECR_BAD_JOURNAL = 40, 
  MERC_ERR_ECR_PROP_DUPLICATION = 41, 
  MERC_ERR_ECR_BAD_STATE = 42, 
  MERC_ERR_ECR_MEMORY_ERROR = 43, 
  MERC_ERR_ECR_FM_INITIALIZED = 44, 
  MERC_ERR_ECR_DISPLAY_TIMEOUT = 45, 
  MERC_ERR_ECR_FLASH_ERROR = 46, 
  MERC_ERR_ECR_NO_RECORDS = 47, 
  MERC_ERR_EKLZ_NO_CONNECTION = 48, 
  MERC_ERR_EKLZ_BAD_COMMAND = 49, 
  MERC_ERR_EKLZ_BAD_STATE = 50, 
  MERC_ERR_EKLZ_FAILURE = 51, 
  MERC_ERR_EKLZ_ENCODER_FAILURE = 52, 
  MERC_ERR_EKLZ_TIME_OVERFLOW = 53, 
  MERC_ERR_EKLZ_FULL = 54, 
  MERC_ERR_EKLZ_BAD_DATE_TIME = 55, 
  MERC_ERR_EKLZ_NO_DATA = 56, 
  MERC_ERR_EKLZ_COUNTER_OVERFLOW = 57, 
  MERC_ERR_EKLZ_PROTOCOL_ERROR = 70, 
  MERC_ERR_EKLZ_BUFFER_OVERFLOW = 71, 
  MERC_ERR_EKLZ_BAD_CHECKSUM = 72, 
  MERC_ERR_EKLZ_ANOTHER_ECR = 73, 
  MERC_ERR_EKLZ_NOT_ACTIVATED = 74, 
  MERC_ERR_EKLZ_FATAL_ERROR = 75, 
  MERC_ERR_EKLZ_NO_ACTIVATIONS = 76, 
  MERC_ERR_EKLZ_ACTIVATED = 77, 
  MERC_ERR_EKLZ_DEPART_OVERFLOW = 78, 
  MERC_ERR_EKLZ_NO_ARCHIVE = 79, 
  MERC_ERR_EKLZ_FM_CONFLICT = 80, 
  MERC_ERR_ECR_NO_OPERATOR = 13, 
  MERC_ERR_ECR_CNT_QUANTITY_ADD = 112, 
  MERC_ERR_ECR_CNT_QUANTITY_SUB = 113, 
  MERC_ERR_ECR_CNT_VOID = 114, 
  MERC_ERR_ECR_CNT_DAY_VOID = 115, 
  MERC_ERR_ECR_CNT_DAY_SALE = 116, 
  MERC_ERR_ECR_CNT_DAY_CASH_ADD = 117, 
  MERC_ERR_ECR_CNT_DAY_PAY_CREDIT = 118, 
  MERC_ERR_ECR_CNT_DAY_PAY_CARD = 119, 
  MERC_ERR_ECR_CNT_DAY_CASH_SUB = 120, 
  MERC_ERR_ECR_CNT_DAY_RFD_CREDIT = 121, 
  MERC_ERR_ECR_CNT_TOTAL_ADD = 122, 
  MERC_ERR_ECR_CNT_TOTAL_SUB = 123, 
  MERC_ERR_ECR_CNT_TOTAL_MUL = 124, 
  MERC_ERR_ECR_CNT_TOTAL_DIS = 125, 
  MERC_ERR_ECR_CNT_DPT_TOTAL_DIS = 126, 
  MERC_ERR_ECR_CNT_TARE_DIS = 127, 
  MERC_ERR_ECR_CNT_DISCOUNT = 128, 
  MERC_ERR_ECR_CNT_TAX_DIS = 129, 
  MERC_ERR_ECR_CNT_NOTAX_DIS = 130, 
  MERC_ERR_ECR_CNT_TOTAL_SUR = 131, 
  MERC_ERR_ECR_CNT_DPT_TOTAL_SUR = 132, 
  MERC_ERR_ECR_CNT_TARE_SUR = 133, 
  MERC_ERR_ECR_CNT_SURCHARGE = 134, 
  MERC_ERR_ECR_CNT_TAX_SUR = 135, 
  MERC_ERR_ECR_CNT_NOTAX_SUR = 136, 
  MERC_ERR_ECR_CNT_DPT_TOTAL = 137, 
  MERC_ERR_ECR_CNT_TARE_TOTAL = 138, 
  MERC_ERR_ECR_CNT_TAX_TOTAL = 139, 
  MERC_ERR_ECR_CNT_NOTAX_TOTAL = 140, 
  MERC_ERR_ECR_CNT_TOTAL_VOID_DIS = 141, 
  MERC_ERR_ECR_CNT_DPT_VOID_DIS = 142, 
  MERC_ERR_ECR_CNT_TARE_VOID_DIS = 143, 
  MERC_ERR_ECR_CNT_VOID_DISCOUNT = 144, 
  MERC_ERR_ECR_CNT_TAX_VOID_DIS = 145, 
  MERC_ERR_ECR_CNT_NOTAX_VOID_DIS = 146, 
  MERC_ERR_ECR_CNT_TOTAL_VOID_SUR = 147, 
  MERC_ERR_ECR_CNT_DPT_VOID_SUR = 148, 
  MERC_ERR_ECR_CNT_TARE_VOID_SUR = 149, 
  MERC_ERR_ECR_CNT_VOID_SURCHARGE = 150, 
  MERC_ERR_ECR_CNT_TAX_VOID_SUR = 151, 
  MERC_ERR_ECR_CNT_NOTAX_VOID_SUR = 152, 
  MERC_ERR_ECR_INVALID_PAYMENT = 153, 
  MERC_ERR_ECR_CNT_PAYMENT = 154, 
  MERC_ERR_ECR_CASHLESS_OVERFLOW = 155, 
  MERC_ERR_ECR_FISC_INTERVAL_OVER = 156
} TxMercEcrErrCode;

typedef enum TxMercReportFlags
{
  MERC_REPF_NO_ZEROES = 1, 
  MERC_REPF_ACCUMULATE_OPER = 2, 
  MERC_REPF_ACCUMULATE_DEP = 4
} TxMercReportFlags;

typedef enum TxMercLicenceError
{
  MERC_ERR_LIC_BAD_KEY = 1, 
  MERC_ERR_LIC_EXPIRED = 2, 
  MERC_ERR_LIC_ECR = 3
} TxMercLicenceError;

typedef enum TxMercLicenceType
{
  mltLocal = 0, 
  mltUser = 1, 
  mltAllUsers = 2
} TxMercLicenceType;

typedef enum TxMercEcrStatusBits
{
  MERC_SBIT_DAY_OPENED = 0, 
  MERC_SBIT_BUFFER_ATTENTION = 1, 
  MERC_SBIT_FISCAL_ECR = 2, 
  MERC_SBIT_FISCAL_ATTENTION = 3, 
  MERC_SBIT_FISCAL_FULL = 4, 
  MERC_SBIT_DOC_COPY = 5, 
  MERC_SBIT_NARROW_PAPER = 6, 
  MERC_SBIT_GRAPHIC_HEADER = 7
} TxMercEcrStatusBits;

typedef enum TxMercDevStatusBits
{
  MERC_DSBIT_CASH_DRAWER = 0, 
  MERC_DSBIT_OFFLINE = 1, 
  MERC_DSBIT_OPENED_COVER = 2, 
  MERC_DSBIT_PAPER_FEEDING = 3, 
  MERC_DSBIT_STOP_ON_PAPER_OUT = 4, 
  MERC_DSBIT_PRINTER_ERROR = 5, 
  MERC_DSBIT_MECHANICAL_ERROR = 6, 
  MERC_DSBIT_CUTTER_ERROR = 7, 
  MERC_DSBIT_FATAL_ERROR = 8, 
  MERC_DSBIT_OVERHEATING = 9, 
  MERC_DSBIT_JOURNAL_ATTENTION = 10, 
  MERC_DSBIT_RECEIPT_ATTENTION = 11, 
  MERC_DSBIT_JOURNAL_OUT = 12, 
  MERC_DSBIT_RECEIPT_OUT = 13, 
  MERC_DSBIT_SLIP_SELECTED = 14, 
  MERC_DSBIT_SLIP_WAITING = 15, 
  MERC_DSBIT_NO_SLIP_IN = 16, 
  MERC_DSBIT_NO_SLIP_OUT = 17, 
  MERC_DSBIT_DISPLAY_READY = 18, 
  MERC_DSBIT_SERVICE_MODE = 19, 
  MERC_DSBIT_PRINTER_SELECTED = 20, 
  MERC_DSBIT_CUT_DISABLED = 21, 
  MERC_DSBIT_PAPER_OUT = 22, 
  MERC_DSBIT_PRINTER_READY = 23, 
  MERC_DSBIT_PRINTER_BUSY = 24, 
  MERC_DSBIT_FACTORY_SETTINGS = 25, 
  MERC_DSBIT_HARDWARE_RESET = 26, 
  MERC_DSBIT_HEAD_LIFTED = 27, 
  MERC_DSBIT_JRN_HEAD_LIFTED = 28, 
  MERC_DSBIT_EX_STATUS = 30
} TxMercDevStatusBits;

typedef enum TxMercParamCode
{
  MERC_PARAM_PRN_TIMEOUT = 1, 
  MERC_PARAM_DSP_TIMEOUT = 2, 
  MERC_PARAM_PRN_CONTRAST = 3, 
  MERC_PARAM_LEADING = 4, 
  MERC_PARAM_HEADER_ALIGN = 5, 
  MERC_PARAM_AUTOCUT = 6, 
  MERC_PARAM_ECONOMIC_MODE = 7, 
  MERC_PARAM_PAPER_JOURNAL = 8, 
  MERC_PARAM_FULL_JOURNAL = 9, 
  MERC_PARAM_AUTO_CASHOUT = 10, 
  MERC_PARAM_DECIMAL_POINT = 11, 
  MERC_PARAM_ROUNDUP_MODE = 12, 
  MERC_PARAM_ROUNDUP_UNIT = 13, 
  MERC_PARAM_RESTART_COUNT = 14, 
  MERC_PARAM_AUTOHEADER = 15, 
  MERC_PARAM_AUTOHEADER_LINE1 = 16, 
  MERC_PARAM_AUTOHEADER_LINE2 = 17, 
  MERC_PARAM_AUTOHEADER_LINE3 = 18, 
  MERC_PARAM_AUTOHEADER_LINE4 = 19, 
  MERC_PARAM_HEADER_PRINTED_LINE1 = 20, 
  MERC_PARAM_HEADER_PRINTED_LINE2 = 21, 
  MERC_PARAM_HEADER_PRINTED_LINE3 = 22, 
  MERC_PARAM_HEADER_PRINTED_LINE4 = 23, 
  MERC_PARAM_CURRENT_DOC_NUMBER = 24, 
  MERC_PARAM_CURRENT_REC_NUMBER = 25, 
  MERC_PARAM_PAPER_AUTOLOAD = 26, 
  MERC_PARAM_FISCAL_TIME_INTERVAL = 27, 
  MERC_PARAM_NON_FISCAL_HEADER = 28, 
  MERC_PARAM_DAY_ELAPSED = 29, 
  MERC_PARAM_EKL_ENABLED = 30, 
  MERC_PARAM_I2C_FREQUENCY = 31, 
  MERC_PARAM_EKLZ_AUTOTESTING = 32, 
  MERC_PARAM_REPORT_TOTAL_MODE = 33, 
  MERC_PARAM_DOCUMENT_REPRINTING = 34, 
  MERC_PARAM_CUTTER_TESTING = 35
} TxMercParamCode;

typedef enum TxMercEKLState
{
  meklEmpty = 0, 
  meklNonEmpty = 1, 
  meklAttention = 2, 
  meklFull = 3
} TxMercEKLState;

// *********************************************************************//
// Interface: IMercuryFPrt
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {525FE0EA-4EA5-45DD-AB9E-EB75ADAF2557}
// *********************************************************************//
interface IMercuryFPrt  : public IDispatch
{
public:
  // [201] Открытие соединения с ККМ
  virtual HRESULT STDMETHODCALLTYPE Open(void) = 0;
  // [202] Закрытие соединения с ККМ
  virtual HRESULT STDMETHODCALLTYPE Close(VARIANT_BOOL ForceAbort/*[in]*/) = 0;
  // [203] Открытие буфера чека
  virtual HRESULT STDMETHODCALLTYPE OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/) = 0;
  // [204] Добавление позиции чека в буфер
  virtual HRESULT STDMETHODCALLTYPE AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                                   VARIANT_BOOL ItemIsTare/*[in]*/, 
                                                   long Department/*[in]*/, long Code/*[in]*/, 
                                                   long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                                   long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                                   BSTR UnitName/*[in]*/, long Flags/*[in]*/) = 0;
  // [205] Отмена печати чека
  virtual HRESULT STDMETHODCALLTYPE CancelReceipt(void) = 0;
  // [206] Печать буферизованного чека
  virtual HRESULT STDMETHODCALLTYPE CloseReceipt(BSTR Account/*[in]*/, 
                                                 Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                                 CURRENCY PayCash/*[in]*/, 
                                                 CURRENCY PayCashless/*[in]*/, BSTR PayInfo/*[in]*/, 
                                                 long CopiesNum/*[in]*/, 
                                                 Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/) = 0;
  // [207] Открытие буфера произвольного фискального документа
  virtual HRESULT STDMETHODCALLTYPE OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                                  Mercfprtx_tlb::TxMercOperType Oper/*[in]*/) = 0;
  // [208] Отмена печати произвольного фискального документа
  virtual HRESULT STDMETHODCALLTYPE CancelCustomDoc(void) = 0;
  // [209] Печать буферизованного произвольного фискального документа
  virtual HRESULT STDMETHODCALLTYPE CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                                   long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                                   long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                                   long HCopyOffset/*[in]*/, 
                                                   long VCopyOffset/*[in]*/, long FiscalCopy/*[in]*/) = 0;
  // [210] Открытие буфера фискального документа
  virtual HRESULT STDMETHODCALLTYPE OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/) = 0;
  // [211] Отмена печати и (или) аннулирование фискального документа
  virtual HRESULT STDMETHODCALLTYPE CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/) = 0;
  // [212] Распечатка буфера фискального документа
  virtual HRESULT STDMETHODCALLTYPE PrintFiscalDocBuffer(void) = 0;
  // [213] Закрытие и печать фискального документа
  virtual HRESULT STDMETHODCALLTYPE CloseFiscalDoc(void) = 0;
  // [214] Печать копии последнего фискального документа
  virtual HRESULT STDMETHODCALLTYPE CopyFiscalDoc(void) = 0;
  // [215] Добавление серийного номера ККМ в документ
  virtual HRESULT STDMETHODCALLTYPE AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                                    long VOffset/*[in]*/) = 0;
  // [216] Добавление строки заголовка в документ
  virtual HRESULT STDMETHODCALLTYPE AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                                  long HOffset/*[in]*/, long VOffset/*[in]*/) = 0;
  // [217] Добавление времени и даты проведения операции в документ
  virtual HRESULT STDMETHODCALLTYPE AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                                long VOffset/*[in]*/) = 0;
  // [218] Добавление информации об операторе в документ
  virtual HRESULT STDMETHODCALLTYPE AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                                long Flags/*[in]*/, long HOffset/*[in]*/, 
                                                long VOffset/*[in]*/) = 0;
  // [219] Добавление номера документа в документ
  virtual HRESULT STDMETHODCALLTYPE AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                                 long VOffset/*[in]*/) = 0;
  // [220] Добавление номера чека в документ
  virtual HRESULT STDMETHODCALLTYPE AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                                     long VOffset/*[in]*/) = 0;
  // [221] Добавление номера счета в документ
  virtual HRESULT STDMETHODCALLTYPE AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                               long HOffset/*[in]*/, long VOffset/*[in]*/) = 0;
  // [222] Добавление ИНН владельца ККМ в документ
  virtual HRESULT STDMETHODCALLTYPE AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                                      long VOffset/*[in]*/) = 0;
  // [223] Добавлении позиции или скидки / надбавки на позицию в документ
  virtual HRESULT STDMETHODCALLTYPE AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                            CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                            long Department/*[in]*/, long Code/*[in]*/, 
                                            long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                            long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                            BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                                            long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                            long RightOffset/*[in]*/) = 0;
  // [224] Добавление процентной скидки / надбавки на чек в документ
  virtual HRESULT STDMETHODCALLTYPE AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                                     long Flags/*[in]*/, long HOffset/*[in]*/, 
                                                     long VOffset/*[in]*/, long RightOffset/*[in]*/) = 0;
  // [225] Добавление денежной скидки / надбавки на чек в документ
  virtual HRESULT STDMETHODCALLTYPE AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                                    long Flags/*[in]*/, long HOffset/*[in]*/, 
                                                    long VOffset/*[in]*/, long RightOffset/*[in]*/) = 0;
  // [226] Добавление итоговой суммы в документ
  virtual HRESULT STDMETHODCALLTYPE AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/) = 0;
  // [227] Добавление информации об оплате в документ
  virtual HRESULT STDMETHODCALLTYPE AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                           CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                           BSTR PayInfo/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                           long RightOffset/*[in]*/) = 0;
  // [228] Добавление суммы сдачи в документ
  virtual HRESULT STDMETHODCALLTYPE AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/) = 0;
  // [229] Добавление суммы по налоговой ставке в документ
  virtual HRESULT STDMETHODCALLTYPE AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                              long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                              long RightOffset/*[in]*/) = 0;
  // [230] Добавление фискального признака в документ
  virtual HRESULT STDMETHODCALLTYPE AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                                  long VOffset/*[in]*/) = 0;
  // [231] Добавление штрих-кода в документ
  virtual HRESULT STDMETHODCALLTYPE AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, 
                                               long Mask3/*[in]*/, long Mask4/*[in]*/, 
                                               long Mask5/*[in]*/, 
                                               VARIANT_BOOL DoubleDensity/*[in]*/, 
                                               long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/) = 0;
  // [232] Добавление произвольного реквизита в документ
  virtual HRESULT STDMETHODCALLTYPE AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, 
                                              long HOffset/*[in]*/, long VOffset/*[in]*/) = 0;
  // [233] Повтор последней фискальной операции
  virtual HRESULT STDMETHODCALLTYPE RepeatOperation(void) = 0;
  // [234] Открытие смены
  virtual HRESULT STDMETHODCALLTYPE OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                            VARIANT_BOOL FullJournal/*[in]*/, 
                                            Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/) = 0;
  // [235] Печать сменного Z-отчета (закрытие смены)
  virtual HRESULT STDMETHODCALLTYPE ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/) = 0;
  // [236] Фискализация / перерегистрация ККМ
  virtual HRESULT STDMETHODCALLTYPE FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                                  BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                                  long* RewriteNum/*[out,retval]*/) = 0;
  // [237] Фискальный отчет по номерам
  virtual HRESULT STDMETHODCALLTYPE FiscalReportByNum(BSTR InspPswd/*[in]*/, 
                                                      VARIANT_BOOL PrintFull/*[in]*/, 
                                                      long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                                      long* AReportNum/*[out,retval]*/) = 0;
  // [238] Фискальный отчет по датам
  virtual HRESULT STDMETHODCALLTYPE FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                       VARIANT_BOOL PrintFull/*[in]*/, 
                                                       DATE AStartDate/*[in]*/, 
                                                       DATE AEndDate/*[in]*/, 
                                                       long* AReportNum/*[out,retval]*/) = 0;
  // [239] Фискальный отчет по содержимому фискальной памяти
  virtual HRESULT STDMETHODCALLTYPE FiscalReportAll(BSTR InspPswd/*[in]*/, 
                                                    long* AReportNum/*[out,retval]*/) = 0;
  // [240] Прогон / отрез чековой ленты
  virtual HRESULT STDMETHODCALLTYPE FeedAndCut(long LineCount/*[in]*/, 
                                               VARIANT_BOOL CutAfterFeed/*[in]*/) = 0;
  // [241] Печать нефискального документа
  virtual HRESULT STDMETHODCALLTYPE PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                                   VARIANT_BOOL CloseDoc/*[in]*/) = 0;
  // [242] Вывод информации на дисплей покупателя
  virtual HRESULT STDMETHODCALLTYPE ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                                VARIANT_BOOL CloseMode/*[in]*/) = 0;
  // [243] Изменение скорости обмена данными с дисплеем покупателя
  virtual HRESULT STDMETHODCALLTYPE SetDisplayBaudRate(long BaudRate/*[in]*/) = 0;
  // [244] Формирование импульсов управления внешним устройством
  virtual HRESULT STDMETHODCALLTYPE ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                                  long TimeOff/*[in]*/, long Count/*[in]*/) = 0;
  // [245] Запрос расширенного статуса внешних устройств
  virtual HRESULT STDMETHODCALLTYPE QueryDevExStatus(void) = 0;
  // [246] Запрос информации о встроенном ПО ККМ
  virtual HRESULT STDMETHODCALLTYPE QueryFirmwareInfo(void) = 0;
  // [247] Программирование строк заголовка
  virtual HRESULT STDMETHODCALLTYPE SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, 
                                              BSTR Line3/*[in]*/, BSTR Line4/*[in]*/) = 0;
  // [248] Программирование налога
  virtual HRESULT STDMETHODCALLTYPE SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, 
                                           long TaxRate/*[in]*/) = 0;
  // [249] Чтение информации о программируемом налоге
  virtual HRESULT STDMETHODCALLTYPE QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/) = 0;
  // [250] Чтение значения счетчиков ККМ
  virtual HRESULT STDMETHODCALLTYPE QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                                 CURRENCY* ASum/*[out,retval]*/) = 0;
  // [251] Синхронизация часов ККМ с часами ПК
  virtual HRESULT STDMETHODCALLTYPE SynchronizeEcrDateTime(void) = 0;
  // [252] Запрос информации о ресурсах ККМ
  virtual HRESULT STDMETHODCALLTYPE QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/) = 0;
  // [253] Запрос информации о последнем фискальном документе
  virtual HRESULT STDMETHODCALLTYPE QueryLastDocInfo(void) = 0;
  // [254] Программирование параметров ККМ
  virtual HRESULT STDMETHODCALLTYPE SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                                  long PrnTimeout/*[in]*/) = 0;
  // [255] Модель подключенной ККМ
  virtual HRESULT STDMETHODCALLTYPE get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/) = 0;
  // [256] Версия ПО подключенной ККМ
  virtual HRESULT STDMETHODCALLTYPE get_EcrVersion(long* Value/*[out,retval]*/) = 0;
  // [257] Поколение ПО подключенной ККМ
  virtual HRESULT STDMETHODCALLTYPE get_Generation(long* Value/*[out,retval]*/) = 0;
  // [258] Тип протокола, используемого ККМ
  virtual HRESULT STDMETHODCALLTYPE get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/) = 0;
  // [259] Статус ККМ
  virtual HRESULT STDMETHODCALLTYPE get_EcrStatus(long* Value/*[out,retval]*/) = 0;
  // [260] Маска значащих флагов статуса ККМ
  virtual HRESULT STDMETHODCALLTYPE get_EcrStatusMask(long* Value/*[out,retval]*/) = 0;
  // [261] Статус внешних устройств
  virtual HRESULT STDMETHODCALLTYPE get_DevStatus(long* Value/*[out,retval]*/) = 0;
  // [262] Маска значащих флагов статуса внешних устройств
  virtual HRESULT STDMETHODCALLTYPE get_DevStatusMask(long* Value/*[out,retval]*/) = 0;
  // [263] Статус фискального документа
  virtual HRESULT STDMETHODCALLTYPE get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/) = 0;
  // [264] Текущая фискальная операция
  virtual HRESULT STDMETHODCALLTYPE get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/) = 0;
  // [265] Номер последовательного порта для связи с ККМ
  virtual HRESULT STDMETHODCALLTYPE get_PortNum(long* Value/*[out,retval]*/) = 0;
  // [265] Номер последовательного порта для связи с ККМ
  virtual HRESULT STDMETHODCALLTYPE set_PortNum(long Value/*[in]*/) = 0;
  // [266] Скорость обмена данными с ККМ
  virtual HRESULT STDMETHODCALLTYPE get_BaudRate(long* Value/*[out,retval]*/) = 0;
  // [266] Скорость обмена данными с ККМ
  virtual HRESULT STDMETHODCALLTYPE set_BaudRate(long Value/*[in]*/) = 0;
  // [267] Пароль на связь с ККМ
  virtual HRESULT STDMETHODCALLTYPE get_Password(BSTR* Value/*[out,retval]*/) = 0;
  // [267] Пароль на связь с ККМ
  virtual HRESULT STDMETHODCALLTYPE set_Password(BSTR Value/*[in]*/) = 0;
  // [268] Таймаут внутренних команд ККМ
  virtual HRESULT STDMETHODCALLTYPE get_InternalTimeout(long* Value/*[out,retval]*/) = 0;
  // [268] Таймаут внутренних команд ККМ
  virtual HRESULT STDMETHODCALLTYPE set_InternalTimeout(long Value/*[in]*/) = 0;
  // [269] Таймаут команд ККМ, связанных с выводом на внешние устройства
  virtual HRESULT STDMETHODCALLTYPE get_ExternalTimeout(long* Value/*[out,retval]*/) = 0;
  // [269] Таймаут команд ККМ, связанных с выводом на внешние устройства
  virtual HRESULT STDMETHODCALLTYPE set_ExternalTimeout(long Value/*[in]*/) = 0;
  // [270] Чтение строки заголовка
  virtual HRESULT STDMETHODCALLTYPE QueryHeaderLine(long LineNum/*[in]*/, 
                                                    BSTR* Value/*[out,retval]*/) = 0;
  // [271] Чтение серийного номера ККМ
  virtual HRESULT STDMETHODCALLTYPE QuerySerialNumber(BSTR* Value/*[out,retval]*/) = 0;
  // [272] Программирование серийного номера ККМ
  virtual HRESULT STDMETHODCALLTYPE SetSerialNumber(BSTR Value/*[in]*/) = 0;
  // [273] Чтение ИНН владельца ККМ
  virtual HRESULT STDMETHODCALLTYPE QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/) = 0;
  // [274] Чтение регистрационного номера ККМ
  virtual HRESULT STDMETHODCALLTYPE QueryRegNumber(BSTR* Value/*[out,retval]*/) = 0;
  // [275] Чтение времени по часам ККМ
  virtual HRESULT STDMETHODCALLTYPE QueryEcrDateTime(DATE* Value/*[out,retval]*/) = 0;
  // [276] Чтение наименования отдела
  virtual HRESULT STDMETHODCALLTYPE QueryDepartName(long DepartNum/*[in]*/, 
                                                    BSTR* Value/*[out,retval]*/) = 0;
  // [277] Программирование наименования отдела
  virtual HRESULT STDMETHODCALLTYPE SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/) = 0;
  // [278] Чтение программируемого заголовка
  virtual HRESULT STDMETHODCALLTYPE QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/) = 0;
  // [279] Программирование заголовка
  virtual HRESULT STDMETHODCALLTYPE SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/) = 0;
  // [280] Признак наличия активного соединения с ККМ
  virtual HRESULT STDMETHODCALLTYPE get_Active(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [280] Признак наличия активного соединения с ККМ
  virtual HRESULT STDMETHODCALLTYPE set_Active(VARIANT_BOOL Value/*[in]*/) = 0;
  // [281] Состояние соединения с ККМ
  virtual HRESULT STDMETHODCALLTYPE get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/) = 0;
  // [282] Сумма продаж
  virtual HRESULT STDMETHODCALLTYPE get_SaleSum(CURRENCY* Value/*[out,retval]*/) = 0;
  // [283] Сумма покупок
  virtual HRESULT STDMETHODCALLTYPE get_BuyingSum(CURRENCY* Value/*[out,retval]*/) = 0;
  // [284] Серийный номер ККМ
  virtual HRESULT STDMETHODCALLTYPE get_SerialNumber(BSTR* Value/*[out,retval]*/) = 0;
  // [285] Регистрационный номер ККМ
  virtual HRESULT STDMETHODCALLTYPE get_RegNumber(BSTR* Value/*[out,retval]*/) = 0;
  // [286] ИНН владельца ККМ
  virtual HRESULT STDMETHODCALLTYPE get_TaxPayerNumber(BSTR* Value/*[out,retval]*/) = 0;
  // [287] Строка клише 1
  virtual HRESULT STDMETHODCALLTYPE get_HeaderLine1(BSTR* Value/*[out,retval]*/) = 0;
  // [288] Строка клише 2
  virtual HRESULT STDMETHODCALLTYPE get_HeaderLine2(BSTR* Value/*[out,retval]*/) = 0;
  // [289] Строка клише 3
  virtual HRESULT STDMETHODCALLTYPE get_HeaderLine3(BSTR* Value/*[out,retval]*/) = 0;
  // [290] Строка клише 4
  virtual HRESULT STDMETHODCALLTYPE get_HeaderLine4(BSTR* Value/*[out,retval]*/) = 0;
  // [291] Начальная дата фискального отчета
  virtual HRESULT STDMETHODCALLTYPE get_StartDate(DATE* Value/*[out,retval]*/) = 0;
  // [292] Конечная дата фискального отчета
  virtual HRESULT STDMETHODCALLTYPE get_EndDate(DATE* Value/*[out,retval]*/) = 0;
  // [293] Начальный номер фискального отчета
  virtual HRESULT STDMETHODCALLTYPE get_StartNumber(long* Value/*[out,retval]*/) = 0;
  // [294] Конечный номер фискального отчета
  virtual HRESULT STDMETHODCALLTYPE get_EndNumber(long* Value/*[out,retval]*/) = 0;
  // [295] Дата и время снятия фискального отчета
  virtual HRESULT STDMETHODCALLTYPE get_ReportDate(DATE* Value/*[out,retval]*/) = 0;
  // [296] Наименование модели ККМ
  virtual HRESULT STDMETHODCALLTYPE get_ModelName(BSTR* Value/*[out,retval]*/) = 0;
  // [297] Наименование производителя ККМ
  virtual HRESULT STDMETHODCALLTYPE get_Manufacturer(BSTR* Value/*[out,retval]*/) = 0;
  // [298] Версия встроенного в ККМ ПО
  virtual HRESULT STDMETHODCALLTYPE get_FirmwareVersion(BSTR* Value/*[out,retval]*/) = 0;
  // [299] Наименование налога
  virtual HRESULT STDMETHODCALLTYPE get_TaxName(BSTR* Value/*[out,retval]*/) = 0;
  // [300] Дата изменения налоговой ставки
  virtual HRESULT STDMETHODCALLTYPE get_TaxDate(DATE* Value/*[out,retval]*/) = 0;
  // [301] Количество операций, соответствующих счетчику ККМ
  virtual HRESULT STDMETHODCALLTYPE get_CounterCount(long* Value/*[out,retval]*/) = 0;
  // [302] Оставшееся число перерегистраций
  virtual HRESULT STDMETHODCALLTYPE get_RewritesRemain(long* Value/*[out,retval]*/) = 0;
  // [303] Оставшееся число закрытий смен
  virtual HRESULT STDMETHODCALLTYPE get_DaysRemain(long* Value/*[out,retval]*/) = 0;
  // [304] Номер последнего фискального отчета
  virtual HRESULT STDMETHODCALLTYPE get_LastFiscalReport(long* Value/*[out,retval]*/) = 0;
  // [305] Номер последнего закрытия смены
  virtual HRESULT STDMETHODCALLTYPE get_LastDayClosing(long* Value/*[out,retval]*/) = 0;
  // [306] Дата и время открытия смены
  virtual HRESULT STDMETHODCALLTYPE get_DayDate(DATE* Value/*[out,retval]*/) = 0;
  // [307] Номер кассира, оформившего последний фискальный документ
  virtual HRESULT STDMETHODCALLTYPE get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/) = 0;
  // [308] Номер последнего фискального документа
  virtual HRESULT STDMETHODCALLTYPE get_LastDocNumber(long* Value/*[out,retval]*/) = 0;
  // [309] Номер чека последнего фискального документа
  virtual HRESULT STDMETHODCALLTYPE get_LastRecNumber(long* Value/*[out,retval]*/) = 0;
  // [310] Тип последнего фискального документа
  virtual HRESULT STDMETHODCALLTYPE get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/) = 0;
  // [311] Сумма последнего фискального документа
  virtual HRESULT STDMETHODCALLTYPE get_LastDocSum(CURRENCY* Value/*[out,retval]*/) = 0;
  // [312] Дата и время последнего фискального документа
  virtual HRESULT STDMETHODCALLTYPE get_LastDocDate(DATE* Value/*[out,retval]*/) = 0;
  // [313] Признак повтора неудавшейся операции
  virtual HRESULT STDMETHODCALLTYPE get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [313] Признак повтора неудавшейся операции
  virtual HRESULT STDMETHODCALLTYPE set_RetryOperation(VARIANT_BOOL Value/*[in]*/) = 0;
  // [314] Код последней ошибки
  virtual HRESULT STDMETHODCALLTYPE get_ErrCode(long* Value/*[out,retval]*/) = 0;
  // [315] Расширенный код последней ошибки
  virtual HRESULT STDMETHODCALLTYPE get_ErrCodeEx(long* Value/*[out,retval]*/) = 0;
  // [316] Описание последней ошибки
  virtual HRESULT STDMETHODCALLTYPE get_ErrMessage(BSTR* Value/*[out,retval]*/) = 0;
  // [317] Получить значение флага текущего статуса ККМ
  virtual HRESULT STDMETHODCALLTYPE CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/) = 0;
  // [318] Получить значение флага текущего статуса внешних устройств
  virtual HRESULT STDMETHODCALLTYPE CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/) = 0;
  // [319] Текущий час по часам ККМ
  virtual HRESULT STDMETHODCALLTYPE get_EcrHour(long* Value/*[out,retval]*/) = 0;
  // [320] Текущая минута по часам ККМ
  virtual HRESULT STDMETHODCALLTYPE get_EcrMin(long* Value/*[out,retval]*/) = 0;
  // [321] Час снятия фискального отчета
  virtual HRESULT STDMETHODCALLTYPE get_ReportHour(long* Value/*[out,retval]*/) = 0;
  // [322] Минута снятия фискального отчета
  virtual HRESULT STDMETHODCALLTYPE get_ReportMin(long* Value/*[out,retval]*/) = 0;
  // [323] Час открытия смены
  virtual HRESULT STDMETHODCALLTYPE get_DayHour(long* Value/*[out,retval]*/) = 0;
  // [324] Минута открытия смены
  virtual HRESULT STDMETHODCALLTYPE get_DayMin(long* Value/*[out,retval]*/) = 0;
  // [325] Час оформления последнего документа
  virtual HRESULT STDMETHODCALLTYPE get_LastDocHour(long* Value/*[out,retval]*/) = 0;
  // [326] Минута оформления последнего документа
  virtual HRESULT STDMETHODCALLTYPE get_LastDocMin(long* Value/*[out,retval]*/) = 0;
  // [327] Добавление графического клише в документ
  virtual HRESULT STDMETHODCALLTYPE AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                                     long VOffset/*[in]*/) = 0;
  // [328] Изменение типа используемого протокола
  virtual HRESULT STDMETHODCALLTYPE SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/) = 0;
  // [329] Установка времени ожидания готовности принтера
  virtual HRESULT STDMETHODCALLTYPE SetPrinterTimeout(long Timeout/*[in]*/) = 0;
  // [330] Установка времени ожидания готовности дисплея
  virtual HRESULT STDMETHODCALLTYPE SetDisplayTimeout(long Timeout/*[in]*/) = 0;
  // [331] Установка степени контрастности принтера
  virtual HRESULT STDMETHODCALLTYPE SetPrinterContrast(long Contrast/*[in]*/) = 0;
  // [332] Установка значения межстрочного интервала
  virtual HRESULT STDMETHODCALLTYPE SetLeading(long Leading/*[in]*/) = 0;
  // [333] Включение / отключение отрезного ножа
  virtual HRESULT STDMETHODCALLTYPE SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/) = 0;
  // [334] Включение / отключение использования узкой ленты
  virtual HRESULT STDMETHODCALLTYPE SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/) = 0;
  // [335] Чтение времени ожидания готовности принтера
  virtual HRESULT STDMETHODCALLTYPE QueryPrinterTimeout(long* Value/*[out,retval]*/) = 0;
  // [336] Чтение времени ожидания готовности дисплея
  virtual HRESULT STDMETHODCALLTYPE QueryDisplayTimeout(long* Value/*[out,retval]*/) = 0;
  // [337] Чтение степени контрастности принтера
  virtual HRESULT STDMETHODCALLTYPE QueryPrinterContrast(long* Value/*[out,retval]*/) = 0;
  // [338] Чтение значения межстрочного интервала
  virtual HRESULT STDMETHODCALLTYPE QueryLeading(long* Value/*[out,retval]*/) = 0;
  // [339] Включение графического клише
  virtual HRESULT STDMETHODCALLTYPE EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                        BSTR Data/*[in]*/) = 0;
  // [340] Отключение графического клише
  virtual HRESULT STDMETHODCALLTYPE DisableGraphicHeader(void) = 0;
  // [341] Добавить лицензию для ККМ
  virtual HRESULT STDMETHODCALLTYPE AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                               BSTR Licence/*[in]*/) = 0;
  // [342] Печать сменного X-отчета
  virtual HRESULT STDMETHODCALLTYPE XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/) = 0;
  // [343] Печать сменного X-отчета по отделам
  virtual HRESULT STDMETHODCALLTYPE XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                                 long* ReportNum/*[out,retval]*/) = 0;
  // [344] Печать сменного X-отчета по кассирам
  virtual HRESULT STDMETHODCALLTYPE XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                                  long* ReportNum/*[out,retval]*/) = 0;
  // [345] Чтение режима выравнивания заголовка документов по центру (вкл. / выкл.)
  virtual HRESULT STDMETHODCALLTYPE QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [346] Чтение номера зарегистрированного кассира
  virtual HRESULT STDMETHODCALLTYPE QueryOperNumber(long* Value/*[out,retval]*/) = 0;
  // [347] Чтение имени кассира по номеру
  virtual HRESULT STDMETHODCALLTYPE QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/) = 0;
  // [348] Включение / отключение выравнивания заголовка документов по центру
  virtual HRESULT STDMETHODCALLTYPE SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/) = 0;
  // [349] Проверка соединения с ККМ
  virtual HRESULT STDMETHODCALLTYPE TestConnection(void) = 0;
  // [350] Номер версии программного компонента
  virtual HRESULT STDMETHODCALLTYPE get_VersionNumber(long* Value/*[out,retval]*/) = 0;
  // [351] Номер сборки программного компонента
  virtual HRESULT STDMETHODCALLTYPE get_BuildNumber(long* Value/*[out,retval]*/) = 0;
  // [352] Строка-идентификатор версии программного компонента
  virtual HRESULT STDMETHODCALLTYPE get_Version(BSTR* Value/*[out,retval]*/) = 0;
  // [352] Строка-идентификатор версии программного компонента
  virtual HRESULT STDMETHODCALLTYPE set_Version(BSTR Value/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall ZReport(long Flags/*[in]*/)
  {
    long ReportNum;
    OLECHECK(this->ZReport(Flags, (long*)&ReportNum));
    return ReportNum;
  }

  long __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, BSTR TaxPayerNum/*[in]*/, 
                                BSTR NewInspPswd/*[in]*/)
  {
    long RewriteNum;
    OLECHECK(this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum));
    return RewriteNum;
  }

  long __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                    long AStartNum/*[in]*/, long AEndNum/*[in]*/)
  {
    long AReportNum;
    OLECHECK(this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum));
    return AReportNum;
  }

  long __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                     DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
  {
    long AReportNum;
    OLECHECK(this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum));
    return AReportNum;
  }

  long __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/)
  {
    long AReportNum;
    OLECHECK(this->FiscalReportAll(InspPswd, (long*)&AReportNum));
    return AReportNum;
  }

  long __fastcall QueryTax(long Index/*[in]*/)
  {
    long ATaxRate;
    OLECHECK(this->QueryTax(Index, (long*)&ATaxRate));
    return ATaxRate;
  }

  CURRENCY __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
  {
    CURRENCY ASum;
    OLECHECK(this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum));
    return ASum;
  }

  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void)
  {
    Mercfprtx_tlb::TxMercEcrModel Value;
    OLECHECK(this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value));
    return Value;
  }

  long __fastcall get_EcrVersion(void)
  {
    long Value;
    OLECHECK(this->get_EcrVersion((long*)&Value));
    return Value;
  }

  long __fastcall get_Generation(void)
  {
    long Value;
    OLECHECK(this->get_Generation((long*)&Value));
    return Value;
  }

  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void)
  {
    Mercfprtx_tlb::TxMercProtocol Value;
    OLECHECK(this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value));
    return Value;
  }

  long __fastcall get_EcrStatus(void)
  {
    long Value;
    OLECHECK(this->get_EcrStatus((long*)&Value));
    return Value;
  }

  long __fastcall get_EcrStatusMask(void)
  {
    long Value;
    OLECHECK(this->get_EcrStatusMask((long*)&Value));
    return Value;
  }

  long __fastcall get_DevStatus(void)
  {
    long Value;
    OLECHECK(this->get_DevStatus((long*)&Value));
    return Value;
  }

  long __fastcall get_DevStatusMask(void)
  {
    long Value;
    OLECHECK(this->get_DevStatusMask((long*)&Value));
    return Value;
  }

  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void)
  {
    Mercfprtx_tlb::TxMercDocStatus Value;
    OLECHECK(this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value));
    return Value;
  }

  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void)
  {
    Mercfprtx_tlb::TxMercOperType Value;
    OLECHECK(this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value));
    return Value;
  }

  long __fastcall get_PortNum(void)
  {
    long Value;
    OLECHECK(this->get_PortNum((long*)&Value));
    return Value;
  }

  long __fastcall get_BaudRate(void)
  {
    long Value;
    OLECHECK(this->get_BaudRate((long*)&Value));
    return Value;
  }

  BSTR __fastcall get_Password(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Password((BSTR*)&Value));
    return Value;
  }

  long __fastcall get_InternalTimeout(void)
  {
    long Value;
    OLECHECK(this->get_InternalTimeout((long*)&Value));
    return Value;
  }

  long __fastcall get_ExternalTimeout(void)
  {
    long Value;
    OLECHECK(this->get_ExternalTimeout((long*)&Value));
    return Value;
  }

  BSTR __fastcall QueryHeaderLine(long LineNum/*[in]*/)
  {
    BSTR Value = 0;
    OLECHECK(this->QueryHeaderLine(LineNum, (BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall QuerySerialNumber(void)
  {
    BSTR Value = 0;
    OLECHECK(this->QuerySerialNumber((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall QueryTaxPayerNumber(void)
  {
    BSTR Value = 0;
    OLECHECK(this->QueryTaxPayerNumber((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall QueryRegNumber(void)
  {
    BSTR Value = 0;
    OLECHECK(this->QueryRegNumber((BSTR*)&Value));
    return Value;
  }

  DATE __fastcall QueryEcrDateTime(void)
  {
    DATE Value;
    OLECHECK(this->QueryEcrDateTime((DATE*)&Value));
    return Value;
  }

  BSTR __fastcall QueryDepartName(long DepartNum/*[in]*/)
  {
    BSTR Value = 0;
    OLECHECK(this->QueryDepartName(DepartNum, (BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall QueryTitle(long TitleNum/*[in]*/)
  {
    BSTR Value = 0;
    OLECHECK(this->QueryTitle(TitleNum, (BSTR*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Active(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Active((VARIANT_BOOL*)&Value));
    return Value;
  }

  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void)
  {
    Mercfprtx_tlb::TxMercConnState Value;
    OLECHECK(this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value));
    return Value;
  }

  CURRENCY __fastcall get_SaleSum(void)
  {
    CURRENCY Value;
    OLECHECK(this->get_SaleSum((CURRENCY*)&Value));
    return Value;
  }

  CURRENCY __fastcall get_BuyingSum(void)
  {
    CURRENCY Value;
    OLECHECK(this->get_BuyingSum((CURRENCY*)&Value));
    return Value;
  }

  BSTR __fastcall get_SerialNumber(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_SerialNumber((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_RegNumber(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_RegNumber((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TaxPayerNumber(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TaxPayerNumber((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_HeaderLine1(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_HeaderLine1((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_HeaderLine2(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_HeaderLine2((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_HeaderLine3(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_HeaderLine3((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_HeaderLine4(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_HeaderLine4((BSTR*)&Value));
    return Value;
  }

  DATE __fastcall get_StartDate(void)
  {
    DATE Value;
    OLECHECK(this->get_StartDate((DATE*)&Value));
    return Value;
  }

  DATE __fastcall get_EndDate(void)
  {
    DATE Value;
    OLECHECK(this->get_EndDate((DATE*)&Value));
    return Value;
  }

  long __fastcall get_StartNumber(void)
  {
    long Value;
    OLECHECK(this->get_StartNumber((long*)&Value));
    return Value;
  }

  long __fastcall get_EndNumber(void)
  {
    long Value;
    OLECHECK(this->get_EndNumber((long*)&Value));
    return Value;
  }

  DATE __fastcall get_ReportDate(void)
  {
    DATE Value;
    OLECHECK(this->get_ReportDate((DATE*)&Value));
    return Value;
  }

  BSTR __fastcall get_ModelName(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ModelName((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_Manufacturer(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Manufacturer((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_FirmwareVersion(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_FirmwareVersion((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TaxName(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TaxName((BSTR*)&Value));
    return Value;
  }

  DATE __fastcall get_TaxDate(void)
  {
    DATE Value;
    OLECHECK(this->get_TaxDate((DATE*)&Value));
    return Value;
  }

  long __fastcall get_CounterCount(void)
  {
    long Value;
    OLECHECK(this->get_CounterCount((long*)&Value));
    return Value;
  }

  long __fastcall get_RewritesRemain(void)
  {
    long Value;
    OLECHECK(this->get_RewritesRemain((long*)&Value));
    return Value;
  }

  long __fastcall get_DaysRemain(void)
  {
    long Value;
    OLECHECK(this->get_DaysRemain((long*)&Value));
    return Value;
  }

  long __fastcall get_LastFiscalReport(void)
  {
    long Value;
    OLECHECK(this->get_LastFiscalReport((long*)&Value));
    return Value;
  }

  long __fastcall get_LastDayClosing(void)
  {
    long Value;
    OLECHECK(this->get_LastDayClosing((long*)&Value));
    return Value;
  }

  DATE __fastcall get_DayDate(void)
  {
    DATE Value;
    OLECHECK(this->get_DayDate((DATE*)&Value));
    return Value;
  }

  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void)
  {
    Mercfprtx_tlb::TxMercOperType Value;
    OLECHECK(this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value));
    return Value;
  }

  long __fastcall get_LastDocNumber(void)
  {
    long Value;
    OLECHECK(this->get_LastDocNumber((long*)&Value));
    return Value;
  }

  long __fastcall get_LastRecNumber(void)
  {
    long Value;
    OLECHECK(this->get_LastRecNumber((long*)&Value));
    return Value;
  }

  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void)
  {
    Mercfprtx_tlb::TxMercOperType Value;
    OLECHECK(this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value));
    return Value;
  }

  CURRENCY __fastcall get_LastDocSum(void)
  {
    CURRENCY Value;
    OLECHECK(this->get_LastDocSum((CURRENCY*)&Value));
    return Value;
  }

  DATE __fastcall get_LastDocDate(void)
  {
    DATE Value;
    OLECHECK(this->get_LastDocDate((DATE*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_RetryOperation(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_RetryOperation((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_ErrCode(void)
  {
    long Value;
    OLECHECK(this->get_ErrCode((long*)&Value));
    return Value;
  }

  long __fastcall get_ErrCodeEx(void)
  {
    long Value;
    OLECHECK(this->get_ErrCodeEx((long*)&Value));
    return Value;
  }

  BSTR __fastcall get_ErrMessage(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ErrMessage((BSTR*)&Value));
    return Value;
  }

  long __fastcall CheckEcrStatus(long Flag/*[in]*/)
  {
    long Value;
    OLECHECK(this->CheckEcrStatus(Flag, (long*)&Value));
    return Value;
  }

  long __fastcall CheckDevStatus(long Flag/*[in]*/)
  {
    long Value;
    OLECHECK(this->CheckDevStatus(Flag, (long*)&Value));
    return Value;
  }

  long __fastcall get_EcrHour(void)
  {
    long Value;
    OLECHECK(this->get_EcrHour((long*)&Value));
    return Value;
  }

  long __fastcall get_EcrMin(void)
  {
    long Value;
    OLECHECK(this->get_EcrMin((long*)&Value));
    return Value;
  }

  long __fastcall get_ReportHour(void)
  {
    long Value;
    OLECHECK(this->get_ReportHour((long*)&Value));
    return Value;
  }

  long __fastcall get_ReportMin(void)
  {
    long Value;
    OLECHECK(this->get_ReportMin((long*)&Value));
    return Value;
  }

  long __fastcall get_DayHour(void)
  {
    long Value;
    OLECHECK(this->get_DayHour((long*)&Value));
    return Value;
  }

  long __fastcall get_DayMin(void)
  {
    long Value;
    OLECHECK(this->get_DayMin((long*)&Value));
    return Value;
  }

  long __fastcall get_LastDocHour(void)
  {
    long Value;
    OLECHECK(this->get_LastDocHour((long*)&Value));
    return Value;
  }

  long __fastcall get_LastDocMin(void)
  {
    long Value;
    OLECHECK(this->get_LastDocMin((long*)&Value));
    return Value;
  }

  long __fastcall QueryPrinterTimeout(void)
  {
    long Value;
    OLECHECK(this->QueryPrinterTimeout((long*)&Value));
    return Value;
  }

  long __fastcall QueryDisplayTimeout(void)
  {
    long Value;
    OLECHECK(this->QueryDisplayTimeout((long*)&Value));
    return Value;
  }

  long __fastcall QueryPrinterContrast(void)
  {
    long Value;
    OLECHECK(this->QueryPrinterContrast((long*)&Value));
    return Value;
  }

  long __fastcall QueryLeading(void)
  {
    long Value;
    OLECHECK(this->QueryLeading((long*)&Value));
    return Value;
  }

  long __fastcall XReport(long Flags/*[in]*/)
  {
    long ReportNum;
    OLECHECK(this->XReport(Flags, (long*)&ReportNum));
    return ReportNum;
  }

  long __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
  {
    long ReportNum;
    OLECHECK(this->XReportByDep(DepartNum, Flags, (long*)&ReportNum));
    return ReportNum;
  }

  long __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
  {
    long ReportNum;
    OLECHECK(this->XReportByOper(OperNum, Flags, (long*)&ReportNum));
    return ReportNum;
  }

  VARIANT_BOOL __fastcall QueryHeaderAlignment(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->QueryHeaderAlignment((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall QueryOperNumber(void)
  {
    long Value;
    OLECHECK(this->QueryOperNumber((long*)&Value));
    return Value;
  }

  BSTR __fastcall QueryOperName(long OperNum/*[in]*/)
  {
    BSTR Value = 0;
    OLECHECK(this->QueryOperName(OperNum, (BSTR*)&Value));
    return Value;
  }

  long __fastcall get_VersionNumber(void)
  {
    long Value;
    OLECHECK(this->get_VersionNumber((long*)&Value));
    return Value;
  }

  long __fastcall get_BuildNumber(void)
  {
    long Value;
    OLECHECK(this->get_BuildNumber((long*)&Value));
    return Value;
  }

  BSTR __fastcall get_Version(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Version((BSTR*)&Value));
    return Value;
  }


  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrtEvents
// Flags:     (4096) Dispatchable
// GUID:      {2E1B3242-7861-424F-B925-E230D966DDAE}
// *********************************************************************//
interface IMercuryFPrtEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnNoResponse()
  {
    _TDispID _dispid(/* OnNoResponse */ DISPID(201));
    OleProcedure(_dispid);
  }

  void __fastcall OnStatusUpdate()
  {
    _TDispID _dispid(/* OnStatusUpdate */ DISPID(204));
    OleProcedure(_dispid);
  }

  HRESULT __fastcall OnConnStateUpdate()
  {
    _TDispID _dispid(/* OnConnStateUpdate */ DISPID(205));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall OnPrinterError()
  {
    _TDispID _dispid(/* OnPrinterError */ DISPID(202));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall OnDisplayError()
  {
    _TDispID _dispid(/* OnDisplayError */ DISPID(203));
    return OleFunction(_dispid);
  }


};
// *********************************************************************//
// Interface: IMercuryFPrtX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6976823E-B5E5-4748-BD90-6516D22B694E}
// *********************************************************************//
interface IMercuryFPrtX  : public Mercfprtx_tlb::IMercuryFPrt
{
public:
  // [1001] Ширина окружающей компонент рамки
  virtual HRESULT STDMETHODCALLTYPE get_BorderSize(long* Value/*[out,retval]*/) = 0;
  // [1001] Ширина окружающей компонент рамки
  virtual HRESULT STDMETHODCALLTYPE set_BorderSize(long Value/*[in]*/) = 0;
  // [1002] Признак отображения индикатора статуса соединения
  virtual HRESULT STDMETHODCALLTYPE get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [1002] Признак отображения индикатора статуса соединения
  virtual HRESULT STDMETHODCALLTYPE set_ShowState(VARIANT_BOOL Value/*[in]*/) = 0;
  // [-514] Признак доступности компонента
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [-514] Признак доступности компонента
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Value/*[in]*/) = 0;
  // [-552] Отображения окна с описанием компонента
  virtual HRESULT STDMETHODCALLTYPE AboutBox(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_BorderSize(void)
  {
    long Value;
    OLECHECK(this->get_BorderSize((long*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_ShowState(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_ShowState((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Value));
    return Value;
  }


  __property   long            BorderSize = {read = get_BorderSize, write = set_BorderSize};
  __property   VARIANT_BOOL    ShowState = {read = get_ShowState, write = set_ShowState};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _IMercuryFPrtEventsDirect
// Flags:     (256) OleAutomation
// GUID:      {DF60ED81-A028-4863-8C69-662E5F28512B}
// *********************************************************************//
interface _IMercuryFPrtEventsDirect  : public IUnknown
{
public:
  // [201] Отсутствие ответа от ККМ
  virtual HRESULT STDMETHODCALLTYPE OnNoResponse(void) = 0;
  // [204] Обновление статуса ККМ или внешних устройств
  virtual HRESULT STDMETHODCALLTYPE OnStatusUpdate(void) = 0;
  // [205] Изменение состояния соединения с ККМ
  virtual HRESULT STDMETHODCALLTYPE OnConnStateUpdate(void) = 0;
  // [202] Ошибка принтера
  virtual HRESULT STDMETHODCALLTYPE OnPrinterError(void) = 0;
  // [203] Ошибка дисплея покупателя
  virtual HRESULT STDMETHODCALLTYPE OnDisplayError(void) = 0;
};

// *********************************************************************//
// Interface: IMercuryFPrt2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {081E43FF-4768-4C9A-957F-BF117CFDD15B}
// *********************************************************************//
interface IMercuryFPrt2  : public Mercfprtx_tlb::IMercuryFPrt
{
public:
  // [353] Запрос режима автоотреза платежного документа
  virtual HRESULT STDMETHODCALLTYPE QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [354] Включение / отключение автоотреза платежного документа
  virtual HRESULT STDMETHODCALLTYPE SetAutocut(VARIANT_BOOL Autocut/*[in]*/) = 0;
  // [355] Запрос режима краткой контрольной ленты
  virtual HRESULT STDMETHODCALLTYPE QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [356] Включение / отключение режима краткой контрольной ленты
  virtual HRESULT STDMETHODCALLTYPE SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/) = 0;
  // [357] Дополнительный номер версии ПО подключенной ККМ
  virtual HRESULT STDMETHODCALLTYPE get_EcrSubVersion(long* Value/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall QueryAutocut(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->QueryAutocut((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall QueryEconomicMode(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->QueryEconomicMode((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_EcrSubVersion(void)
  {
    long Value;
    OLECHECK(this->get_EcrSubVersion((long*)&Value));
    return Value;
  }


  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrt3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {761CED73-985A-4FCF-95E7-21D03E489305}
// *********************************************************************//
interface IMercuryFPrt3  : public Mercfprtx_tlb::IMercuryFPrt2
{
public:
  // [401] Активизация ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE EKLZActivate(void) = 0;
  // [402] Печать отчета активизации ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE EKLZActivationReport(void) = 0;
  // [403] Печать итогов ЭКЛЗ за смену
  virtual HRESULT STDMETHODCALLTYPE EKLZDayReport(long DayNumber/*[in]*/) = 0;
  // [404] Печать отчета ЭКЛЗ по номерам смен
  virtual HRESULT STDMETHODCALLTYPE EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, 
                                                    long AStartNum/*[in]*/, long AEndNum/*[in]*/) = 0;
  // [405] Печать отчета ЭКЛЗ по датам
  virtual HRESULT STDMETHODCALLTYPE EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, 
                                                     DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/) = 0;
  // [406] Печать документа ЭКЛЗ по номеру КПК
  virtual HRESULT STDMETHODCALLTYPE EKLZDocByNum(long Number/*[in]*/) = 0;
  // [407] Печать контрольной ленты по номеру смены в ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE EKLZControlByNum(long DayNumber/*[in]*/) = 0;
  // [408] Закрытие архива ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE EKLZCloseArchive(void) = 0;
  // [409] Запрос статуса ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE EKLZQueryStatus(void) = 0;
  // [410] Запрос режима оформления бумажной контрольной ленты
  virtual HRESULT STDMETHODCALLTYPE QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [411] Установка режима оформления бумажной контрольной ленты
  virtual HRESULT STDMETHODCALLTYPE SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/) = 0;
  // [412] Поддержка ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [413] ЭКЛЗ активирована
  virtual HRESULT STDMETHODCALLTYPE get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [414] Операция, проводимая через ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/) = 0;
  // [415] Архив ЭКЛЗ включен
  virtual HRESULT STDMETHODCALLTYPE get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [416] Осуществляется печать отчета ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [417] Кассовая смена ЭКЛЗ открыта
  virtual HRESULT STDMETHODCALLTYPE get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [418] Неустранимая ошибка ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [419] ЭКЛЗ близка к завершению
  virtual HRESULT STDMETHODCALLTYPE get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [420] Номер последнего X-отчета или Z-отчета
  virtual HRESULT STDMETHODCALLTYPE get_LastRepNumber(long* Value/*[out,retval]*/) = 0;
  // [421] Количество оставшихся активизаций ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE get_EKLZRest(long* Value/*[out,retval]*/) = 0;
  // [422] Запрос режима полной контрольной ленты
  virtual HRESULT STDMETHODCALLTYPE QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [423] Установка режима полной контрольной ленты
  virtual HRESULT STDMETHODCALLTYPE SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/) = 0;
  // [424] Добавление данных ЭКЛЗ в документ
  virtual HRESULT STDMETHODCALLTYPE AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                                long VOffset/*[in]*/) = 0;
  // [425] Фискальная сумма покупок в последнем отчете
  virtual HRESULT STDMETHODCALLTYPE get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall QueryPaperJournal(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->QueryPaperJournal((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_EKLZSupported(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_EKLZSupported((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_EKLZActivated(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_EKLZActivated((VARIANT_BOOL*)&Value));
    return Value;
  }

  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void)
  {
    Mercfprtx_tlb::TxMercOperType Value;
    OLECHECK(this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_EKLZArchiving(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_EKLZArchiving((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_EKLZReporting(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_EKLZReporting((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_EKLZDayOpened(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_EKLZDayOpened((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_EKLZFatalError(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_EKLZFatalError((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_EKLZAttention(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_EKLZAttention((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_LastRepNumber(void)
  {
    long Value;
    OLECHECK(this->get_LastRepNumber((long*)&Value));
    return Value;
  }

  long __fastcall get_EKLZRest(void)
  {
    long Value;
    OLECHECK(this->get_EKLZRest((long*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall QueryFullJournal(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->QueryFullJournal((VARIANT_BOOL*)&Value));
    return Value;
  }

  CURRENCY __fastcall get_LastBuyingSum(void)
  {
    CURRENCY Value;
    OLECHECK(this->get_LastBuyingSum((CURRENCY*)&Value));
    return Value;
  }


  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   long            LastRepNumber = {read = get_LastRepNumber};
  __property   long            EKLZRest = {read = get_EKLZRest};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrtX2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {15273680-3D9A-4D78-9FEC-B92FFCD88441}
// *********************************************************************//
interface IMercuryFPrtX2  : public Mercfprtx_tlb::IMercuryFPrtX
{
public:
  // [353] Запрос режима автоотреза платежного документа
  virtual HRESULT STDMETHODCALLTYPE QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [354] Включение / отключение автоотреза платежного документа
  virtual HRESULT STDMETHODCALLTYPE SetAutocut(VARIANT_BOOL Autocut/*[in]*/) = 0;
  // [355] Запрос режима краткой контрольной ленты
  virtual HRESULT STDMETHODCALLTYPE QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [356] Включение / отключение режима краткой контрольной ленты
  virtual HRESULT STDMETHODCALLTYPE SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/) = 0;
  // [357] Дополнительный номер версии ПО подключенной ККМ
  virtual HRESULT STDMETHODCALLTYPE get_EcrSubVersion(long* Value/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall QueryAutocut(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->QueryAutocut((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall QueryEconomicMode(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->QueryEconomicMode((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_EcrSubVersion(void)
  {
    long Value;
    OLECHECK(this->get_EcrSubVersion((long*)&Value));
    return Value;
  }


  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrtX3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7F2562A6-46FE-41FD-A75F-85535472969F}
// *********************************************************************//
interface IMercuryFPrtX3  : public Mercfprtx_tlb::IMercuryFPrtX2
{
public:
  // [401] Активизация ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE EKLZActivate(void) = 0;
  // [402] Печать отчета активизации ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE EKLZActivationReport(void) = 0;
  // [403] Печать итогов ЭКЛЗ за смену
  virtual HRESULT STDMETHODCALLTYPE EKLZDayReport(long DayNumber/*[in]*/) = 0;
  // [404] Печать отчета ЭКЛЗ по номерам смен
  virtual HRESULT STDMETHODCALLTYPE EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, 
                                                    long AStartNum/*[in]*/, long AEndNum/*[in]*/) = 0;
  // [405] Печать отчета ЭКЛЗ по датам
  virtual HRESULT STDMETHODCALLTYPE EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, 
                                                     DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/) = 0;
  // [406] Печать документа ЭКЛЗ по номеру КПК
  virtual HRESULT STDMETHODCALLTYPE EKLZDocByNum(long Number/*[in]*/) = 0;
  // [407] Печать контрольной ленты по номеру смены в ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE EKLZControlByNum(long DayNumber/*[in]*/) = 0;
  // [408] Закрытие архива ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE EKLZCloseArchive(void) = 0;
  // [409] Запрос статуса ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE EKLZQueryStatus(void) = 0;
  // [410] Запрос режима оформления бумажной контрольной ленты
  virtual HRESULT STDMETHODCALLTYPE QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [411] Установка режима оформления бумажной контрольной ленты
  virtual HRESULT STDMETHODCALLTYPE SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/) = 0;
  // [412] Поддержка ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [413] ЭКЛЗ активирована
  virtual HRESULT STDMETHODCALLTYPE get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [414] Операция, проводимая через ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/) = 0;
  // [415] Архив ЭКЛЗ включен
  virtual HRESULT STDMETHODCALLTYPE get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [416] Осуществляется печать отчета ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [417] Кассовая смена ЭКЛЗ открыта
  virtual HRESULT STDMETHODCALLTYPE get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [418] Неустранимая ошибка ЭКЛЗ
  virtual HRESULT STDMETHODCALLTYPE get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [419] ЭКЛЗ близка к завершению
  virtual HRESULT STDMETHODCALLTYPE get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [501] Запрос режима полной контрольной ленты
  virtual HRESULT STDMETHODCALLTYPE QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [502] Установка режима полной контрольной ленты
  virtual HRESULT STDMETHODCALLTYPE SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/) = 0;
  // [503] Добавление данных ЭКЛЗ в документ
  virtual HRESULT STDMETHODCALLTYPE AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                                long VOffset/*[in]*/) = 0;
  // [504] Фискальная сумма покупок в последнем отчете
  virtual HRESULT STDMETHODCALLTYPE get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall QueryPaperJournal(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->QueryPaperJournal((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_EKLZSupported(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_EKLZSupported((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_EKLZActivated(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_EKLZActivated((VARIANT_BOOL*)&Value));
    return Value;
  }

  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void)
  {
    Mercfprtx_tlb::TxMercOperType Value;
    OLECHECK(this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_EKLZArchiving(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_EKLZArchiving((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_EKLZReporting(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_EKLZReporting((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_EKLZDayOpened(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_EKLZDayOpened((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_EKLZFatalError(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_EKLZFatalError((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_EKLZAttention(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_EKLZAttention((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall QueryFullJournal(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->QueryFullJournal((VARIANT_BOOL*)&Value));
    return Value;
  }

  CURRENCY __fastcall get_LastBuyingSum(void)
  {
    CURRENCY Value;
    OLECHECK(this->get_LastBuyingSum((CURRENCY*)&Value));
    return Value;
  }


  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrt4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {01D442F5-56A5-4F04-8C61-FB651172C6F0}
// *********************************************************************//
interface IMercuryFPrt4  : public Mercfprtx_tlb::IMercuryFPrt3
{
public:
  // [501] Добавление в документ регистрационного номера ККМ
  virtual HRESULT STDMETHODCALLTYPE AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                                 long VOffset/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrtX4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {38FC4258-EFAC-49CE-8215-B3ED204C5E7A}
// *********************************************************************//
interface IMercuryFPrtX4  : public Mercfprtx_tlb::IMercuryFPrtX3
{
public:
  // [601] Добавление в документ регистрационного номера ККМ
  virtual HRESULT STDMETHODCALLTYPE AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                                 long VOffset/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrt5
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {66636E2A-5015-4156-9D06-FC6F63194254}
// *********************************************************************//
interface IMercuryFPrt5  : public Mercfprtx_tlb::IMercuryFPrt4
{
public:
  // [601] Запись графического изображения в память ККМ
  virtual HRESULT STDMETHODCALLTYPE WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, 
                                                 long Height/*[in]*/, BSTR Data/*[in]*/) = 0;
  // [602] Печать графического изображения на чековой ленте
  virtual HRESULT STDMETHODCALLTYPE PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrtX5
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D3FA84FF-677F-4244-AEFB-E8343EF7C706}
// *********************************************************************//
interface IMercuryFPrtX5  : public Mercfprtx_tlb::IMercuryFPrtX4
{
public:
  // [701] Запись графического изображения в память ККМ
  virtual HRESULT STDMETHODCALLTYPE WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, 
                                                 long Height/*[in]*/, BSTR Data/*[in]*/) = 0;
  // [702] Печать графического изображения на чековой ленте
  virtual HRESULT STDMETHODCALLTYPE PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrt6
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FDC67547-0246-4854-9F84-C7EE4E93FB9B}
// *********************************************************************//
interface IMercuryFPrt6  : public Mercfprtx_tlb::IMercuryFPrt5
{
public:
  // [701] Чтение логического значения программируемого параметра
  virtual HRESULT STDMETHODCALLTYPE QueryParameterBool(long ParamCode/*[in]*/, 
                                                       VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [702] Чтение целочисленного значения программируемого параметра
  virtual HRESULT STDMETHODCALLTYPE QueryParameterInt(long ParamCode/*[in]*/, 
                                                      long* Value/*[out,retval]*/) = 0;
  // [703] Установка логического значения программируемого параметра
  virtual HRESULT STDMETHODCALLTYPE SetParameterBool(long ParamCode/*[in]*/, 
                                                     VARIANT_BOOL ParamValue/*[in]*/) = 0;
  // [704] Установка целочисленного значения программируемого параметра
  virtual HRESULT STDMETHODCALLTYPE SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall QueryParameterBool(long ParamCode/*[in]*/)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->QueryParameterBool(ParamCode, (VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall QueryParameterInt(long ParamCode/*[in]*/)
  {
    long Value;
    OLECHECK(this->QueryParameterInt(ParamCode, (long*)&Value));
    return Value;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrtX6
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {44595440-34C5-4FCA-A3BE-154BD980C7BA}
// *********************************************************************//
interface IMercuryFPrtX6  : public Mercfprtx_tlb::IMercuryFPrtX5
{
public:
  // [801] Чтение логического значения программируемого параметра
  virtual HRESULT STDMETHODCALLTYPE QueryParameterBool(long ParamCode/*[in]*/, 
                                                       VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [802] Чтение целочисленного значения программируемого параметра
  virtual HRESULT STDMETHODCALLTYPE QueryParameterInt(long ParamCode/*[in]*/, 
                                                      long* Value/*[out,retval]*/) = 0;
  // [803] Установка логического значения программируемого параметра
  virtual HRESULT STDMETHODCALLTYPE SetParameterBool(long ParamCode/*[in]*/, 
                                                     VARIANT_BOOL ParamValue/*[in]*/) = 0;
  // [804] Установка целочисленного значения программируемого параметра
  virtual HRESULT STDMETHODCALLTYPE SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall QueryParameterBool(long ParamCode/*[in]*/)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->QueryParameterBool(ParamCode, (VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall QueryParameterInt(long ParamCode/*[in]*/)
  {
    long Value;
    OLECHECK(this->QueryParameterInt(ParamCode, (long*)&Value));
    return Value;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrt7
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9549BA81-6015-4DA1-996E-53347CD57ABE}
// *********************************************************************//
interface IMercuryFPrt7  : public Mercfprtx_tlb::IMercuryFPrt6
{
public:
  virtual HRESULT STDMETHODCALLTYPE PrintHeader(void) = 0; // [801]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrtX7
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3D5A10AD-307C-49D4-A59B-70FFEE159CB2}
// *********************************************************************//
interface IMercuryFPrtX7  : public Mercfprtx_tlb::IMercuryFPrtX6
{
public:
  virtual HRESULT STDMETHODCALLTYPE PrintHeader(void) = 0; // [901]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrt8
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9397BB3C-769E-47E2-8C0D-028A38B5D48F}
// *********************************************************************//
interface IMercuryFPrt8  : public Mercfprtx_tlb::IMercuryFPrt7
{
public:
  virtual HRESULT STDMETHODCALLTYPE SetOperPassword(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                                    BSTR OperPassword/*[in]*/) = 0; // [901]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrtX8
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {116A8129-4171-4B1D-8A49-6724A8E975DD}
// *********************************************************************//
interface IMercuryFPrtX8  : public Mercfprtx_tlb::IMercuryFPrtX7
{
public:
  virtual HRESULT STDMETHODCALLTYPE SetOperPassword(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                                    BSTR OperPassword/*[in]*/) = 0; // [1003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrt9
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B9F07D55-3587-4FFE-BFA8-0F1BFE05554F}
// *********************************************************************//
interface IMercuryFPrt9  : public Mercfprtx_tlb::IMercuryFPrt8
{
public:
  virtual HRESULT STDMETHODCALLTYPE PrintEKL(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/) = 0; // [1001]
  virtual HRESULT STDMETHODCALLTYPE QueryEKLState(Mercfprtx_tlb::TxMercEKLState* State/*[out,retval]*/) = 0; // [1002]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall PrintEKL(long Flags/*[in]*/)
  {
    long ReportNum;
    OLECHECK(this->PrintEKL(Flags, (long*)&ReportNum));
    return ReportNum;
  }

  Mercfprtx_tlb::TxMercEKLState __fastcall QueryEKLState(void)
  {
    Mercfprtx_tlb::TxMercEKLState State;
    OLECHECK(this->QueryEKLState((Mercfprtx_tlb::TxMercEKLState*)&State));
    return State;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrtX9
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {47D80BD0-5B41-4BFE-98AA-9E76BA94F37E}
// *********************************************************************//
interface IMercuryFPrtX9  : public Mercfprtx_tlb::IMercuryFPrtX8
{
public:
  virtual HRESULT STDMETHODCALLTYPE PrintEKL(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/) = 0; // [1101]
  virtual HRESULT STDMETHODCALLTYPE QueryEKLState(Mercfprtx_tlb::TxMercEKLState* State/*[out,retval]*/) = 0; // [1102]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall PrintEKL(long Flags/*[in]*/)
  {
    long ReportNum;
    OLECHECK(this->PrintEKL(Flags, (long*)&ReportNum));
    return ReportNum;
  }

  Mercfprtx_tlb::TxMercEKLState __fastcall QueryEKLState(void)
  {
    Mercfprtx_tlb::TxMercEKLState State;
    OLECHECK(this->QueryEKLState((Mercfprtx_tlb::TxMercEKLState*)&State));
    return State;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrt10
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C389388E-BCC0-4580-8673-47193431C2C3}
// *********************************************************************//
interface IMercuryFPrt10  : public Mercfprtx_tlb::IMercuryFPrt9
{
public:
  virtual HRESULT STDMETHODCALLTYPE ReprintDocument(void) = 0; // [1101]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMercuryFPrtX10
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10ECF5F7-72AB-4B70-8BB9-4297AC4B8EC3}
// *********************************************************************//
interface IMercuryFPrtX10  : public Mercfprtx_tlb::IMercuryFPrtX9
{
public:
  virtual HRESULT STDMETHODCALLTYPE ReprintDocument(void) = 0; // [1201]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<IMercuryFPrt>  TCOMIMercuryFPrt;

// *********************************************************************//
// DispIntf:  IMercuryFPrt
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {525FE0EA-4EA5-45DD-AB9E-EB75ADAF2557}
// *********************************************************************//
template<class T>
class IMercuryFPrtDispT : public TAutoDriver<IMercuryFPrt>
{
public:
  IMercuryFPrtDispT(){}

  IMercuryFPrtDispT(IMercuryFPrt *pintf)
  {
    TAutoDriver<IMercuryFPrt>::Bind(pintf, false);
  }

  IMercuryFPrtDispT(IMercuryFPrtPtr pintf)
  {
    TAutoDriver<IMercuryFPrt>::Bind(pintf, true);
  }

  IMercuryFPrtDispT& operator=(IMercuryFPrt *pintf)
  {
    TAutoDriver<IMercuryFPrt>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrtDispT& operator=(IMercuryFPrtPtr pintf)
  {
    TAutoDriver<IMercuryFPrt>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrtDispT<IMercuryFPrt> IMercuryFPrtDisp;

// *********************************************************************//
// DispIntf:  IMercuryFPrtEvents
// Flags:     (4096) Dispatchable
// GUID:      {2E1B3242-7861-424F-B925-E230D966DDAE}
// *********************************************************************//
template <class T>
class IMercuryFPrtEventsDispT : public TAutoDriver<IMercuryFPrtEvents>
{
public:
  IMercuryFPrtEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnNoResponse();
  void            __fastcall OnStatusUpdate();
  HRESULT         __fastcall OnConnStateUpdate();
  HRESULT         __fastcall OnPrinterError();
  HRESULT         __fastcall OnDisplayError();

};
typedef IMercuryFPrtEventsDispT<IMercuryFPrtEvents> IMercuryFPrtEventsDisp;

typedef TComInterface<IMercuryFPrtX>  TCOMIMercuryFPrtX;

// *********************************************************************//
// DispIntf:  IMercuryFPrtX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6976823E-B5E5-4748-BD90-6516D22B694E}
// *********************************************************************//
template<class T>
class IMercuryFPrtXDispT : public TAutoDriver<IMercuryFPrtX>
{
public:
  IMercuryFPrtXDispT(){}

  IMercuryFPrtXDispT(IMercuryFPrtX *pintf)
  {
    TAutoDriver<IMercuryFPrtX>::Bind(pintf, false);
  }

  IMercuryFPrtXDispT(IMercuryFPrtXPtr pintf)
  {
    TAutoDriver<IMercuryFPrtX>::Bind(pintf, true);
  }

  IMercuryFPrtXDispT& operator=(IMercuryFPrtX *pintf)
  {
    TAutoDriver<IMercuryFPrtX>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrtXDispT& operator=(IMercuryFPrtXPtr pintf)
  {
    TAutoDriver<IMercuryFPrtX>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_BorderSize(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderSize(void);
  HRESULT         __fastcall set_BorderSize(long Value/*[in]*/);
  HRESULT         __fastcall get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowState(void);
  HRESULT         __fastcall set_ShowState(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall AboutBox();
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);

  __property   long            BorderSize = {read = get_BorderSize, write = set_BorderSize};
  __property   VARIANT_BOOL    ShowState = {read = get_ShowState, write = set_ShowState};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrtXDispT<IMercuryFPrtX> IMercuryFPrtXDisp;

typedef TComInterface<_IMercuryFPrtEventsDirect>  TCOM_IMercuryFPrtEventsDirect;

typedef TComInterface<IMercuryFPrt2>  TCOMIMercuryFPrt2;

// *********************************************************************//
// DispIntf:  IMercuryFPrt2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {081E43FF-4768-4C9A-957F-BF117CFDD15B}
// *********************************************************************//
template<class T>
class IMercuryFPrt2DispT : public TAutoDriver<IMercuryFPrt2>
{
public:
  IMercuryFPrt2DispT(){}

  IMercuryFPrt2DispT(IMercuryFPrt2 *pintf)
  {
    TAutoDriver<IMercuryFPrt2>::Bind(pintf, false);
  }

  IMercuryFPrt2DispT(IMercuryFPrt2Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt2>::Bind(pintf, true);
  }

  IMercuryFPrt2DispT& operator=(IMercuryFPrt2 *pintf)
  {
    TAutoDriver<IMercuryFPrt2>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrt2DispT& operator=(IMercuryFPrt2Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrt2DispT<IMercuryFPrt2> IMercuryFPrt2Disp;

typedef TComInterface<IMercuryFPrt3>  TCOMIMercuryFPrt3;

// *********************************************************************//
// DispIntf:  IMercuryFPrt3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {761CED73-985A-4FCF-95E7-21D03E489305}
// *********************************************************************//
template<class T>
class IMercuryFPrt3DispT : public TAutoDriver<IMercuryFPrt3>
{
public:
  IMercuryFPrt3DispT(){}

  IMercuryFPrt3DispT(IMercuryFPrt3 *pintf)
  {
    TAutoDriver<IMercuryFPrt3>::Bind(pintf, false);
  }

  IMercuryFPrt3DispT(IMercuryFPrt3Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt3>::Bind(pintf, true);
  }

  IMercuryFPrt3DispT& operator=(IMercuryFPrt3 *pintf)
  {
    TAutoDriver<IMercuryFPrt3>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrt3DispT& operator=(IMercuryFPrt3Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt3>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall EKLZActivate();
  HRESULT         __fastcall EKLZActivationReport();
  HRESULT         __fastcall EKLZDayReport(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                             long AEndNum/*[in]*/);
  HRESULT         __fastcall EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                              DATE AEndDate/*[in]*/);
  HRESULT         __fastcall EKLZDocByNum(long Number/*[in]*/);
  HRESULT         __fastcall EKLZControlByNum(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZCloseArchive();
  HRESULT         __fastcall EKLZQueryStatus();
  HRESULT         __fastcall QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryPaperJournal(void);
  HRESULT         __fastcall SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/);
  HRESULT         __fastcall get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZSupported(void);
  HRESULT         __fastcall get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZActivated(void);
  HRESULT         __fastcall get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void);
  HRESULT         __fastcall get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZArchiving(void);
  HRESULT         __fastcall get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZReporting(void);
  HRESULT         __fastcall get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZDayOpened(void);
  HRESULT         __fastcall get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZFatalError(void);
  HRESULT         __fastcall get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZAttention(void);
  HRESULT         __fastcall get_LastRepNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRepNumber(void);
  HRESULT         __fastcall get_EKLZRest(long* Value/*[out,retval]*/);
  long            __fastcall get_EKLZRest(void);
  HRESULT         __fastcall QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryFullJournal(void);
  HRESULT         __fastcall SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/);
  HRESULT         __fastcall AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastBuyingSum(void);
  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);

  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   long            LastRepNumber = {read = get_LastRepNumber};
  __property   long            EKLZRest = {read = get_EKLZRest};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrt3DispT<IMercuryFPrt3> IMercuryFPrt3Disp;

typedef TComInterface<IMercuryFPrtX2>  TCOMIMercuryFPrtX2;

// *********************************************************************//
// DispIntf:  IMercuryFPrtX2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {15273680-3D9A-4D78-9FEC-B92FFCD88441}
// *********************************************************************//
template<class T>
class IMercuryFPrtX2DispT : public TAutoDriver<IMercuryFPrtX2>
{
public:
  IMercuryFPrtX2DispT(){}

  IMercuryFPrtX2DispT(IMercuryFPrtX2 *pintf)
  {
    TAutoDriver<IMercuryFPrtX2>::Bind(pintf, false);
  }

  IMercuryFPrtX2DispT(IMercuryFPrtX2Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX2>::Bind(pintf, true);
  }

  IMercuryFPrtX2DispT& operator=(IMercuryFPrtX2 *pintf)
  {
    TAutoDriver<IMercuryFPrtX2>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrtX2DispT& operator=(IMercuryFPrtX2Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall get_BorderSize(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderSize(void);
  HRESULT         __fastcall set_BorderSize(long Value/*[in]*/);
  HRESULT         __fastcall get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowState(void);
  HRESULT         __fastcall set_ShowState(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall AboutBox();
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   long            BorderSize = {read = get_BorderSize, write = set_BorderSize};
  __property   VARIANT_BOOL    ShowState = {read = get_ShowState, write = set_ShowState};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrtX2DispT<IMercuryFPrtX2> IMercuryFPrtX2Disp;

typedef TComInterface<IMercuryFPrtX3>  TCOMIMercuryFPrtX3;

// *********************************************************************//
// DispIntf:  IMercuryFPrtX3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7F2562A6-46FE-41FD-A75F-85535472969F}
// *********************************************************************//
template<class T>
class IMercuryFPrtX3DispT : public TAutoDriver<IMercuryFPrtX3>
{
public:
  IMercuryFPrtX3DispT(){}

  IMercuryFPrtX3DispT(IMercuryFPrtX3 *pintf)
  {
    TAutoDriver<IMercuryFPrtX3>::Bind(pintf, false);
  }

  IMercuryFPrtX3DispT(IMercuryFPrtX3Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX3>::Bind(pintf, true);
  }

  IMercuryFPrtX3DispT& operator=(IMercuryFPrtX3 *pintf)
  {
    TAutoDriver<IMercuryFPrtX3>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrtX3DispT& operator=(IMercuryFPrtX3Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX3>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall EKLZActivate();
  HRESULT         __fastcall EKLZActivationReport();
  HRESULT         __fastcall EKLZDayReport(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                             long AEndNum/*[in]*/);
  HRESULT         __fastcall EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                              DATE AEndDate/*[in]*/);
  HRESULT         __fastcall EKLZDocByNum(long Number/*[in]*/);
  HRESULT         __fastcall EKLZControlByNum(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZCloseArchive();
  HRESULT         __fastcall EKLZQueryStatus();
  HRESULT         __fastcall QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryPaperJournal(void);
  HRESULT         __fastcall SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/);
  HRESULT         __fastcall get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZSupported(void);
  HRESULT         __fastcall get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZActivated(void);
  HRESULT         __fastcall get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void);
  HRESULT         __fastcall get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZArchiving(void);
  HRESULT         __fastcall get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZReporting(void);
  HRESULT         __fastcall get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZDayOpened(void);
  HRESULT         __fastcall get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZFatalError(void);
  HRESULT         __fastcall get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZAttention(void);
  HRESULT         __fastcall QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryFullJournal(void);
  HRESULT         __fastcall SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/);
  HRESULT         __fastcall AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastBuyingSum(void);
  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall get_BorderSize(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderSize(void);
  HRESULT         __fastcall set_BorderSize(long Value/*[in]*/);
  HRESULT         __fastcall get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowState(void);
  HRESULT         __fastcall set_ShowState(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall AboutBox();
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);

  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   long            BorderSize = {read = get_BorderSize, write = set_BorderSize};
  __property   VARIANT_BOOL    ShowState = {read = get_ShowState, write = set_ShowState};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrtX3DispT<IMercuryFPrtX3> IMercuryFPrtX3Disp;

typedef TComInterface<IMercuryFPrt4>  TCOMIMercuryFPrt4;

// *********************************************************************//
// DispIntf:  IMercuryFPrt4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {01D442F5-56A5-4F04-8C61-FB651172C6F0}
// *********************************************************************//
template<class T>
class IMercuryFPrt4DispT : public TAutoDriver<IMercuryFPrt4>
{
public:
  IMercuryFPrt4DispT(){}

  IMercuryFPrt4DispT(IMercuryFPrt4 *pintf)
  {
    TAutoDriver<IMercuryFPrt4>::Bind(pintf, false);
  }

  IMercuryFPrt4DispT(IMercuryFPrt4Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt4>::Bind(pintf, true);
  }

  IMercuryFPrt4DispT& operator=(IMercuryFPrt4 *pintf)
  {
    TAutoDriver<IMercuryFPrt4>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrt4DispT& operator=(IMercuryFPrt4Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt4>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall EKLZActivate();
  HRESULT         __fastcall EKLZActivationReport();
  HRESULT         __fastcall EKLZDayReport(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                             long AEndNum/*[in]*/);
  HRESULT         __fastcall EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                              DATE AEndDate/*[in]*/);
  HRESULT         __fastcall EKLZDocByNum(long Number/*[in]*/);
  HRESULT         __fastcall EKLZControlByNum(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZCloseArchive();
  HRESULT         __fastcall EKLZQueryStatus();
  HRESULT         __fastcall QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryPaperJournal(void);
  HRESULT         __fastcall SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/);
  HRESULT         __fastcall get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZSupported(void);
  HRESULT         __fastcall get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZActivated(void);
  HRESULT         __fastcall get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void);
  HRESULT         __fastcall get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZArchiving(void);
  HRESULT         __fastcall get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZReporting(void);
  HRESULT         __fastcall get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZDayOpened(void);
  HRESULT         __fastcall get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZFatalError(void);
  HRESULT         __fastcall get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZAttention(void);
  HRESULT         __fastcall get_LastRepNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRepNumber(void);
  HRESULT         __fastcall get_EKLZRest(long* Value/*[out,retval]*/);
  long            __fastcall get_EKLZRest(void);
  HRESULT         __fastcall QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryFullJournal(void);
  HRESULT         __fastcall SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/);
  HRESULT         __fastcall AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastBuyingSum(void);
  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);


  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   long            LastRepNumber = {read = get_LastRepNumber};
  __property   long            EKLZRest = {read = get_EKLZRest};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrt4DispT<IMercuryFPrt4> IMercuryFPrt4Disp;

typedef TComInterface<IMercuryFPrtX4>  TCOMIMercuryFPrtX4;

// *********************************************************************//
// DispIntf:  IMercuryFPrtX4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {38FC4258-EFAC-49CE-8215-B3ED204C5E7A}
// *********************************************************************//
template<class T>
class IMercuryFPrtX4DispT : public TAutoDriver<IMercuryFPrtX4>
{
public:
  IMercuryFPrtX4DispT(){}

  IMercuryFPrtX4DispT(IMercuryFPrtX4 *pintf)
  {
    TAutoDriver<IMercuryFPrtX4>::Bind(pintf, false);
  }

  IMercuryFPrtX4DispT(IMercuryFPrtX4Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX4>::Bind(pintf, true);
  }

  IMercuryFPrtX4DispT& operator=(IMercuryFPrtX4 *pintf)
  {
    TAutoDriver<IMercuryFPrtX4>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrtX4DispT& operator=(IMercuryFPrtX4Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX4>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall EKLZActivate();
  HRESULT         __fastcall EKLZActivationReport();
  HRESULT         __fastcall EKLZDayReport(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                             long AEndNum/*[in]*/);
  HRESULT         __fastcall EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                              DATE AEndDate/*[in]*/);
  HRESULT         __fastcall EKLZDocByNum(long Number/*[in]*/);
  HRESULT         __fastcall EKLZControlByNum(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZCloseArchive();
  HRESULT         __fastcall EKLZQueryStatus();
  HRESULT         __fastcall QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryPaperJournal(void);
  HRESULT         __fastcall SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/);
  HRESULT         __fastcall get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZSupported(void);
  HRESULT         __fastcall get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZActivated(void);
  HRESULT         __fastcall get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void);
  HRESULT         __fastcall get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZArchiving(void);
  HRESULT         __fastcall get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZReporting(void);
  HRESULT         __fastcall get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZDayOpened(void);
  HRESULT         __fastcall get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZFatalError(void);
  HRESULT         __fastcall get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZAttention(void);
  HRESULT         __fastcall QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryFullJournal(void);
  HRESULT         __fastcall SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/);
  HRESULT         __fastcall AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastBuyingSum(void);
  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall get_BorderSize(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderSize(void);
  HRESULT         __fastcall set_BorderSize(long Value/*[in]*/);
  HRESULT         __fastcall get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowState(void);
  HRESULT         __fastcall set_ShowState(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall AboutBox();
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);


  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   long            BorderSize = {read = get_BorderSize, write = set_BorderSize};
  __property   VARIANT_BOOL    ShowState = {read = get_ShowState, write = set_ShowState};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrtX4DispT<IMercuryFPrtX4> IMercuryFPrtX4Disp;

typedef TComInterface<IMercuryFPrt5>  TCOMIMercuryFPrt5;

// *********************************************************************//
// DispIntf:  IMercuryFPrt5
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {66636E2A-5015-4156-9D06-FC6F63194254}
// *********************************************************************//
template<class T>
class IMercuryFPrt5DispT : public TAutoDriver<IMercuryFPrt5>
{
public:
  IMercuryFPrt5DispT(){}

  IMercuryFPrt5DispT(IMercuryFPrt5 *pintf)
  {
    TAutoDriver<IMercuryFPrt5>::Bind(pintf, false);
  }

  IMercuryFPrt5DispT(IMercuryFPrt5Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt5>::Bind(pintf, true);
  }

  IMercuryFPrt5DispT& operator=(IMercuryFPrt5 *pintf)
  {
    TAutoDriver<IMercuryFPrt5>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrt5DispT& operator=(IMercuryFPrt5Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt5>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, 
                                          long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall EKLZActivate();
  HRESULT         __fastcall EKLZActivationReport();
  HRESULT         __fastcall EKLZDayReport(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                             long AEndNum/*[in]*/);
  HRESULT         __fastcall EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                              DATE AEndDate/*[in]*/);
  HRESULT         __fastcall EKLZDocByNum(long Number/*[in]*/);
  HRESULT         __fastcall EKLZControlByNum(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZCloseArchive();
  HRESULT         __fastcall EKLZQueryStatus();
  HRESULT         __fastcall QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryPaperJournal(void);
  HRESULT         __fastcall SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/);
  HRESULT         __fastcall get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZSupported(void);
  HRESULT         __fastcall get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZActivated(void);
  HRESULT         __fastcall get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void);
  HRESULT         __fastcall get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZArchiving(void);
  HRESULT         __fastcall get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZReporting(void);
  HRESULT         __fastcall get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZDayOpened(void);
  HRESULT         __fastcall get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZFatalError(void);
  HRESULT         __fastcall get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZAttention(void);
  HRESULT         __fastcall get_LastRepNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRepNumber(void);
  HRESULT         __fastcall get_EKLZRest(long* Value/*[out,retval]*/);
  long            __fastcall get_EKLZRest(void);
  HRESULT         __fastcall QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryFullJournal(void);
  HRESULT         __fastcall SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/);
  HRESULT         __fastcall AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastBuyingSum(void);
  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);



  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   long            LastRepNumber = {read = get_LastRepNumber};
  __property   long            EKLZRest = {read = get_EKLZRest};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrt5DispT<IMercuryFPrt5> IMercuryFPrt5Disp;

typedef TComInterface<IMercuryFPrtX5>  TCOMIMercuryFPrtX5;

// *********************************************************************//
// DispIntf:  IMercuryFPrtX5
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D3FA84FF-677F-4244-AEFB-E8343EF7C706}
// *********************************************************************//
template<class T>
class IMercuryFPrtX5DispT : public TAutoDriver<IMercuryFPrtX5>
{
public:
  IMercuryFPrtX5DispT(){}

  IMercuryFPrtX5DispT(IMercuryFPrtX5 *pintf)
  {
    TAutoDriver<IMercuryFPrtX5>::Bind(pintf, false);
  }

  IMercuryFPrtX5DispT(IMercuryFPrtX5Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX5>::Bind(pintf, true);
  }

  IMercuryFPrtX5DispT& operator=(IMercuryFPrtX5 *pintf)
  {
    TAutoDriver<IMercuryFPrtX5>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrtX5DispT& operator=(IMercuryFPrtX5Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX5>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, 
                                          long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall EKLZActivate();
  HRESULT         __fastcall EKLZActivationReport();
  HRESULT         __fastcall EKLZDayReport(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                             long AEndNum/*[in]*/);
  HRESULT         __fastcall EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                              DATE AEndDate/*[in]*/);
  HRESULT         __fastcall EKLZDocByNum(long Number/*[in]*/);
  HRESULT         __fastcall EKLZControlByNum(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZCloseArchive();
  HRESULT         __fastcall EKLZQueryStatus();
  HRESULT         __fastcall QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryPaperJournal(void);
  HRESULT         __fastcall SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/);
  HRESULT         __fastcall get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZSupported(void);
  HRESULT         __fastcall get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZActivated(void);
  HRESULT         __fastcall get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void);
  HRESULT         __fastcall get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZArchiving(void);
  HRESULT         __fastcall get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZReporting(void);
  HRESULT         __fastcall get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZDayOpened(void);
  HRESULT         __fastcall get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZFatalError(void);
  HRESULT         __fastcall get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZAttention(void);
  HRESULT         __fastcall QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryFullJournal(void);
  HRESULT         __fastcall SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/);
  HRESULT         __fastcall AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastBuyingSum(void);
  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall get_BorderSize(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderSize(void);
  HRESULT         __fastcall set_BorderSize(long Value/*[in]*/);
  HRESULT         __fastcall get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowState(void);
  HRESULT         __fastcall set_ShowState(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall AboutBox();
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);



  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   long            BorderSize = {read = get_BorderSize, write = set_BorderSize};
  __property   VARIANT_BOOL    ShowState = {read = get_ShowState, write = set_ShowState};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrtX5DispT<IMercuryFPrtX5> IMercuryFPrtX5Disp;

typedef TComInterface<IMercuryFPrt6>  TCOMIMercuryFPrt6;

// *********************************************************************//
// DispIntf:  IMercuryFPrt6
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FDC67547-0246-4854-9F84-C7EE4E93FB9B}
// *********************************************************************//
template<class T>
class IMercuryFPrt6DispT : public TAutoDriver<IMercuryFPrt6>
{
public:
  IMercuryFPrt6DispT(){}

  IMercuryFPrt6DispT(IMercuryFPrt6 *pintf)
  {
    TAutoDriver<IMercuryFPrt6>::Bind(pintf, false);
  }

  IMercuryFPrt6DispT(IMercuryFPrt6Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt6>::Bind(pintf, true);
  }

  IMercuryFPrt6DispT& operator=(IMercuryFPrt6 *pintf)
  {
    TAutoDriver<IMercuryFPrt6>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrt6DispT& operator=(IMercuryFPrt6Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt6>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall QueryParameterBool(long ParamCode/*[in]*/, 
                                                VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryParameterBool(long ParamCode/*[in]*/);
  HRESULT         __fastcall QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall QueryParameterInt(long ParamCode/*[in]*/);
  HRESULT         __fastcall SetParameterBool(long ParamCode/*[in]*/, 
                                              VARIANT_BOOL ParamValue/*[in]*/);
  HRESULT         __fastcall SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/);
  HRESULT         __fastcall WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, 
                                          long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall EKLZActivate();
  HRESULT         __fastcall EKLZActivationReport();
  HRESULT         __fastcall EKLZDayReport(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                             long AEndNum/*[in]*/);
  HRESULT         __fastcall EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                              DATE AEndDate/*[in]*/);
  HRESULT         __fastcall EKLZDocByNum(long Number/*[in]*/);
  HRESULT         __fastcall EKLZControlByNum(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZCloseArchive();
  HRESULT         __fastcall EKLZQueryStatus();
  HRESULT         __fastcall QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryPaperJournal(void);
  HRESULT         __fastcall SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/);
  HRESULT         __fastcall get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZSupported(void);
  HRESULT         __fastcall get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZActivated(void);
  HRESULT         __fastcall get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void);
  HRESULT         __fastcall get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZArchiving(void);
  HRESULT         __fastcall get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZReporting(void);
  HRESULT         __fastcall get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZDayOpened(void);
  HRESULT         __fastcall get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZFatalError(void);
  HRESULT         __fastcall get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZAttention(void);
  HRESULT         __fastcall get_LastRepNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRepNumber(void);
  HRESULT         __fastcall get_EKLZRest(long* Value/*[out,retval]*/);
  long            __fastcall get_EKLZRest(void);
  HRESULT         __fastcall QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryFullJournal(void);
  HRESULT         __fastcall SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/);
  HRESULT         __fastcall AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastBuyingSum(void);
  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);




  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   long            LastRepNumber = {read = get_LastRepNumber};
  __property   long            EKLZRest = {read = get_EKLZRest};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrt6DispT<IMercuryFPrt6> IMercuryFPrt6Disp;

typedef TComInterface<IMercuryFPrtX6>  TCOMIMercuryFPrtX6;

// *********************************************************************//
// DispIntf:  IMercuryFPrtX6
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {44595440-34C5-4FCA-A3BE-154BD980C7BA}
// *********************************************************************//
template<class T>
class IMercuryFPrtX6DispT : public TAutoDriver<IMercuryFPrtX6>
{
public:
  IMercuryFPrtX6DispT(){}

  IMercuryFPrtX6DispT(IMercuryFPrtX6 *pintf)
  {
    TAutoDriver<IMercuryFPrtX6>::Bind(pintf, false);
  }

  IMercuryFPrtX6DispT(IMercuryFPrtX6Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX6>::Bind(pintf, true);
  }

  IMercuryFPrtX6DispT& operator=(IMercuryFPrtX6 *pintf)
  {
    TAutoDriver<IMercuryFPrtX6>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrtX6DispT& operator=(IMercuryFPrtX6Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX6>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall QueryParameterBool(long ParamCode/*[in]*/, 
                                                VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryParameterBool(long ParamCode/*[in]*/);
  HRESULT         __fastcall QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall QueryParameterInt(long ParamCode/*[in]*/);
  HRESULT         __fastcall SetParameterBool(long ParamCode/*[in]*/, 
                                              VARIANT_BOOL ParamValue/*[in]*/);
  HRESULT         __fastcall SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/);
  HRESULT         __fastcall WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, 
                                          long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall EKLZActivate();
  HRESULT         __fastcall EKLZActivationReport();
  HRESULT         __fastcall EKLZDayReport(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                             long AEndNum/*[in]*/);
  HRESULT         __fastcall EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                              DATE AEndDate/*[in]*/);
  HRESULT         __fastcall EKLZDocByNum(long Number/*[in]*/);
  HRESULT         __fastcall EKLZControlByNum(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZCloseArchive();
  HRESULT         __fastcall EKLZQueryStatus();
  HRESULT         __fastcall QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryPaperJournal(void);
  HRESULT         __fastcall SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/);
  HRESULT         __fastcall get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZSupported(void);
  HRESULT         __fastcall get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZActivated(void);
  HRESULT         __fastcall get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void);
  HRESULT         __fastcall get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZArchiving(void);
  HRESULT         __fastcall get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZReporting(void);
  HRESULT         __fastcall get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZDayOpened(void);
  HRESULT         __fastcall get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZFatalError(void);
  HRESULT         __fastcall get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZAttention(void);
  HRESULT         __fastcall QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryFullJournal(void);
  HRESULT         __fastcall SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/);
  HRESULT         __fastcall AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastBuyingSum(void);
  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall get_BorderSize(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderSize(void);
  HRESULT         __fastcall set_BorderSize(long Value/*[in]*/);
  HRESULT         __fastcall get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowState(void);
  HRESULT         __fastcall set_ShowState(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall AboutBox();
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);




  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   long            BorderSize = {read = get_BorderSize, write = set_BorderSize};
  __property   VARIANT_BOOL    ShowState = {read = get_ShowState, write = set_ShowState};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrtX6DispT<IMercuryFPrtX6> IMercuryFPrtX6Disp;

typedef TComInterface<IMercuryFPrt7>  TCOMIMercuryFPrt7;

// *********************************************************************//
// DispIntf:  IMercuryFPrt7
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9549BA81-6015-4DA1-996E-53347CD57ABE}
// *********************************************************************//
template<class T>
class IMercuryFPrt7DispT : public TAutoDriver<IMercuryFPrt7>
{
public:
  IMercuryFPrt7DispT(){}

  IMercuryFPrt7DispT(IMercuryFPrt7 *pintf)
  {
    TAutoDriver<IMercuryFPrt7>::Bind(pintf, false);
  }

  IMercuryFPrt7DispT(IMercuryFPrt7Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt7>::Bind(pintf, true);
  }

  IMercuryFPrt7DispT& operator=(IMercuryFPrt7 *pintf)
  {
    TAutoDriver<IMercuryFPrt7>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrt7DispT& operator=(IMercuryFPrt7Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt7>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall PrintHeader();
  HRESULT         __fastcall QueryParameterBool(long ParamCode/*[in]*/, 
                                                VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryParameterBool(long ParamCode/*[in]*/);
  HRESULT         __fastcall QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall QueryParameterInt(long ParamCode/*[in]*/);
  HRESULT         __fastcall SetParameterBool(long ParamCode/*[in]*/, 
                                              VARIANT_BOOL ParamValue/*[in]*/);
  HRESULT         __fastcall SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/);
  HRESULT         __fastcall WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, 
                                          long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall EKLZActivate();
  HRESULT         __fastcall EKLZActivationReport();
  HRESULT         __fastcall EKLZDayReport(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                             long AEndNum/*[in]*/);
  HRESULT         __fastcall EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                              DATE AEndDate/*[in]*/);
  HRESULT         __fastcall EKLZDocByNum(long Number/*[in]*/);
  HRESULT         __fastcall EKLZControlByNum(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZCloseArchive();
  HRESULT         __fastcall EKLZQueryStatus();
  HRESULT         __fastcall QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryPaperJournal(void);
  HRESULT         __fastcall SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/);
  HRESULT         __fastcall get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZSupported(void);
  HRESULT         __fastcall get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZActivated(void);
  HRESULT         __fastcall get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void);
  HRESULT         __fastcall get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZArchiving(void);
  HRESULT         __fastcall get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZReporting(void);
  HRESULT         __fastcall get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZDayOpened(void);
  HRESULT         __fastcall get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZFatalError(void);
  HRESULT         __fastcall get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZAttention(void);
  HRESULT         __fastcall get_LastRepNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRepNumber(void);
  HRESULT         __fastcall get_EKLZRest(long* Value/*[out,retval]*/);
  long            __fastcall get_EKLZRest(void);
  HRESULT         __fastcall QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryFullJournal(void);
  HRESULT         __fastcall SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/);
  HRESULT         __fastcall AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastBuyingSum(void);
  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);





  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   long            LastRepNumber = {read = get_LastRepNumber};
  __property   long            EKLZRest = {read = get_EKLZRest};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrt7DispT<IMercuryFPrt7> IMercuryFPrt7Disp;

typedef TComInterface<IMercuryFPrtX7>  TCOMIMercuryFPrtX7;

// *********************************************************************//
// DispIntf:  IMercuryFPrtX7
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3D5A10AD-307C-49D4-A59B-70FFEE159CB2}
// *********************************************************************//
template<class T>
class IMercuryFPrtX7DispT : public TAutoDriver<IMercuryFPrtX7>
{
public:
  IMercuryFPrtX7DispT(){}

  IMercuryFPrtX7DispT(IMercuryFPrtX7 *pintf)
  {
    TAutoDriver<IMercuryFPrtX7>::Bind(pintf, false);
  }

  IMercuryFPrtX7DispT(IMercuryFPrtX7Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX7>::Bind(pintf, true);
  }

  IMercuryFPrtX7DispT& operator=(IMercuryFPrtX7 *pintf)
  {
    TAutoDriver<IMercuryFPrtX7>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrtX7DispT& operator=(IMercuryFPrtX7Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX7>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall PrintHeader();
  HRESULT         __fastcall QueryParameterBool(long ParamCode/*[in]*/, 
                                                VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryParameterBool(long ParamCode/*[in]*/);
  HRESULT         __fastcall QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall QueryParameterInt(long ParamCode/*[in]*/);
  HRESULT         __fastcall SetParameterBool(long ParamCode/*[in]*/, 
                                              VARIANT_BOOL ParamValue/*[in]*/);
  HRESULT         __fastcall SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/);
  HRESULT         __fastcall WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, 
                                          long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall EKLZActivate();
  HRESULT         __fastcall EKLZActivationReport();
  HRESULT         __fastcall EKLZDayReport(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                             long AEndNum/*[in]*/);
  HRESULT         __fastcall EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                              DATE AEndDate/*[in]*/);
  HRESULT         __fastcall EKLZDocByNum(long Number/*[in]*/);
  HRESULT         __fastcall EKLZControlByNum(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZCloseArchive();
  HRESULT         __fastcall EKLZQueryStatus();
  HRESULT         __fastcall QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryPaperJournal(void);
  HRESULT         __fastcall SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/);
  HRESULT         __fastcall get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZSupported(void);
  HRESULT         __fastcall get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZActivated(void);
  HRESULT         __fastcall get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void);
  HRESULT         __fastcall get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZArchiving(void);
  HRESULT         __fastcall get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZReporting(void);
  HRESULT         __fastcall get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZDayOpened(void);
  HRESULT         __fastcall get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZFatalError(void);
  HRESULT         __fastcall get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZAttention(void);
  HRESULT         __fastcall QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryFullJournal(void);
  HRESULT         __fastcall SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/);
  HRESULT         __fastcall AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastBuyingSum(void);
  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall get_BorderSize(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderSize(void);
  HRESULT         __fastcall set_BorderSize(long Value/*[in]*/);
  HRESULT         __fastcall get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowState(void);
  HRESULT         __fastcall set_ShowState(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall AboutBox();
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);





  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   long            BorderSize = {read = get_BorderSize, write = set_BorderSize};
  __property   VARIANT_BOOL    ShowState = {read = get_ShowState, write = set_ShowState};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrtX7DispT<IMercuryFPrtX7> IMercuryFPrtX7Disp;

typedef TComInterface<IMercuryFPrt8>  TCOMIMercuryFPrt8;

// *********************************************************************//
// DispIntf:  IMercuryFPrt8
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9397BB3C-769E-47E2-8C0D-028A38B5D48F}
// *********************************************************************//
template<class T>
class IMercuryFPrt8DispT : public TAutoDriver<IMercuryFPrt8>
{
public:
  IMercuryFPrt8DispT(){}

  IMercuryFPrt8DispT(IMercuryFPrt8 *pintf)
  {
    TAutoDriver<IMercuryFPrt8>::Bind(pintf, false);
  }

  IMercuryFPrt8DispT(IMercuryFPrt8Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt8>::Bind(pintf, true);
  }

  IMercuryFPrt8DispT& operator=(IMercuryFPrt8 *pintf)
  {
    TAutoDriver<IMercuryFPrt8>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrt8DispT& operator=(IMercuryFPrt8Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt8>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall SetOperPassword(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                             BSTR OperPassword/*[in]*/);
  HRESULT         __fastcall PrintHeader();
  HRESULT         __fastcall QueryParameterBool(long ParamCode/*[in]*/, 
                                                VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryParameterBool(long ParamCode/*[in]*/);
  HRESULT         __fastcall QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall QueryParameterInt(long ParamCode/*[in]*/);
  HRESULT         __fastcall SetParameterBool(long ParamCode/*[in]*/, 
                                              VARIANT_BOOL ParamValue/*[in]*/);
  HRESULT         __fastcall SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/);
  HRESULT         __fastcall WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, 
                                          long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall EKLZActivate();
  HRESULT         __fastcall EKLZActivationReport();
  HRESULT         __fastcall EKLZDayReport(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                             long AEndNum/*[in]*/);
  HRESULT         __fastcall EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                              DATE AEndDate/*[in]*/);
  HRESULT         __fastcall EKLZDocByNum(long Number/*[in]*/);
  HRESULT         __fastcall EKLZControlByNum(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZCloseArchive();
  HRESULT         __fastcall EKLZQueryStatus();
  HRESULT         __fastcall QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryPaperJournal(void);
  HRESULT         __fastcall SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/);
  HRESULT         __fastcall get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZSupported(void);
  HRESULT         __fastcall get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZActivated(void);
  HRESULT         __fastcall get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void);
  HRESULT         __fastcall get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZArchiving(void);
  HRESULT         __fastcall get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZReporting(void);
  HRESULT         __fastcall get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZDayOpened(void);
  HRESULT         __fastcall get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZFatalError(void);
  HRESULT         __fastcall get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZAttention(void);
  HRESULT         __fastcall get_LastRepNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRepNumber(void);
  HRESULT         __fastcall get_EKLZRest(long* Value/*[out,retval]*/);
  long            __fastcall get_EKLZRest(void);
  HRESULT         __fastcall QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryFullJournal(void);
  HRESULT         __fastcall SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/);
  HRESULT         __fastcall AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastBuyingSum(void);
  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);






  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   long            LastRepNumber = {read = get_LastRepNumber};
  __property   long            EKLZRest = {read = get_EKLZRest};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrt8DispT<IMercuryFPrt8> IMercuryFPrt8Disp;

typedef TComInterface<IMercuryFPrtX8>  TCOMIMercuryFPrtX8;

// *********************************************************************//
// DispIntf:  IMercuryFPrtX8
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {116A8129-4171-4B1D-8A49-6724A8E975DD}
// *********************************************************************//
template<class T>
class IMercuryFPrtX8DispT : public TAutoDriver<IMercuryFPrtX8>
{
public:
  IMercuryFPrtX8DispT(){}

  IMercuryFPrtX8DispT(IMercuryFPrtX8 *pintf)
  {
    TAutoDriver<IMercuryFPrtX8>::Bind(pintf, false);
  }

  IMercuryFPrtX8DispT(IMercuryFPrtX8Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX8>::Bind(pintf, true);
  }

  IMercuryFPrtX8DispT& operator=(IMercuryFPrtX8 *pintf)
  {
    TAutoDriver<IMercuryFPrtX8>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrtX8DispT& operator=(IMercuryFPrtX8Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX8>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall SetOperPassword(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                             BSTR OperPassword/*[in]*/);
  HRESULT         __fastcall PrintHeader();
  HRESULT         __fastcall QueryParameterBool(long ParamCode/*[in]*/, 
                                                VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryParameterBool(long ParamCode/*[in]*/);
  HRESULT         __fastcall QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall QueryParameterInt(long ParamCode/*[in]*/);
  HRESULT         __fastcall SetParameterBool(long ParamCode/*[in]*/, 
                                              VARIANT_BOOL ParamValue/*[in]*/);
  HRESULT         __fastcall SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/);
  HRESULT         __fastcall WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, 
                                          long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall EKLZActivate();
  HRESULT         __fastcall EKLZActivationReport();
  HRESULT         __fastcall EKLZDayReport(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                             long AEndNum/*[in]*/);
  HRESULT         __fastcall EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                              DATE AEndDate/*[in]*/);
  HRESULT         __fastcall EKLZDocByNum(long Number/*[in]*/);
  HRESULT         __fastcall EKLZControlByNum(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZCloseArchive();
  HRESULT         __fastcall EKLZQueryStatus();
  HRESULT         __fastcall QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryPaperJournal(void);
  HRESULT         __fastcall SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/);
  HRESULT         __fastcall get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZSupported(void);
  HRESULT         __fastcall get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZActivated(void);
  HRESULT         __fastcall get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void);
  HRESULT         __fastcall get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZArchiving(void);
  HRESULT         __fastcall get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZReporting(void);
  HRESULT         __fastcall get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZDayOpened(void);
  HRESULT         __fastcall get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZFatalError(void);
  HRESULT         __fastcall get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZAttention(void);
  HRESULT         __fastcall QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryFullJournal(void);
  HRESULT         __fastcall SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/);
  HRESULT         __fastcall AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastBuyingSum(void);
  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall get_BorderSize(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderSize(void);
  HRESULT         __fastcall set_BorderSize(long Value/*[in]*/);
  HRESULT         __fastcall get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowState(void);
  HRESULT         __fastcall set_ShowState(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall AboutBox();
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);






  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   long            BorderSize = {read = get_BorderSize, write = set_BorderSize};
  __property   VARIANT_BOOL    ShowState = {read = get_ShowState, write = set_ShowState};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrtX8DispT<IMercuryFPrtX8> IMercuryFPrtX8Disp;

typedef TComInterface<IMercuryFPrt9>  TCOMIMercuryFPrt9;

// *********************************************************************//
// DispIntf:  IMercuryFPrt9
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B9F07D55-3587-4FFE-BFA8-0F1BFE05554F}
// *********************************************************************//
template<class T>
class IMercuryFPrt9DispT : public TAutoDriver<IMercuryFPrt9>
{
public:
  IMercuryFPrt9DispT(){}

  IMercuryFPrt9DispT(IMercuryFPrt9 *pintf)
  {
    TAutoDriver<IMercuryFPrt9>::Bind(pintf, false);
  }

  IMercuryFPrt9DispT(IMercuryFPrt9Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt9>::Bind(pintf, true);
  }

  IMercuryFPrt9DispT& operator=(IMercuryFPrt9 *pintf)
  {
    TAutoDriver<IMercuryFPrt9>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrt9DispT& operator=(IMercuryFPrt9Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt9>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall PrintEKL(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall PrintEKL(long Flags/*[in]*/);
  HRESULT         __fastcall QueryEKLState(Mercfprtx_tlb::TxMercEKLState* State/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEKLState __fastcall QueryEKLState(void);
  HRESULT         __fastcall SetOperPassword(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                             BSTR OperPassword/*[in]*/);
  HRESULT         __fastcall PrintHeader();
  HRESULT         __fastcall QueryParameterBool(long ParamCode/*[in]*/, 
                                                VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryParameterBool(long ParamCode/*[in]*/);
  HRESULT         __fastcall QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall QueryParameterInt(long ParamCode/*[in]*/);
  HRESULT         __fastcall SetParameterBool(long ParamCode/*[in]*/, 
                                              VARIANT_BOOL ParamValue/*[in]*/);
  HRESULT         __fastcall SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/);
  HRESULT         __fastcall WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, 
                                          long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall EKLZActivate();
  HRESULT         __fastcall EKLZActivationReport();
  HRESULT         __fastcall EKLZDayReport(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                             long AEndNum/*[in]*/);
  HRESULT         __fastcall EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                              DATE AEndDate/*[in]*/);
  HRESULT         __fastcall EKLZDocByNum(long Number/*[in]*/);
  HRESULT         __fastcall EKLZControlByNum(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZCloseArchive();
  HRESULT         __fastcall EKLZQueryStatus();
  HRESULT         __fastcall QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryPaperJournal(void);
  HRESULT         __fastcall SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/);
  HRESULT         __fastcall get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZSupported(void);
  HRESULT         __fastcall get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZActivated(void);
  HRESULT         __fastcall get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void);
  HRESULT         __fastcall get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZArchiving(void);
  HRESULT         __fastcall get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZReporting(void);
  HRESULT         __fastcall get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZDayOpened(void);
  HRESULT         __fastcall get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZFatalError(void);
  HRESULT         __fastcall get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZAttention(void);
  HRESULT         __fastcall get_LastRepNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRepNumber(void);
  HRESULT         __fastcall get_EKLZRest(long* Value/*[out,retval]*/);
  long            __fastcall get_EKLZRest(void);
  HRESULT         __fastcall QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryFullJournal(void);
  HRESULT         __fastcall SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/);
  HRESULT         __fastcall AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastBuyingSum(void);
  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);







  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   long            LastRepNumber = {read = get_LastRepNumber};
  __property   long            EKLZRest = {read = get_EKLZRest};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrt9DispT<IMercuryFPrt9> IMercuryFPrt9Disp;

typedef TComInterface<IMercuryFPrtX9>  TCOMIMercuryFPrtX9;

// *********************************************************************//
// DispIntf:  IMercuryFPrtX9
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {47D80BD0-5B41-4BFE-98AA-9E76BA94F37E}
// *********************************************************************//
template<class T>
class IMercuryFPrtX9DispT : public TAutoDriver<IMercuryFPrtX9>
{
public:
  IMercuryFPrtX9DispT(){}

  IMercuryFPrtX9DispT(IMercuryFPrtX9 *pintf)
  {
    TAutoDriver<IMercuryFPrtX9>::Bind(pintf, false);
  }

  IMercuryFPrtX9DispT(IMercuryFPrtX9Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX9>::Bind(pintf, true);
  }

  IMercuryFPrtX9DispT& operator=(IMercuryFPrtX9 *pintf)
  {
    TAutoDriver<IMercuryFPrtX9>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrtX9DispT& operator=(IMercuryFPrtX9Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX9>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall PrintEKL(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall PrintEKL(long Flags/*[in]*/);
  HRESULT         __fastcall QueryEKLState(Mercfprtx_tlb::TxMercEKLState* State/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEKLState __fastcall QueryEKLState(void);
  HRESULT         __fastcall SetOperPassword(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                             BSTR OperPassword/*[in]*/);
  HRESULT         __fastcall PrintHeader();
  HRESULT         __fastcall QueryParameterBool(long ParamCode/*[in]*/, 
                                                VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryParameterBool(long ParamCode/*[in]*/);
  HRESULT         __fastcall QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall QueryParameterInt(long ParamCode/*[in]*/);
  HRESULT         __fastcall SetParameterBool(long ParamCode/*[in]*/, 
                                              VARIANT_BOOL ParamValue/*[in]*/);
  HRESULT         __fastcall SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/);
  HRESULT         __fastcall WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, 
                                          long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall EKLZActivate();
  HRESULT         __fastcall EKLZActivationReport();
  HRESULT         __fastcall EKLZDayReport(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                             long AEndNum/*[in]*/);
  HRESULT         __fastcall EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                              DATE AEndDate/*[in]*/);
  HRESULT         __fastcall EKLZDocByNum(long Number/*[in]*/);
  HRESULT         __fastcall EKLZControlByNum(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZCloseArchive();
  HRESULT         __fastcall EKLZQueryStatus();
  HRESULT         __fastcall QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryPaperJournal(void);
  HRESULT         __fastcall SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/);
  HRESULT         __fastcall get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZSupported(void);
  HRESULT         __fastcall get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZActivated(void);
  HRESULT         __fastcall get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void);
  HRESULT         __fastcall get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZArchiving(void);
  HRESULT         __fastcall get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZReporting(void);
  HRESULT         __fastcall get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZDayOpened(void);
  HRESULT         __fastcall get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZFatalError(void);
  HRESULT         __fastcall get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZAttention(void);
  HRESULT         __fastcall QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryFullJournal(void);
  HRESULT         __fastcall SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/);
  HRESULT         __fastcall AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastBuyingSum(void);
  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall get_BorderSize(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderSize(void);
  HRESULT         __fastcall set_BorderSize(long Value/*[in]*/);
  HRESULT         __fastcall get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowState(void);
  HRESULT         __fastcall set_ShowState(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall AboutBox();
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);







  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   long            BorderSize = {read = get_BorderSize, write = set_BorderSize};
  __property   VARIANT_BOOL    ShowState = {read = get_ShowState, write = set_ShowState};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrtX9DispT<IMercuryFPrtX9> IMercuryFPrtX9Disp;

// *********************************************************************//
// SmartIntf: TCOMIMercuryFPrt10
// Interface: IMercuryFPrt10
// *********************************************************************//
template <class T /* IMercuryFPrt10 */ >
class TCOMIMercuryFPrt10T : public TComInterface<IMercuryFPrt10>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMercuryFPrt10T() {}
  TCOMIMercuryFPrt10T(IMercuryFPrt10 *intf, bool addRef = false) : TComInterface<IMercuryFPrt10>(intf, addRef) {}
  TCOMIMercuryFPrt10T(const TCOMIMercuryFPrt10T& src) : TComInterface<IMercuryFPrt10>(src) {}
  TCOMIMercuryFPrt10T& operator=(const TCOMIMercuryFPrt10T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall ReprintDocument(void);

};
typedef TCOMIMercuryFPrt10T<IMercuryFPrt10> TCOMIMercuryFPrt10;

// *********************************************************************//
// DispIntf:  IMercuryFPrt10
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C389388E-BCC0-4580-8673-47193431C2C3}
// *********************************************************************//
template<class T>
class IMercuryFPrt10DispT : public TAutoDriver<IMercuryFPrt10>
{
public:
  IMercuryFPrt10DispT(){}

  IMercuryFPrt10DispT(IMercuryFPrt10 *pintf)
  {
    TAutoDriver<IMercuryFPrt10>::Bind(pintf, false);
  }

  IMercuryFPrt10DispT(IMercuryFPrt10Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt10>::Bind(pintf, true);
  }

  IMercuryFPrt10DispT& operator=(IMercuryFPrt10 *pintf)
  {
    TAutoDriver<IMercuryFPrt10>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrt10DispT& operator=(IMercuryFPrt10Ptr pintf)
  {
    TAutoDriver<IMercuryFPrt10>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MercuryFPrtCOM));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MercuryFPrtCOM);
  }

  HRESULT         __fastcall ReprintDocument();
  HRESULT         __fastcall PrintEKL(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall PrintEKL(long Flags/*[in]*/);
  HRESULT         __fastcall QueryEKLState(Mercfprtx_tlb::TxMercEKLState* State/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEKLState __fastcall QueryEKLState(void);
  HRESULT         __fastcall SetOperPassword(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                             BSTR OperPassword/*[in]*/);
  HRESULT         __fastcall PrintHeader();
  HRESULT         __fastcall QueryParameterBool(long ParamCode/*[in]*/, 
                                                VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryParameterBool(long ParamCode/*[in]*/);
  HRESULT         __fastcall QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall QueryParameterInt(long ParamCode/*[in]*/);
  HRESULT         __fastcall SetParameterBool(long ParamCode/*[in]*/, 
                                              VARIANT_BOOL ParamValue/*[in]*/);
  HRESULT         __fastcall SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/);
  HRESULT         __fastcall WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, 
                                          long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall EKLZActivate();
  HRESULT         __fastcall EKLZActivationReport();
  HRESULT         __fastcall EKLZDayReport(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                             long AEndNum/*[in]*/);
  HRESULT         __fastcall EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                              DATE AEndDate/*[in]*/);
  HRESULT         __fastcall EKLZDocByNum(long Number/*[in]*/);
  HRESULT         __fastcall EKLZControlByNum(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZCloseArchive();
  HRESULT         __fastcall EKLZQueryStatus();
  HRESULT         __fastcall QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryPaperJournal(void);
  HRESULT         __fastcall SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/);
  HRESULT         __fastcall get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZSupported(void);
  HRESULT         __fastcall get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZActivated(void);
  HRESULT         __fastcall get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void);
  HRESULT         __fastcall get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZArchiving(void);
  HRESULT         __fastcall get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZReporting(void);
  HRESULT         __fastcall get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZDayOpened(void);
  HRESULT         __fastcall get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZFatalError(void);
  HRESULT         __fastcall get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZAttention(void);
  HRESULT         __fastcall get_LastRepNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRepNumber(void);
  HRESULT         __fastcall get_EKLZRest(long* Value/*[out,retval]*/);
  long            __fastcall get_EKLZRest(void);
  HRESULT         __fastcall QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryFullJournal(void);
  HRESULT         __fastcall SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/);
  HRESULT         __fastcall AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastBuyingSum(void);
  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);








  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   long            LastRepNumber = {read = get_LastRepNumber};
  __property   long            EKLZRest = {read = get_EKLZRest};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrt10DispT<IMercuryFPrt10> IMercuryFPrt10Disp;

// *********************************************************************//
// SmartIntf: TCOMIMercuryFPrtX10
// Interface: IMercuryFPrtX10
// *********************************************************************//
template <class T /* IMercuryFPrtX10 */ >
class TCOMIMercuryFPrtX10T : public TComInterface<IMercuryFPrtX10>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMercuryFPrtX10T() {}
  TCOMIMercuryFPrtX10T(IMercuryFPrtX10 *intf, bool addRef = false) : TComInterface<IMercuryFPrtX10>(intf, addRef) {}
  TCOMIMercuryFPrtX10T(const TCOMIMercuryFPrtX10T& src) : TComInterface<IMercuryFPrtX10>(src) {}
  TCOMIMercuryFPrtX10T& operator=(const TCOMIMercuryFPrtX10T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall ReprintDocument(void);

};
typedef TCOMIMercuryFPrtX10T<IMercuryFPrtX10> TCOMIMercuryFPrtX10;

// *********************************************************************//
// DispIntf:  IMercuryFPrtX10
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10ECF5F7-72AB-4B70-8BB9-4297AC4B8EC3}
// *********************************************************************//
template<class T>
class IMercuryFPrtX10DispT : public TAutoDriver<IMercuryFPrtX10>
{
public:
  IMercuryFPrtX10DispT(){}

  IMercuryFPrtX10DispT(IMercuryFPrtX10 *pintf)
  {
    TAutoDriver<IMercuryFPrtX10>::Bind(pintf, false);
  }

  IMercuryFPrtX10DispT(IMercuryFPrtX10Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX10>::Bind(pintf, true);
  }

  IMercuryFPrtX10DispT& operator=(IMercuryFPrtX10 *pintf)
  {
    TAutoDriver<IMercuryFPrtX10>::Bind(pintf, false);
    return *this;
  }

  IMercuryFPrtX10DispT& operator=(IMercuryFPrtX10Ptr pintf)
  {
    TAutoDriver<IMercuryFPrtX10>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MercuryFPrtX));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MercuryFPrtX);
  }

  HRESULT         __fastcall ReprintDocument();
  HRESULT         __fastcall PrintEKL(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall PrintEKL(long Flags/*[in]*/);
  HRESULT         __fastcall QueryEKLState(Mercfprtx_tlb::TxMercEKLState* State/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEKLState __fastcall QueryEKLState(void);
  HRESULT         __fastcall SetOperPassword(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                             BSTR OperPassword/*[in]*/);
  HRESULT         __fastcall PrintHeader();
  HRESULT         __fastcall QueryParameterBool(long ParamCode/*[in]*/, 
                                                VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryParameterBool(long ParamCode/*[in]*/);
  HRESULT         __fastcall QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall QueryParameterInt(long ParamCode/*[in]*/);
  HRESULT         __fastcall SetParameterBool(long ParamCode/*[in]*/, 
                                              VARIANT_BOOL ParamValue/*[in]*/);
  HRESULT         __fastcall SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/);
  HRESULT         __fastcall WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, 
                                          long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall EKLZActivate();
  HRESULT         __fastcall EKLZActivationReport();
  HRESULT         __fastcall EKLZDayReport(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                             long AEndNum/*[in]*/);
  HRESULT         __fastcall EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                              DATE AEndDate/*[in]*/);
  HRESULT         __fastcall EKLZDocByNum(long Number/*[in]*/);
  HRESULT         __fastcall EKLZControlByNum(long DayNumber/*[in]*/);
  HRESULT         __fastcall EKLZCloseArchive();
  HRESULT         __fastcall EKLZQueryStatus();
  HRESULT         __fastcall QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryPaperJournal(void);
  HRESULT         __fastcall SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/);
  HRESULT         __fastcall get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZSupported(void);
  HRESULT         __fastcall get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZActivated(void);
  HRESULT         __fastcall get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_EKLZOper(void);
  HRESULT         __fastcall get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZArchiving(void);
  HRESULT         __fastcall get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZReporting(void);
  HRESULT         __fastcall get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZDayOpened(void);
  HRESULT         __fastcall get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZFatalError(void);
  HRESULT         __fastcall get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EKLZAttention(void);
  HRESULT         __fastcall QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryFullJournal(void);
  HRESULT         __fastcall SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/);
  HRESULT         __fastcall AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastBuyingSum(void);
  HRESULT         __fastcall QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryAutocut(void);
  HRESULT         __fastcall SetAutocut(VARIANT_BOOL Autocut/*[in]*/);
  HRESULT         __fastcall QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryEconomicMode(void);
  HRESULT         __fastcall SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/);
  HRESULT         __fastcall get_EcrSubVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrSubVersion(void);
  HRESULT         __fastcall get_BorderSize(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderSize(void);
  HRESULT         __fastcall set_BorderSize(long Value/*[in]*/);
  HRESULT         __fastcall get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowState(void);
  HRESULT         __fastcall set_ShowState(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall AboutBox();
  HRESULT         __fastcall Open();
  HRESULT         __fastcall Close(VARIANT_BOOL ForceAbort/*[in]*/);
  HRESULT         __fastcall OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                            VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/
                                            , long Code/*[in]*/, long Adjustment/*[in]*/, 
                                            long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                            long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                            long Flags/*[in]*/);
  HRESULT         __fastcall CancelReceipt();
  HRESULT         __fastcall CloseReceipt(BSTR Account/*[in]*/, 
                                          Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                          CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                          BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                          Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/);
  HRESULT         __fastcall OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                           Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelCustomDoc();
  HRESULT         __fastcall CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                            long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                            long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                            long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                            long FiscalCopy/*[in]*/);
  HRESULT         __fastcall OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/);
  HRESULT         __fastcall CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/);
  HRESULT         __fastcall PrintFiscalDocBuffer();
  HRESULT         __fastcall CloseFiscalDoc();
  HRESULT         __fastcall CopyFiscalDoc();
  HRESULT         __fastcall AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/);
  HRESULT         __fastcall AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                           long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/);
  HRESULT         __fastcall AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/);
  HRESULT         __fastcall AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                               long VOffset/*[in]*/);
  HRESULT         __fastcall AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                     CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                     long Department/*[in]*/, long Code/*[in]*/, 
                                     long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                                     long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                                     BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                              long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                             long Flags/*[in]*/, long HOffset/*[in]*/, 
                                             long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/);
  HRESULT         __fastcall AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/);
  HRESULT         __fastcall AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/);
  HRESULT         __fastcall AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/);
  HRESULT         __fastcall AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                        long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                        VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                        long HOffset/*[in]*/, long VOffset/*[in]*/);
  HRESULT         __fastcall AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/);
  HRESULT         __fastcall RepeatOperation();
  HRESULT         __fastcall OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                     VARIANT_BOOL FullJournal/*[in]*/, 
                                     Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/);
  HRESULT         __fastcall ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall ZReport(long Flags/*[in]*/);
  HRESULT         __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                           long* RewriteNum/*[out,retval]*/);
  long            __fastcall FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                           BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/);
  HRESULT         __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/
                                               , long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                               long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                               long AStartNum/*[in]*/, long AEndNum/*[in]*/);
  HRESULT         __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                                long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportByDate(BSTR InspPswd/*[in]*/, 
                                                VARIANT_BOOL PrintFull/*[in]*/, 
                                                DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/);
  HRESULT         __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/);
  long            __fastcall FiscalReportAll(BSTR InspPswd/*[in]*/);
  HRESULT         __fastcall FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/);
  HRESULT         __fastcall PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                            VARIANT_BOOL CloseDoc/*[in]*/);
  HRESULT         __fastcall ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                         VARIANT_BOOL CloseMode/*[in]*/);
  HRESULT         __fastcall SetDisplayBaudRate(long BaudRate/*[in]*/);
  HRESULT         __fastcall ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                           long TimeOff/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall QueryDevExStatus();
  HRESULT         __fastcall QueryFirmwareInfo();
  HRESULT         __fastcall SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                       BSTR Line4/*[in]*/);
  HRESULT         __fastcall SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/);
  HRESULT         __fastcall QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/);
  long            __fastcall QueryTax(long Index/*[in]*/);
  HRESULT         __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                          CURRENCY* ASum/*[out,retval]*/);
  CURRENCY        __fastcall QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/);
  HRESULT         __fastcall SynchronizeEcrDateTime();
  HRESULT         __fastcall QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/);
  HRESULT         __fastcall QueryLastDocInfo();
  HRESULT         __fastcall SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                           long PrnTimeout/*[in]*/);
  HRESULT         __fastcall get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercEcrModel __fastcall get_EcrModel(void);
  HRESULT         __fastcall get_EcrVersion(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrVersion(void);
  HRESULT         __fastcall get_Generation(long* Value/*[out,retval]*/);
  long            __fastcall get_Generation(void);
  HRESULT         __fastcall get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercProtocol __fastcall get_Protocol(void);
  HRESULT         __fastcall get_EcrStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatus(void);
  HRESULT         __fastcall get_EcrStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrStatusMask(void);
  HRESULT         __fastcall get_DevStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatus(void);
  HRESULT         __fastcall get_DevStatusMask(long* Value/*[out,retval]*/);
  long            __fastcall get_DevStatusMask(void);
  HRESULT         __fastcall get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercDocStatus __fastcall get_DocStatus(void);
  HRESULT         __fastcall get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_CurrentOper(void);
  HRESULT         __fastcall get_PortNum(long* Value/*[out,retval]*/);
  long            __fastcall get_PortNum(void);
  HRESULT         __fastcall set_PortNum(long Value/*[in]*/);
  HRESULT         __fastcall get_BaudRate(long* Value/*[out,retval]*/);
  long            __fastcall get_BaudRate(void);
  HRESULT         __fastcall set_BaudRate(long Value/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_InternalTimeout(void);
  HRESULT         __fastcall set_InternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall get_ExternalTimeout(long* Value/*[out,retval]*/);
  long            __fastcall get_ExternalTimeout(void);
  HRESULT         __fastcall set_ExternalTimeout(long Value/*[in]*/);
  HRESULT         __fastcall QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryHeaderLine(long LineNum/*[in]*/);
  HRESULT         __fastcall QuerySerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QuerySerialNumber(void);
  HRESULT         __fastcall SetSerialNumber(BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTaxPayerNumber(void);
  HRESULT         __fastcall QueryRegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryRegNumber(void);
  HRESULT         __fastcall QueryEcrDateTime(DATE* Value/*[out,retval]*/);
  DATE            __fastcall QueryEcrDateTime(void);
  HRESULT         __fastcall QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryDepartName(long DepartNum/*[in]*/);
  HRESULT         __fastcall SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryTitle(long TitleNum/*[in]*/);
  HRESULT         __fastcall SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercConnState __fastcall get_ConnState(void);
  HRESULT         __fastcall get_SaleSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_SaleSum(void);
  HRESULT         __fastcall get_BuyingSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_BuyingSum(void);
  HRESULT         __fastcall get_SerialNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_SerialNumber(void);
  HRESULT         __fastcall get_RegNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RegNumber(void);
  HRESULT         __fastcall get_TaxPayerNumber(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxPayerNumber(void);
  HRESULT         __fastcall get_HeaderLine1(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine1(void);
  HRESULT         __fastcall get_HeaderLine2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine2(void);
  HRESULT         __fastcall get_HeaderLine3(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine3(void);
  HRESULT         __fastcall get_HeaderLine4(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HeaderLine4(void);
  HRESULT         __fastcall get_StartDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_StartDate(void);
  HRESULT         __fastcall get_EndDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_EndDate(void);
  HRESULT         __fastcall get_StartNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_StartNumber(void);
  HRESULT         __fastcall get_EndNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_EndNumber(void);
  HRESULT         __fastcall get_ReportDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_ReportDate(void);
  HRESULT         __fastcall get_ModelName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ModelName(void);
  HRESULT         __fastcall get_Manufacturer(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Manufacturer(void);
  HRESULT         __fastcall get_FirmwareVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FirmwareVersion(void);
  HRESULT         __fastcall get_TaxName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TaxName(void);
  HRESULT         __fastcall get_TaxDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_TaxDate(void);
  HRESULT         __fastcall get_CounterCount(long* Value/*[out,retval]*/);
  long            __fastcall get_CounterCount(void);
  HRESULT         __fastcall get_RewritesRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_RewritesRemain(void);
  HRESULT         __fastcall get_DaysRemain(long* Value/*[out,retval]*/);
  long            __fastcall get_DaysRemain(void);
  HRESULT         __fastcall get_LastFiscalReport(long* Value/*[out,retval]*/);
  long            __fastcall get_LastFiscalReport(void);
  HRESULT         __fastcall get_LastDayClosing(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDayClosing(void);
  HRESULT         __fastcall get_DayDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_DayDate(void);
  HRESULT         __fastcall get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocOper(void);
  HRESULT         __fastcall get_LastDocNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocNumber(void);
  HRESULT         __fastcall get_LastRecNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_LastRecNumber(void);
  HRESULT         __fastcall get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/);
  Mercfprtx_tlb::TxMercOperType __fastcall get_LastDocType(void);
  HRESULT         __fastcall get_LastDocSum(CURRENCY* Value/*[out,retval]*/);
  CURRENCY        __fastcall get_LastDocSum(void);
  HRESULT         __fastcall get_LastDocDate(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_LastDocDate(void);
  HRESULT         __fastcall get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RetryOperation(void);
  HRESULT         __fastcall set_RetryOperation(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ErrCode(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCode(void);
  HRESULT         __fastcall get_ErrCodeEx(long* Value/*[out,retval]*/);
  long            __fastcall get_ErrCodeEx(void);
  HRESULT         __fastcall get_ErrMessage(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrMessage(void);
  HRESULT         __fastcall CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckEcrStatus(long Flag/*[in]*/);
  HRESULT         __fastcall CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall CheckDevStatus(long Flag/*[in]*/);
  HRESULT         __fastcall get_EcrHour(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrHour(void);
  HRESULT         __fastcall get_EcrMin(long* Value/*[out,retval]*/);
  long            __fastcall get_EcrMin(void);
  HRESULT         __fastcall get_ReportHour(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportHour(void);
  HRESULT         __fastcall get_ReportMin(long* Value/*[out,retval]*/);
  long            __fastcall get_ReportMin(void);
  HRESULT         __fastcall get_DayHour(long* Value/*[out,retval]*/);
  long            __fastcall get_DayHour(void);
  HRESULT         __fastcall get_DayMin(long* Value/*[out,retval]*/);
  long            __fastcall get_DayMin(void);
  HRESULT         __fastcall get_LastDocHour(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocHour(void);
  HRESULT         __fastcall get_LastDocMin(long* Value/*[out,retval]*/);
  long            __fastcall get_LastDocMin(void);
  HRESULT         __fastcall AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                              long VOffset/*[in]*/);
  HRESULT         __fastcall SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/);
  HRESULT         __fastcall SetPrinterTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetDisplayTimeout(long Timeout/*[in]*/);
  HRESULT         __fastcall SetPrinterContrast(long Contrast/*[in]*/);
  HRESULT         __fastcall SetLeading(long Leading/*[in]*/);
  HRESULT         __fastcall SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/);
  HRESULT         __fastcall SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/);
  HRESULT         __fastcall QueryPrinterTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterTimeout(void);
  HRESULT         __fastcall QueryDisplayTimeout(long* Value/*[out,retval]*/);
  long            __fastcall QueryDisplayTimeout(void);
  HRESULT         __fastcall QueryPrinterContrast(long* Value/*[out,retval]*/);
  long            __fastcall QueryPrinterContrast(void);
  HRESULT         __fastcall QueryLeading(long* Value/*[out,retval]*/);
  long            __fastcall QueryLeading(void);
  HRESULT         __fastcall EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR Data/*[in]*/);
  HRESULT         __fastcall DisableGraphicHeader();
  HRESULT         __fastcall AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                        BSTR Licence/*[in]*/);
  HRESULT         __fastcall XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/);
  long            __fastcall XReport(long Flags/*[in]*/);
  HRESULT         __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                          long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                           long* ReportNum/*[out,retval]*/);
  long            __fastcall XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall QueryHeaderAlignment(void);
  HRESULT         __fastcall QueryOperNumber(long* Value/*[out,retval]*/);
  long            __fastcall QueryOperNumber(void);
  HRESULT         __fastcall QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall QueryOperName(long OperNum/*[in]*/);
  HRESULT         __fastcall SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/);
  HRESULT         __fastcall TestConnection();
  HRESULT         __fastcall get_VersionNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_VersionNumber(void);
  HRESULT         __fastcall get_BuildNumber(long* Value/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Version(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall set_Version(BSTR Value/*[in]*/);








  __property   VARIANT_BOOL    EKLZSupported = {read = get_EKLZSupported};
  __property   VARIANT_BOOL    EKLZActivated = {read = get_EKLZActivated};
  __property   Mercfprtx_tlb::TxMercOperType EKLZOper = {read = get_EKLZOper};
  __property   VARIANT_BOOL    EKLZArchiving = {read = get_EKLZArchiving};
  __property   VARIANT_BOOL    EKLZReporting = {read = get_EKLZReporting};
  __property   VARIANT_BOOL    EKLZDayOpened = {read = get_EKLZDayOpened};
  __property   VARIANT_BOOL    EKLZFatalError = {read = get_EKLZFatalError};
  __property   VARIANT_BOOL    EKLZAttention = {read = get_EKLZAttention};
  __property   CURRENCY        LastBuyingSum = {read = get_LastBuyingSum};

  __property   long            EcrSubVersion = {read = get_EcrSubVersion};

  __property   long            BorderSize = {read = get_BorderSize, write = set_BorderSize};
  __property   VARIANT_BOOL    ShowState = {read = get_ShowState, write = set_ShowState};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};

  __property   Mercfprtx_tlb::TxMercEcrModel EcrModel = {read = get_EcrModel};
  __property   long            EcrVersion = {read = get_EcrVersion};
  __property   long            Generation = {read = get_Generation};
  __property   Mercfprtx_tlb::TxMercProtocol Protocol = {read = get_Protocol};
  __property   long            EcrStatus = {read = get_EcrStatus};
  __property   long            EcrStatusMask = {read = get_EcrStatusMask};
  __property   long            DevStatus = {read = get_DevStatus};
  __property   long            DevStatusMask = {read = get_DevStatusMask};
  __property   Mercfprtx_tlb::TxMercDocStatus DocStatus = {read = get_DocStatus};
  __property   Mercfprtx_tlb::TxMercOperType CurrentOper = {read = get_CurrentOper};
  __property   long            PortNum = {read = get_PortNum, write = set_PortNum};
  __property   long            BaudRate = {read = get_BaudRate, write = set_BaudRate};
  __property   BSTR            Password = {read = get_Password, write = set_Password};
  __property   long            InternalTimeout = {read = get_InternalTimeout, write = set_InternalTimeout};
  __property   long            ExternalTimeout = {read = get_ExternalTimeout, write = set_ExternalTimeout};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   Mercfprtx_tlb::TxMercConnState ConnState = {read = get_ConnState};
  __property   CURRENCY        SaleSum = {read = get_SaleSum};
  __property   CURRENCY        BuyingSum = {read = get_BuyingSum};
  __property   BSTR            SerialNumber = {read = get_SerialNumber};
  __property   BSTR            RegNumber = {read = get_RegNumber};
  __property   BSTR            TaxPayerNumber = {read = get_TaxPayerNumber};
  __property   BSTR            HeaderLine1 = {read = get_HeaderLine1};
  __property   BSTR            HeaderLine2 = {read = get_HeaderLine2};
  __property   BSTR            HeaderLine3 = {read = get_HeaderLine3};
  __property   BSTR            HeaderLine4 = {read = get_HeaderLine4};
  __property   DATE            StartDate = {read = get_StartDate};
  __property   DATE            EndDate = {read = get_EndDate};
  __property   long            StartNumber = {read = get_StartNumber};
  __property   long            EndNumber = {read = get_EndNumber};
  __property   DATE            ReportDate = {read = get_ReportDate};
  __property   BSTR            ModelName = {read = get_ModelName};
  __property   BSTR            Manufacturer = {read = get_Manufacturer};
  __property   BSTR            FirmwareVersion = {read = get_FirmwareVersion};
  __property   BSTR            TaxName = {read = get_TaxName};
  __property   DATE            TaxDate = {read = get_TaxDate};
  __property   long            CounterCount = {read = get_CounterCount};
  __property   long            RewritesRemain = {read = get_RewritesRemain};
  __property   long            DaysRemain = {read = get_DaysRemain};
  __property   long            LastFiscalReport = {read = get_LastFiscalReport};
  __property   long            LastDayClosing = {read = get_LastDayClosing};
  __property   DATE            DayDate = {read = get_DayDate};
  __property   Mercfprtx_tlb::TxMercOperType LastDocOper = {read = get_LastDocOper};
  __property   long            LastDocNumber = {read = get_LastDocNumber};
  __property   long            LastRecNumber = {read = get_LastRecNumber};
  __property   Mercfprtx_tlb::TxMercOperType LastDocType = {read = get_LastDocType};
  __property   CURRENCY        LastDocSum = {read = get_LastDocSum};
  __property   DATE            LastDocDate = {read = get_LastDocDate};
  __property   VARIANT_BOOL    RetryOperation = {read = get_RetryOperation, write = set_RetryOperation};
  __property   long            ErrCode = {read = get_ErrCode};
  __property   long            ErrCodeEx = {read = get_ErrCodeEx};
  __property   BSTR            ErrMessage = {read = get_ErrMessage};
  __property   long            EcrHour = {read = get_EcrHour};
  __property   long            EcrMin = {read = get_EcrMin};
  __property   long            ReportHour = {read = get_ReportHour};
  __property   long            ReportMin = {read = get_ReportMin};
  __property   long            DayHour = {read = get_DayHour};
  __property   long            DayMin = {read = get_DayMin};
  __property   long            LastDocHour = {read = get_LastDocHour};
  __property   long            LastDocMin = {read = get_LastDocMin};
  __property   long            VersionNumber = {read = get_VersionNumber};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            Version = {read = get_Version, write = set_Version};
};
typedef IMercuryFPrtX10DispT<IMercuryFPrtX10> IMercuryFPrtX10Disp;

// *********************************************************************//
// DispIntf:  IMercuryFPrt
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {525FE0EA-4EA5-45DD-AB9E-EB75ADAF2557}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                     VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                     long Code/*[in]*/, long Adjustment/*[in]*/, 
                                     long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                     long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                     long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                   Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                   CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                   BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                   Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                    Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                     long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                     long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                     long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                     long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, long Flags/*[in]*/
                                  , long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, CURRENCY Price/*[in]*/
                              , VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                              long Code/*[in]*/, long Adjustment/*[in]*/, long Quantity/*[in]*/, 
                              long QuantityPrec/*[in]*/, long TaxIndex/*[in]*/, 
                              BSTR UnitName/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                              long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, long Flags/*[in]*/
                                       , long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                       long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                      long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/
                                      , long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                               long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, CURRENCY PayCash/*[in]*/
                             , CURRENCY PayCashless/*[in]*/, BSTR PayInfo/*[in]*/, 
                             long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                             long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                 long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                 VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                 long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                              VARIANT_BOOL FullJournal/*[in]*/, 
                              Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                    BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                    long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                    BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                        long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                        long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                        long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                         long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                     VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                  VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, long TimeOff/*[in]*/
                                    , long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                   CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtDispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                    long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrtDispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrtDispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrtDispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtDispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtDispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtDispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrtDispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtDispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtDispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtDispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtDispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtDispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtDispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtDispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtDispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtDispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtDispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtDispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtDispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                 BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                   long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                    long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtDispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtDispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtDispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtDispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrtEvents
// Flags:     (4096) Dispatchable
// GUID:      {2E1B3242-7861-424F-B925-E230D966DDAE}
// *********************************************************************//
template <class T> void __fastcall
IMercuryFPrtEventsDispT<T>::OnNoResponse()
{
  _TDispID _dispid(/* OnNoResponse */ DISPID(201));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IMercuryFPrtEventsDispT<T>::OnStatusUpdate()
{
  _TDispID _dispid(/* OnStatusUpdate */ DISPID(204));
  OleProcedure(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtEventsDispT<T>::OnConnStateUpdate()
{
  _TDispID _dispid(/* OnConnStateUpdate */ DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtEventsDispT<T>::OnPrinterError()
{
  _TDispID _dispid(/* OnPrinterError */ DISPID(202));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtEventsDispT<T>::OnDisplayError()
{
  _TDispID _dispid(/* OnDisplayError */ DISPID(203));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrtX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6976823E-B5E5-4748-BD90-6516D22B694E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_BorderSize(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_BorderSize(void)
{
  long Value;
  this->get_BorderSize((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::set_BorderSize(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtXDispT<T>::get_ShowState(void)
{
  VARIANT_BOOL Value;
  this->get_ShowState((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::set_ShowState(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtXDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                      VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                      long Code/*[in]*/, long Adjustment/*[in]*/, 
                                      long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                      long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                      long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                    Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                    Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                      long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                      long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                      long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                      long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                   long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                               CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                               long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/, 
                               long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                               long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                               long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                       long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, CURRENCY PayCash/*[in]*/
                              , CURRENCY PayCashless/*[in]*/, BSTR PayInfo/*[in]*/, 
                              long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                              long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                  long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                  VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                  long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                               VARIANT_BOOL FullJournal/*[in]*/, 
                               Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                     long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                         long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                      VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                   VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, long TimeOff/*[in]*/
                                     , long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                 BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                    CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtXDispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                     long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrtXDispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrtXDispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrtXDispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtXDispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtXDispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtXDispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrtXDispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtXDispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtXDispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtXDispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtXDispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtXDispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtXDispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtXDispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtXDispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtXDispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtXDispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtXDispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtXDispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                           BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                  BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                    long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtXDispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtXDispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtXDispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtXDispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrt2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {081E43FF-4768-4C9A-957F-BF117CFDD15B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt2DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt2DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                      VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                      long Code/*[in]*/, long Adjustment/*[in]*/, 
                                      long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                      long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                      long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                    Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                    Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                      long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                      long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                      long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                      long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                   long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                               CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                               long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/, 
                               long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                               long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                               long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                       long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, CURRENCY PayCash/*[in]*/
                              , CURRENCY PayCashless/*[in]*/, BSTR PayInfo/*[in]*/, 
                              long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                              long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                  long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                  VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                  long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                               VARIANT_BOOL FullJournal/*[in]*/, 
                               Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                     long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                         long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                      VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                   VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, long TimeOff/*[in]*/
                                     , long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                 BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                    CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt2DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                     long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrt2DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrt2DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrt2DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt2DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt2DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt2DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrt2DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt2DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt2DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt2DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt2DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt2DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt2DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt2DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt2DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt2DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt2DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt2DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt2DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                           BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                  BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                    long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt2DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt2DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt2DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt2DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrt3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {761CED73-985A-4FCF-95E7-21D03E489305}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::EKLZActivate()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivate"), DISPID(401));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::EKLZActivationReport()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivationReport"), DISPID(402));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::EKLZDayReport(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayReport"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                       long AEndNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByNum"), DISPID(404));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartNum /*[VT_I4:0]*/;
  _args[3] = AEndNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                        DATE AEndDate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByDate"), DISPID(405));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartDate /*[VT_DATE:0]*/;
  _args[3] = AEndDate /*[VT_DATE:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::EKLZDocByNum(long Number/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDocByNum"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::EKLZControlByNum(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZControlByNum"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::EKLZCloseArchive()
{
  _TDispID _dispid(*this, OLETEXT("EKLZCloseArchive"), DISPID(408));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::EKLZQueryStatus()
{
  _TDispID _dispid(*this, OLETEXT("EKLZQueryStatus"), DISPID(409));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPaperJournal"), DISPID(410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt3DispT<T>::QueryPaperJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryPaperJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPaperJournal"), DISPID(411));
  TAutoArgs<1> _args;
  _args[1] = PaperJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZSupported"), DISPID(412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt3DispT<T>::get_EKLZSupported(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZSupported((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivated"), DISPID(413));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt3DispT<T>::get_EKLZActivated(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZActivated((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZOper"), DISPID(414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt3DispT<T>::get_EKLZOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZArchiving"), DISPID(415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt3DispT<T>::get_EKLZArchiving(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZArchiving((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReporting"), DISPID(416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt3DispT<T>::get_EKLZReporting(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZReporting((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayOpened"), DISPID(417));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt3DispT<T>::get_EKLZDayOpened(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZDayOpened((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZFatalError"), DISPID(418));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt3DispT<T>::get_EKLZFatalError(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZFatalError((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZAttention"), DISPID(419));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt3DispT<T>::get_EKLZAttention(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZAttention((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_LastRepNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRepNumber"), DISPID(420));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_LastRepNumber(void)
{
  long Value;
  this->get_LastRepNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EKLZRest(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZRest"), DISPID(421));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_EKLZRest(void)
{
  long Value;
  this->get_EKLZRest((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryFullJournal"), DISPID(422));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt3DispT<T>::QueryFullJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryFullJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFullJournal"), DISPID(423));
  TAutoArgs<1> _args;
  _args[1] = FullJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEKLZData"), DISPID(424));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastBuyingSum"), DISPID(425));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt3DispT<T>::get_LastBuyingSum(void)
{
  CURRENCY Value;
  this->get_LastBuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt3DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt3DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                      VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                      long Code/*[in]*/, long Adjustment/*[in]*/, 
                                      long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                      long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                      long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                    Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                    Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                      long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                      long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                      long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                      long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                   long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                               CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                               long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/, 
                               long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                               long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                               long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                       long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, CURRENCY PayCash/*[in]*/
                              , CURRENCY PayCashless/*[in]*/, BSTR PayInfo/*[in]*/, 
                              long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                              long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                  long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                  VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                  long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                               VARIANT_BOOL FullJournal/*[in]*/, 
                               Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                     long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                         long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                      VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                   VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, long TimeOff/*[in]*/
                                     , long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                 BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                    CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt3DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                     long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrt3DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrt3DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrt3DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt3DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt3DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt3DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrt3DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt3DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt3DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt3DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt3DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt3DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt3DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt3DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt3DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt3DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt3DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt3DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt3DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                           BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                  BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                    long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt3DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt3DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt3DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt3DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrtX2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {15273680-3D9A-4D78-9FEC-B92FFCD88441}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX2DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX2DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_BorderSize(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_BorderSize(void)
{
  long Value;
  this->get_BorderSize((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::set_BorderSize(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX2DispT<T>::get_ShowState(void)
{
  VARIANT_BOOL Value;
  this->get_ShowState((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::set_ShowState(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX2DispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                       VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                       long Code/*[in]*/, long Adjustment/*[in]*/, 
                                       long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                       long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                       long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                     Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                     CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                     BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                      Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                       long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                       long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                       long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                       long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                      , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                    long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                   long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/
                                , long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                                long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                               CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                               BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                               long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                  long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                   long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                   VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                   long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                VARIANT_BOOL FullJournal/*[in]*/, 
                                Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                      long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                           long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                       VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                    VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                      long TimeOff/*[in]*/, long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                  BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                     CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX2DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                      long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrtX2DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrtX2DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrtX2DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX2DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX2DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX2DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrtX2DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX2DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX2DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX2DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX2DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX2DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX2DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX2DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX2DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX2DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX2DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX2DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX2DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                            BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                   BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                      long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX2DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX2DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX2DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX2DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrtX3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7F2562A6-46FE-41FD-A75F-85535472969F}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::EKLZActivate()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivate"), DISPID(401));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::EKLZActivationReport()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivationReport"), DISPID(402));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::EKLZDayReport(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayReport"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                        long AEndNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByNum"), DISPID(404));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartNum /*[VT_I4:0]*/;
  _args[3] = AEndNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                         DATE AEndDate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByDate"), DISPID(405));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartDate /*[VT_DATE:0]*/;
  _args[3] = AEndDate /*[VT_DATE:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::EKLZDocByNum(long Number/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDocByNum"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::EKLZControlByNum(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZControlByNum"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::EKLZCloseArchive()
{
  _TDispID _dispid(*this, OLETEXT("EKLZCloseArchive"), DISPID(408));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::EKLZQueryStatus()
{
  _TDispID _dispid(*this, OLETEXT("EKLZQueryStatus"), DISPID(409));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPaperJournal"), DISPID(410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX3DispT<T>::QueryPaperJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryPaperJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPaperJournal"), DISPID(411));
  TAutoArgs<1> _args;
  _args[1] = PaperJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZSupported"), DISPID(412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX3DispT<T>::get_EKLZSupported(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZSupported((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivated"), DISPID(413));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX3DispT<T>::get_EKLZActivated(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZActivated((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZOper"), DISPID(414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX3DispT<T>::get_EKLZOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZArchiving"), DISPID(415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX3DispT<T>::get_EKLZArchiving(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZArchiving((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReporting"), DISPID(416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX3DispT<T>::get_EKLZReporting(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZReporting((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayOpened"), DISPID(417));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX3DispT<T>::get_EKLZDayOpened(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZDayOpened((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZFatalError"), DISPID(418));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX3DispT<T>::get_EKLZFatalError(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZFatalError((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZAttention"), DISPID(419));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX3DispT<T>::get_EKLZAttention(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZAttention((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryFullJournal"), DISPID(501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX3DispT<T>::QueryFullJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryFullJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFullJournal"), DISPID(502));
  TAutoArgs<1> _args;
  _args[1] = FullJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEKLZData"), DISPID(503));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastBuyingSum"), DISPID(504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX3DispT<T>::get_LastBuyingSum(void)
{
  CURRENCY Value;
  this->get_LastBuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX3DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX3DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_BorderSize(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_BorderSize(void)
{
  long Value;
  this->get_BorderSize((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::set_BorderSize(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX3DispT<T>::get_ShowState(void)
{
  VARIANT_BOOL Value;
  this->get_ShowState((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::set_ShowState(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX3DispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                       VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                       long Code/*[in]*/, long Adjustment/*[in]*/, 
                                       long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                       long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                       long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                     Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                     CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                     BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                      Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                       long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                       long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                       long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                       long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                      , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                    long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                   long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/
                                , long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                                long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                               CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                               BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                               long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                  long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                   long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                   VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                   long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                VARIANT_BOOL FullJournal/*[in]*/, 
                                Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                      long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                           long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                       VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                    VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                      long TimeOff/*[in]*/, long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                  BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                     CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX3DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                      long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrtX3DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrtX3DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrtX3DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX3DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX3DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX3DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrtX3DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX3DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX3DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX3DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX3DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX3DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX3DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX3DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX3DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX3DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX3DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX3DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX3DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                            BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                   BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                      long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX3DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX3DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX3DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX3DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrt4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {01D442F5-56A5-4F04-8C61-FB651172C6F0}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddRegNumber"), DISPID(501));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::EKLZActivate()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivate"), DISPID(401));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::EKLZActivationReport()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivationReport"), DISPID(402));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::EKLZDayReport(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayReport"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                       long AEndNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByNum"), DISPID(404));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartNum /*[VT_I4:0]*/;
  _args[3] = AEndNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                        DATE AEndDate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByDate"), DISPID(405));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartDate /*[VT_DATE:0]*/;
  _args[3] = AEndDate /*[VT_DATE:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::EKLZDocByNum(long Number/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDocByNum"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::EKLZControlByNum(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZControlByNum"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::EKLZCloseArchive()
{
  _TDispID _dispid(*this, OLETEXT("EKLZCloseArchive"), DISPID(408));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::EKLZQueryStatus()
{
  _TDispID _dispid(*this, OLETEXT("EKLZQueryStatus"), DISPID(409));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPaperJournal"), DISPID(410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt4DispT<T>::QueryPaperJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryPaperJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPaperJournal"), DISPID(411));
  TAutoArgs<1> _args;
  _args[1] = PaperJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZSupported"), DISPID(412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt4DispT<T>::get_EKLZSupported(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZSupported((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivated"), DISPID(413));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt4DispT<T>::get_EKLZActivated(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZActivated((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZOper"), DISPID(414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt4DispT<T>::get_EKLZOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZArchiving"), DISPID(415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt4DispT<T>::get_EKLZArchiving(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZArchiving((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReporting"), DISPID(416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt4DispT<T>::get_EKLZReporting(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZReporting((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayOpened"), DISPID(417));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt4DispT<T>::get_EKLZDayOpened(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZDayOpened((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZFatalError"), DISPID(418));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt4DispT<T>::get_EKLZFatalError(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZFatalError((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZAttention"), DISPID(419));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt4DispT<T>::get_EKLZAttention(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZAttention((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_LastRepNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRepNumber"), DISPID(420));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_LastRepNumber(void)
{
  long Value;
  this->get_LastRepNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EKLZRest(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZRest"), DISPID(421));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_EKLZRest(void)
{
  long Value;
  this->get_EKLZRest((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryFullJournal"), DISPID(422));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt4DispT<T>::QueryFullJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryFullJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFullJournal"), DISPID(423));
  TAutoArgs<1> _args;
  _args[1] = FullJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEKLZData"), DISPID(424));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastBuyingSum"), DISPID(425));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt4DispT<T>::get_LastBuyingSum(void)
{
  CURRENCY Value;
  this->get_LastBuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt4DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt4DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                      VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                      long Code/*[in]*/, long Adjustment/*[in]*/, 
                                      long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                      long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                      long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                    Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                    Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                      long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                      long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                      long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                      long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                   long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                               CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                               long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/, 
                               long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                               long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                               long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                       long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, CURRENCY PayCash/*[in]*/
                              , CURRENCY PayCashless/*[in]*/, BSTR PayInfo/*[in]*/, 
                              long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                              long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                  long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                  VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                  long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                               VARIANT_BOOL FullJournal/*[in]*/, 
                               Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                     long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                         long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                      VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                   VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, long TimeOff/*[in]*/
                                     , long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                 BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                    CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt4DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                     long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrt4DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrt4DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrt4DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt4DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt4DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt4DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrt4DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt4DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt4DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt4DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt4DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt4DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt4DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt4DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt4DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt4DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt4DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt4DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt4DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                           BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                  BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                    long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt4DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt4DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt4DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt4DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrtX4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {38FC4258-EFAC-49CE-8215-B3ED204C5E7A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddRegNumber"), DISPID(601));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::EKLZActivate()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivate"), DISPID(401));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::EKLZActivationReport()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivationReport"), DISPID(402));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::EKLZDayReport(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayReport"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                        long AEndNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByNum"), DISPID(404));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartNum /*[VT_I4:0]*/;
  _args[3] = AEndNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                         DATE AEndDate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByDate"), DISPID(405));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartDate /*[VT_DATE:0]*/;
  _args[3] = AEndDate /*[VT_DATE:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::EKLZDocByNum(long Number/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDocByNum"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::EKLZControlByNum(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZControlByNum"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::EKLZCloseArchive()
{
  _TDispID _dispid(*this, OLETEXT("EKLZCloseArchive"), DISPID(408));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::EKLZQueryStatus()
{
  _TDispID _dispid(*this, OLETEXT("EKLZQueryStatus"), DISPID(409));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPaperJournal"), DISPID(410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX4DispT<T>::QueryPaperJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryPaperJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPaperJournal"), DISPID(411));
  TAutoArgs<1> _args;
  _args[1] = PaperJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZSupported"), DISPID(412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX4DispT<T>::get_EKLZSupported(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZSupported((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivated"), DISPID(413));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX4DispT<T>::get_EKLZActivated(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZActivated((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZOper"), DISPID(414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX4DispT<T>::get_EKLZOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZArchiving"), DISPID(415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX4DispT<T>::get_EKLZArchiving(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZArchiving((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReporting"), DISPID(416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX4DispT<T>::get_EKLZReporting(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZReporting((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayOpened"), DISPID(417));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX4DispT<T>::get_EKLZDayOpened(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZDayOpened((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZFatalError"), DISPID(418));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX4DispT<T>::get_EKLZFatalError(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZFatalError((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZAttention"), DISPID(419));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX4DispT<T>::get_EKLZAttention(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZAttention((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryFullJournal"), DISPID(501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX4DispT<T>::QueryFullJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryFullJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFullJournal"), DISPID(502));
  TAutoArgs<1> _args;
  _args[1] = FullJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEKLZData"), DISPID(503));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastBuyingSum"), DISPID(504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX4DispT<T>::get_LastBuyingSum(void)
{
  CURRENCY Value;
  this->get_LastBuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX4DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX4DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_BorderSize(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_BorderSize(void)
{
  long Value;
  this->get_BorderSize((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::set_BorderSize(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX4DispT<T>::get_ShowState(void)
{
  VARIANT_BOOL Value;
  this->get_ShowState((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::set_ShowState(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX4DispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                       VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                       long Code/*[in]*/, long Adjustment/*[in]*/, 
                                       long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                       long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                       long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                     Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                     CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                     BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                      Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                       long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                       long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                       long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                       long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                      , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                    long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                   long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/
                                , long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                                long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                               CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                               BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                               long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                  long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                   long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                   VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                   long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                VARIANT_BOOL FullJournal/*[in]*/, 
                                Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                      long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                           long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                       VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                    VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                      long TimeOff/*[in]*/, long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                  BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                     CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX4DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                      long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrtX4DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrtX4DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrtX4DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX4DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX4DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX4DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrtX4DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX4DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX4DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX4DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX4DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX4DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX4DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX4DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX4DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX4DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX4DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX4DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX4DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                            BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                   BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                      long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX4DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX4DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX4DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX4DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrt5
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {66636E2A-5015-4156-9D06-FC6F63194254}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, long Height/*[in]*/, 
                                    BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteGraphic"), DISPID(601));
  TAutoArgs<4> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  _args[2] = Width /*[VT_I4:0]*/;
  _args[3] = Height /*[VT_I4:0]*/;
  _args[4] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintGraphic"), DISPID(602));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddRegNumber"), DISPID(501));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::EKLZActivate()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivate"), DISPID(401));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::EKLZActivationReport()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivationReport"), DISPID(402));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::EKLZDayReport(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayReport"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                       long AEndNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByNum"), DISPID(404));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartNum /*[VT_I4:0]*/;
  _args[3] = AEndNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                        DATE AEndDate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByDate"), DISPID(405));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartDate /*[VT_DATE:0]*/;
  _args[3] = AEndDate /*[VT_DATE:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::EKLZDocByNum(long Number/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDocByNum"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::EKLZControlByNum(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZControlByNum"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::EKLZCloseArchive()
{
  _TDispID _dispid(*this, OLETEXT("EKLZCloseArchive"), DISPID(408));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::EKLZQueryStatus()
{
  _TDispID _dispid(*this, OLETEXT("EKLZQueryStatus"), DISPID(409));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPaperJournal"), DISPID(410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt5DispT<T>::QueryPaperJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryPaperJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPaperJournal"), DISPID(411));
  TAutoArgs<1> _args;
  _args[1] = PaperJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZSupported"), DISPID(412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt5DispT<T>::get_EKLZSupported(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZSupported((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivated"), DISPID(413));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt5DispT<T>::get_EKLZActivated(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZActivated((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZOper"), DISPID(414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt5DispT<T>::get_EKLZOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZArchiving"), DISPID(415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt5DispT<T>::get_EKLZArchiving(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZArchiving((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReporting"), DISPID(416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt5DispT<T>::get_EKLZReporting(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZReporting((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayOpened"), DISPID(417));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt5DispT<T>::get_EKLZDayOpened(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZDayOpened((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZFatalError"), DISPID(418));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt5DispT<T>::get_EKLZFatalError(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZFatalError((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZAttention"), DISPID(419));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt5DispT<T>::get_EKLZAttention(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZAttention((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_LastRepNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRepNumber"), DISPID(420));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_LastRepNumber(void)
{
  long Value;
  this->get_LastRepNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EKLZRest(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZRest"), DISPID(421));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_EKLZRest(void)
{
  long Value;
  this->get_EKLZRest((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryFullJournal"), DISPID(422));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt5DispT<T>::QueryFullJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryFullJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFullJournal"), DISPID(423));
  TAutoArgs<1> _args;
  _args[1] = FullJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEKLZData"), DISPID(424));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastBuyingSum"), DISPID(425));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt5DispT<T>::get_LastBuyingSum(void)
{
  CURRENCY Value;
  this->get_LastBuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt5DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt5DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                      VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                      long Code/*[in]*/, long Adjustment/*[in]*/, 
                                      long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                      long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                      long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                    Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                    Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                      long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                      long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                      long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                      long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                   long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                               CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                               long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/, 
                               long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                               long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                               long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                       long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, CURRENCY PayCash/*[in]*/
                              , CURRENCY PayCashless/*[in]*/, BSTR PayInfo/*[in]*/, 
                              long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                              long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                  long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                  VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                  long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                               VARIANT_BOOL FullJournal/*[in]*/, 
                               Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                     long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                         long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                      VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                   VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, long TimeOff/*[in]*/
                                     , long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                 BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                    CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt5DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                     long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrt5DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrt5DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrt5DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt5DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt5DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt5DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrt5DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt5DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt5DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt5DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt5DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt5DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt5DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt5DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt5DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt5DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt5DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt5DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt5DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                           BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                  BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                    long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt5DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt5DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt5DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt5DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrtX5
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D3FA84FF-677F-4244-AEFB-E8343EF7C706}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, long Height/*[in]*/, 
                                     BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteGraphic"), DISPID(701));
  TAutoArgs<4> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  _args[2] = Width /*[VT_I4:0]*/;
  _args[3] = Height /*[VT_I4:0]*/;
  _args[4] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintGraphic"), DISPID(702));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddRegNumber"), DISPID(601));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::EKLZActivate()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivate"), DISPID(401));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::EKLZActivationReport()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivationReport"), DISPID(402));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::EKLZDayReport(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayReport"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                        long AEndNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByNum"), DISPID(404));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartNum /*[VT_I4:0]*/;
  _args[3] = AEndNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                         DATE AEndDate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByDate"), DISPID(405));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartDate /*[VT_DATE:0]*/;
  _args[3] = AEndDate /*[VT_DATE:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::EKLZDocByNum(long Number/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDocByNum"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::EKLZControlByNum(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZControlByNum"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::EKLZCloseArchive()
{
  _TDispID _dispid(*this, OLETEXT("EKLZCloseArchive"), DISPID(408));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::EKLZQueryStatus()
{
  _TDispID _dispid(*this, OLETEXT("EKLZQueryStatus"), DISPID(409));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPaperJournal"), DISPID(410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX5DispT<T>::QueryPaperJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryPaperJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPaperJournal"), DISPID(411));
  TAutoArgs<1> _args;
  _args[1] = PaperJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZSupported"), DISPID(412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX5DispT<T>::get_EKLZSupported(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZSupported((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivated"), DISPID(413));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX5DispT<T>::get_EKLZActivated(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZActivated((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZOper"), DISPID(414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX5DispT<T>::get_EKLZOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZArchiving"), DISPID(415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX5DispT<T>::get_EKLZArchiving(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZArchiving((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReporting"), DISPID(416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX5DispT<T>::get_EKLZReporting(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZReporting((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayOpened"), DISPID(417));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX5DispT<T>::get_EKLZDayOpened(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZDayOpened((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZFatalError"), DISPID(418));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX5DispT<T>::get_EKLZFatalError(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZFatalError((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZAttention"), DISPID(419));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX5DispT<T>::get_EKLZAttention(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZAttention((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryFullJournal"), DISPID(501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX5DispT<T>::QueryFullJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryFullJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFullJournal"), DISPID(502));
  TAutoArgs<1> _args;
  _args[1] = FullJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEKLZData"), DISPID(503));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastBuyingSum"), DISPID(504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX5DispT<T>::get_LastBuyingSum(void)
{
  CURRENCY Value;
  this->get_LastBuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX5DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX5DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_BorderSize(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_BorderSize(void)
{
  long Value;
  this->get_BorderSize((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::set_BorderSize(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX5DispT<T>::get_ShowState(void)
{
  VARIANT_BOOL Value;
  this->get_ShowState((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::set_ShowState(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX5DispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                       VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                       long Code/*[in]*/, long Adjustment/*[in]*/, 
                                       long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                       long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                       long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                     Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                     CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                     BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                      Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                       long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                       long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                       long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                       long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                      , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                    long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                   long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/
                                , long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                                long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                               CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                               BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                               long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                  long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                   long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                   VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                   long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                VARIANT_BOOL FullJournal/*[in]*/, 
                                Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                      long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                           long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                       VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                    VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                      long TimeOff/*[in]*/, long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                  BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                     CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX5DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                      long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrtX5DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrtX5DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrtX5DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX5DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX5DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX5DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrtX5DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX5DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX5DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX5DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX5DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX5DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX5DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX5DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX5DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX5DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX5DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX5DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX5DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                            BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                   BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                      long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX5DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX5DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX5DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX5DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrt6
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FDC67547-0246-4854-9F84-C7EE4E93FB9B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryParameterBool(long ParamCode/*[in]*/, 
                                          VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterBool"), DISPID(701));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt6DispT<T>::QueryParameterBool(long ParamCode/*[in]*/)
{
  VARIANT_BOOL Value;
  this->QueryParameterBool(ParamCode, (VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterInt"), DISPID(702));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::QueryParameterInt(long ParamCode/*[in]*/)
{
  long Value;
  this->QueryParameterInt(ParamCode, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetParameterBool(long ParamCode/*[in]*/, VARIANT_BOOL ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterBool"), DISPID(703));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterInt"), DISPID(704));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, long Height/*[in]*/, 
                                    BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteGraphic"), DISPID(601));
  TAutoArgs<4> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  _args[2] = Width /*[VT_I4:0]*/;
  _args[3] = Height /*[VT_I4:0]*/;
  _args[4] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintGraphic"), DISPID(602));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddRegNumber"), DISPID(501));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::EKLZActivate()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivate"), DISPID(401));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::EKLZActivationReport()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivationReport"), DISPID(402));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::EKLZDayReport(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayReport"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                       long AEndNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByNum"), DISPID(404));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartNum /*[VT_I4:0]*/;
  _args[3] = AEndNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                        DATE AEndDate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByDate"), DISPID(405));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartDate /*[VT_DATE:0]*/;
  _args[3] = AEndDate /*[VT_DATE:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::EKLZDocByNum(long Number/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDocByNum"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::EKLZControlByNum(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZControlByNum"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::EKLZCloseArchive()
{
  _TDispID _dispid(*this, OLETEXT("EKLZCloseArchive"), DISPID(408));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::EKLZQueryStatus()
{
  _TDispID _dispid(*this, OLETEXT("EKLZQueryStatus"), DISPID(409));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPaperJournal"), DISPID(410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt6DispT<T>::QueryPaperJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryPaperJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPaperJournal"), DISPID(411));
  TAutoArgs<1> _args;
  _args[1] = PaperJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZSupported"), DISPID(412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt6DispT<T>::get_EKLZSupported(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZSupported((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivated"), DISPID(413));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt6DispT<T>::get_EKLZActivated(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZActivated((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZOper"), DISPID(414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt6DispT<T>::get_EKLZOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZArchiving"), DISPID(415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt6DispT<T>::get_EKLZArchiving(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZArchiving((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReporting"), DISPID(416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt6DispT<T>::get_EKLZReporting(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZReporting((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayOpened"), DISPID(417));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt6DispT<T>::get_EKLZDayOpened(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZDayOpened((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZFatalError"), DISPID(418));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt6DispT<T>::get_EKLZFatalError(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZFatalError((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZAttention"), DISPID(419));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt6DispT<T>::get_EKLZAttention(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZAttention((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_LastRepNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRepNumber"), DISPID(420));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_LastRepNumber(void)
{
  long Value;
  this->get_LastRepNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EKLZRest(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZRest"), DISPID(421));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_EKLZRest(void)
{
  long Value;
  this->get_EKLZRest((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryFullJournal"), DISPID(422));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt6DispT<T>::QueryFullJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryFullJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFullJournal"), DISPID(423));
  TAutoArgs<1> _args;
  _args[1] = FullJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEKLZData"), DISPID(424));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastBuyingSum"), DISPID(425));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt6DispT<T>::get_LastBuyingSum(void)
{
  CURRENCY Value;
  this->get_LastBuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt6DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt6DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                      VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                      long Code/*[in]*/, long Adjustment/*[in]*/, 
                                      long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                      long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                      long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                    Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                    Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                      long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                      long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                      long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                      long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                   long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                               CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                               long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/, 
                               long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                               long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                               long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                       long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, CURRENCY PayCash/*[in]*/
                              , CURRENCY PayCashless/*[in]*/, BSTR PayInfo/*[in]*/, 
                              long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                              long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                  long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                  VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                  long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                               VARIANT_BOOL FullJournal/*[in]*/, 
                               Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                     long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                         long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                      VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                   VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, long TimeOff/*[in]*/
                                     , long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                 BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                    CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt6DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                     long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrt6DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrt6DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrt6DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt6DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt6DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt6DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrt6DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt6DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt6DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt6DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt6DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt6DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt6DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt6DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt6DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt6DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt6DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt6DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt6DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                           BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                  BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                    long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt6DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt6DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt6DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt6DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrtX6
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {44595440-34C5-4FCA-A3BE-154BD980C7BA}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryParameterBool(long ParamCode/*[in]*/, 
                                           VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterBool"), DISPID(801));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX6DispT<T>::QueryParameterBool(long ParamCode/*[in]*/)
{
  VARIANT_BOOL Value;
  this->QueryParameterBool(ParamCode, (VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterInt"), DISPID(802));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::QueryParameterInt(long ParamCode/*[in]*/)
{
  long Value;
  this->QueryParameterInt(ParamCode, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetParameterBool(long ParamCode/*[in]*/, VARIANT_BOOL ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterBool"), DISPID(803));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterInt"), DISPID(804));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, long Height/*[in]*/, 
                                     BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteGraphic"), DISPID(701));
  TAutoArgs<4> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  _args[2] = Width /*[VT_I4:0]*/;
  _args[3] = Height /*[VT_I4:0]*/;
  _args[4] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintGraphic"), DISPID(702));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddRegNumber"), DISPID(601));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::EKLZActivate()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivate"), DISPID(401));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::EKLZActivationReport()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivationReport"), DISPID(402));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::EKLZDayReport(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayReport"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                        long AEndNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByNum"), DISPID(404));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartNum /*[VT_I4:0]*/;
  _args[3] = AEndNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                         DATE AEndDate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByDate"), DISPID(405));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartDate /*[VT_DATE:0]*/;
  _args[3] = AEndDate /*[VT_DATE:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::EKLZDocByNum(long Number/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDocByNum"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::EKLZControlByNum(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZControlByNum"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::EKLZCloseArchive()
{
  _TDispID _dispid(*this, OLETEXT("EKLZCloseArchive"), DISPID(408));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::EKLZQueryStatus()
{
  _TDispID _dispid(*this, OLETEXT("EKLZQueryStatus"), DISPID(409));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPaperJournal"), DISPID(410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX6DispT<T>::QueryPaperJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryPaperJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPaperJournal"), DISPID(411));
  TAutoArgs<1> _args;
  _args[1] = PaperJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZSupported"), DISPID(412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX6DispT<T>::get_EKLZSupported(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZSupported((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivated"), DISPID(413));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX6DispT<T>::get_EKLZActivated(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZActivated((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZOper"), DISPID(414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX6DispT<T>::get_EKLZOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZArchiving"), DISPID(415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX6DispT<T>::get_EKLZArchiving(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZArchiving((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReporting"), DISPID(416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX6DispT<T>::get_EKLZReporting(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZReporting((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayOpened"), DISPID(417));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX6DispT<T>::get_EKLZDayOpened(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZDayOpened((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZFatalError"), DISPID(418));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX6DispT<T>::get_EKLZFatalError(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZFatalError((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZAttention"), DISPID(419));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX6DispT<T>::get_EKLZAttention(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZAttention((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryFullJournal"), DISPID(501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX6DispT<T>::QueryFullJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryFullJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFullJournal"), DISPID(502));
  TAutoArgs<1> _args;
  _args[1] = FullJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEKLZData"), DISPID(503));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastBuyingSum"), DISPID(504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX6DispT<T>::get_LastBuyingSum(void)
{
  CURRENCY Value;
  this->get_LastBuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX6DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX6DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_BorderSize(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_BorderSize(void)
{
  long Value;
  this->get_BorderSize((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::set_BorderSize(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX6DispT<T>::get_ShowState(void)
{
  VARIANT_BOOL Value;
  this->get_ShowState((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::set_ShowState(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX6DispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                       VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                       long Code/*[in]*/, long Adjustment/*[in]*/, 
                                       long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                       long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                       long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                     Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                     CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                     BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                      Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                       long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                       long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                       long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                       long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                      , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                    long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                   long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/
                                , long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                                long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                               CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                               BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                               long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                  long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                   long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                   VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                   long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                VARIANT_BOOL FullJournal/*[in]*/, 
                                Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                      long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                           long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                       VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                    VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                      long TimeOff/*[in]*/, long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                  BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                     CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX6DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                      long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrtX6DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrtX6DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrtX6DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX6DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX6DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX6DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrtX6DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX6DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX6DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX6DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX6DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX6DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX6DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX6DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX6DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX6DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX6DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX6DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX6DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                            BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                   BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                      long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX6DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX6DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX6DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX6DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrt7
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9549BA81-6015-4DA1-996E-53347CD57ABE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::PrintHeader()
{
  _TDispID _dispid(*this, OLETEXT("PrintHeader"), DISPID(801));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryParameterBool(long ParamCode/*[in]*/, 
                                          VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterBool"), DISPID(701));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt7DispT<T>::QueryParameterBool(long ParamCode/*[in]*/)
{
  VARIANT_BOOL Value;
  this->QueryParameterBool(ParamCode, (VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterInt"), DISPID(702));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::QueryParameterInt(long ParamCode/*[in]*/)
{
  long Value;
  this->QueryParameterInt(ParamCode, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetParameterBool(long ParamCode/*[in]*/, VARIANT_BOOL ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterBool"), DISPID(703));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterInt"), DISPID(704));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, long Height/*[in]*/, 
                                    BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteGraphic"), DISPID(601));
  TAutoArgs<4> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  _args[2] = Width /*[VT_I4:0]*/;
  _args[3] = Height /*[VT_I4:0]*/;
  _args[4] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintGraphic"), DISPID(602));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddRegNumber"), DISPID(501));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::EKLZActivate()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivate"), DISPID(401));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::EKLZActivationReport()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivationReport"), DISPID(402));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::EKLZDayReport(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayReport"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                       long AEndNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByNum"), DISPID(404));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartNum /*[VT_I4:0]*/;
  _args[3] = AEndNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                        DATE AEndDate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByDate"), DISPID(405));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartDate /*[VT_DATE:0]*/;
  _args[3] = AEndDate /*[VT_DATE:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::EKLZDocByNum(long Number/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDocByNum"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::EKLZControlByNum(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZControlByNum"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::EKLZCloseArchive()
{
  _TDispID _dispid(*this, OLETEXT("EKLZCloseArchive"), DISPID(408));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::EKLZQueryStatus()
{
  _TDispID _dispid(*this, OLETEXT("EKLZQueryStatus"), DISPID(409));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPaperJournal"), DISPID(410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt7DispT<T>::QueryPaperJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryPaperJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPaperJournal"), DISPID(411));
  TAutoArgs<1> _args;
  _args[1] = PaperJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZSupported"), DISPID(412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt7DispT<T>::get_EKLZSupported(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZSupported((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivated"), DISPID(413));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt7DispT<T>::get_EKLZActivated(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZActivated((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZOper"), DISPID(414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt7DispT<T>::get_EKLZOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZArchiving"), DISPID(415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt7DispT<T>::get_EKLZArchiving(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZArchiving((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReporting"), DISPID(416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt7DispT<T>::get_EKLZReporting(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZReporting((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayOpened"), DISPID(417));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt7DispT<T>::get_EKLZDayOpened(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZDayOpened((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZFatalError"), DISPID(418));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt7DispT<T>::get_EKLZFatalError(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZFatalError((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZAttention"), DISPID(419));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt7DispT<T>::get_EKLZAttention(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZAttention((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_LastRepNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRepNumber"), DISPID(420));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_LastRepNumber(void)
{
  long Value;
  this->get_LastRepNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EKLZRest(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZRest"), DISPID(421));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_EKLZRest(void)
{
  long Value;
  this->get_EKLZRest((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryFullJournal"), DISPID(422));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt7DispT<T>::QueryFullJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryFullJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFullJournal"), DISPID(423));
  TAutoArgs<1> _args;
  _args[1] = FullJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEKLZData"), DISPID(424));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastBuyingSum"), DISPID(425));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt7DispT<T>::get_LastBuyingSum(void)
{
  CURRENCY Value;
  this->get_LastBuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt7DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt7DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                      VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                      long Code/*[in]*/, long Adjustment/*[in]*/, 
                                      long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                      long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                      long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                    Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                    Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                      long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                      long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                      long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                      long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                   long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                               CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                               long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/, 
                               long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                               long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                               long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                       long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, CURRENCY PayCash/*[in]*/
                              , CURRENCY PayCashless/*[in]*/, BSTR PayInfo/*[in]*/, 
                              long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                              long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                  long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                  VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                  long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                               VARIANT_BOOL FullJournal/*[in]*/, 
                               Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                     long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                         long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                      VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                   VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, long TimeOff/*[in]*/
                                     , long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                 BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                    CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt7DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                     long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrt7DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrt7DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrt7DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt7DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt7DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt7DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrt7DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt7DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt7DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt7DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt7DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt7DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt7DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt7DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt7DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt7DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt7DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt7DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt7DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                           BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                  BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                    long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt7DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt7DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt7DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt7DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrtX7
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3D5A10AD-307C-49D4-A59B-70FFEE159CB2}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::PrintHeader()
{
  _TDispID _dispid(*this, OLETEXT("PrintHeader"), DISPID(901));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryParameterBool(long ParamCode/*[in]*/, 
                                           VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterBool"), DISPID(801));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX7DispT<T>::QueryParameterBool(long ParamCode/*[in]*/)
{
  VARIANT_BOOL Value;
  this->QueryParameterBool(ParamCode, (VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterInt"), DISPID(802));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::QueryParameterInt(long ParamCode/*[in]*/)
{
  long Value;
  this->QueryParameterInt(ParamCode, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetParameterBool(long ParamCode/*[in]*/, VARIANT_BOOL ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterBool"), DISPID(803));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterInt"), DISPID(804));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, long Height/*[in]*/, 
                                     BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteGraphic"), DISPID(701));
  TAutoArgs<4> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  _args[2] = Width /*[VT_I4:0]*/;
  _args[3] = Height /*[VT_I4:0]*/;
  _args[4] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintGraphic"), DISPID(702));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddRegNumber"), DISPID(601));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::EKLZActivate()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivate"), DISPID(401));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::EKLZActivationReport()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivationReport"), DISPID(402));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::EKLZDayReport(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayReport"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                        long AEndNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByNum"), DISPID(404));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartNum /*[VT_I4:0]*/;
  _args[3] = AEndNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                         DATE AEndDate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByDate"), DISPID(405));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartDate /*[VT_DATE:0]*/;
  _args[3] = AEndDate /*[VT_DATE:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::EKLZDocByNum(long Number/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDocByNum"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::EKLZControlByNum(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZControlByNum"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::EKLZCloseArchive()
{
  _TDispID _dispid(*this, OLETEXT("EKLZCloseArchive"), DISPID(408));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::EKLZQueryStatus()
{
  _TDispID _dispid(*this, OLETEXT("EKLZQueryStatus"), DISPID(409));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPaperJournal"), DISPID(410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX7DispT<T>::QueryPaperJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryPaperJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPaperJournal"), DISPID(411));
  TAutoArgs<1> _args;
  _args[1] = PaperJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZSupported"), DISPID(412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX7DispT<T>::get_EKLZSupported(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZSupported((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivated"), DISPID(413));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX7DispT<T>::get_EKLZActivated(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZActivated((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZOper"), DISPID(414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX7DispT<T>::get_EKLZOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZArchiving"), DISPID(415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX7DispT<T>::get_EKLZArchiving(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZArchiving((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReporting"), DISPID(416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX7DispT<T>::get_EKLZReporting(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZReporting((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayOpened"), DISPID(417));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX7DispT<T>::get_EKLZDayOpened(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZDayOpened((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZFatalError"), DISPID(418));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX7DispT<T>::get_EKLZFatalError(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZFatalError((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZAttention"), DISPID(419));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX7DispT<T>::get_EKLZAttention(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZAttention((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryFullJournal"), DISPID(501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX7DispT<T>::QueryFullJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryFullJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFullJournal"), DISPID(502));
  TAutoArgs<1> _args;
  _args[1] = FullJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEKLZData"), DISPID(503));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastBuyingSum"), DISPID(504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX7DispT<T>::get_LastBuyingSum(void)
{
  CURRENCY Value;
  this->get_LastBuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX7DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX7DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_BorderSize(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_BorderSize(void)
{
  long Value;
  this->get_BorderSize((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::set_BorderSize(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX7DispT<T>::get_ShowState(void)
{
  VARIANT_BOOL Value;
  this->get_ShowState((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::set_ShowState(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX7DispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                       VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                       long Code/*[in]*/, long Adjustment/*[in]*/, 
                                       long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                       long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                       long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                     Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                     CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                     BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                      Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                       long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                       long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                       long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                       long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                      , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                    long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                   long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/
                                , long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                                long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                               CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                               BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                               long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                  long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                   long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                   VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                   long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                VARIANT_BOOL FullJournal/*[in]*/, 
                                Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                      long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                           long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                       VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                    VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                      long TimeOff/*[in]*/, long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                  BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                     CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX7DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                      long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrtX7DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrtX7DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrtX7DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX7DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX7DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX7DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrtX7DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX7DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX7DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX7DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX7DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX7DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX7DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX7DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX7DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX7DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX7DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX7DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX7DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                            BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                   BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                      long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX7DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX7DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX7DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX7DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrt8
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9397BB3C-769E-47E2-8C0D-028A38B5D48F}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetOperPassword(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                       BSTR OperPassword/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetOperPassword"), DISPID(901));
  TAutoArgs<3> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = OperPassword /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::PrintHeader()
{
  _TDispID _dispid(*this, OLETEXT("PrintHeader"), DISPID(801));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryParameterBool(long ParamCode/*[in]*/, 
                                          VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterBool"), DISPID(701));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt8DispT<T>::QueryParameterBool(long ParamCode/*[in]*/)
{
  VARIANT_BOOL Value;
  this->QueryParameterBool(ParamCode, (VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterInt"), DISPID(702));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::QueryParameterInt(long ParamCode/*[in]*/)
{
  long Value;
  this->QueryParameterInt(ParamCode, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetParameterBool(long ParamCode/*[in]*/, VARIANT_BOOL ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterBool"), DISPID(703));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterInt"), DISPID(704));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, long Height/*[in]*/, 
                                    BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteGraphic"), DISPID(601));
  TAutoArgs<4> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  _args[2] = Width /*[VT_I4:0]*/;
  _args[3] = Height /*[VT_I4:0]*/;
  _args[4] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintGraphic"), DISPID(602));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddRegNumber"), DISPID(501));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::EKLZActivate()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivate"), DISPID(401));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::EKLZActivationReport()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivationReport"), DISPID(402));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::EKLZDayReport(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayReport"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                       long AEndNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByNum"), DISPID(404));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartNum /*[VT_I4:0]*/;
  _args[3] = AEndNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                        DATE AEndDate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByDate"), DISPID(405));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartDate /*[VT_DATE:0]*/;
  _args[3] = AEndDate /*[VT_DATE:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::EKLZDocByNum(long Number/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDocByNum"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::EKLZControlByNum(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZControlByNum"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::EKLZCloseArchive()
{
  _TDispID _dispid(*this, OLETEXT("EKLZCloseArchive"), DISPID(408));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::EKLZQueryStatus()
{
  _TDispID _dispid(*this, OLETEXT("EKLZQueryStatus"), DISPID(409));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPaperJournal"), DISPID(410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt8DispT<T>::QueryPaperJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryPaperJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPaperJournal"), DISPID(411));
  TAutoArgs<1> _args;
  _args[1] = PaperJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZSupported"), DISPID(412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt8DispT<T>::get_EKLZSupported(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZSupported((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivated"), DISPID(413));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt8DispT<T>::get_EKLZActivated(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZActivated((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZOper"), DISPID(414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt8DispT<T>::get_EKLZOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZArchiving"), DISPID(415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt8DispT<T>::get_EKLZArchiving(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZArchiving((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReporting"), DISPID(416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt8DispT<T>::get_EKLZReporting(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZReporting((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayOpened"), DISPID(417));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt8DispT<T>::get_EKLZDayOpened(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZDayOpened((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZFatalError"), DISPID(418));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt8DispT<T>::get_EKLZFatalError(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZFatalError((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZAttention"), DISPID(419));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt8DispT<T>::get_EKLZAttention(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZAttention((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_LastRepNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRepNumber"), DISPID(420));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_LastRepNumber(void)
{
  long Value;
  this->get_LastRepNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EKLZRest(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZRest"), DISPID(421));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_EKLZRest(void)
{
  long Value;
  this->get_EKLZRest((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryFullJournal"), DISPID(422));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt8DispT<T>::QueryFullJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryFullJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFullJournal"), DISPID(423));
  TAutoArgs<1> _args;
  _args[1] = FullJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEKLZData"), DISPID(424));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastBuyingSum"), DISPID(425));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt8DispT<T>::get_LastBuyingSum(void)
{
  CURRENCY Value;
  this->get_LastBuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt8DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt8DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                      VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                      long Code/*[in]*/, long Adjustment/*[in]*/, 
                                      long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                      long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                      long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                    Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                    Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                      long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                      long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                      long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                      long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                   long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                               CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                               long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/, 
                               long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                               long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                               long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                       long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, CURRENCY PayCash/*[in]*/
                              , CURRENCY PayCashless/*[in]*/, BSTR PayInfo/*[in]*/, 
                              long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                              long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                  long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                  VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                  long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                               VARIANT_BOOL FullJournal/*[in]*/, 
                               Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                     long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                         long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                      VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                   VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, long TimeOff/*[in]*/
                                     , long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                 BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                    CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt8DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                     long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrt8DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrt8DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrt8DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt8DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt8DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt8DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrt8DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt8DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt8DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt8DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt8DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt8DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt8DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt8DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt8DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt8DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt8DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt8DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt8DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                           BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                  BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                    long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt8DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt8DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt8DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt8DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrtX8
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {116A8129-4171-4B1D-8A49-6724A8E975DD}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetOperPassword(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                        BSTR OperPassword/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetOperPassword"), DISPID(1003));
  TAutoArgs<3> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = OperPassword /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::PrintHeader()
{
  _TDispID _dispid(*this, OLETEXT("PrintHeader"), DISPID(901));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryParameterBool(long ParamCode/*[in]*/, 
                                           VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterBool"), DISPID(801));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX8DispT<T>::QueryParameterBool(long ParamCode/*[in]*/)
{
  VARIANT_BOOL Value;
  this->QueryParameterBool(ParamCode, (VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterInt"), DISPID(802));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::QueryParameterInt(long ParamCode/*[in]*/)
{
  long Value;
  this->QueryParameterInt(ParamCode, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetParameterBool(long ParamCode/*[in]*/, VARIANT_BOOL ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterBool"), DISPID(803));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterInt"), DISPID(804));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, long Height/*[in]*/, 
                                     BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteGraphic"), DISPID(701));
  TAutoArgs<4> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  _args[2] = Width /*[VT_I4:0]*/;
  _args[3] = Height /*[VT_I4:0]*/;
  _args[4] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintGraphic"), DISPID(702));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddRegNumber"), DISPID(601));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::EKLZActivate()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivate"), DISPID(401));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::EKLZActivationReport()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivationReport"), DISPID(402));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::EKLZDayReport(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayReport"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                        long AEndNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByNum"), DISPID(404));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartNum /*[VT_I4:0]*/;
  _args[3] = AEndNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                         DATE AEndDate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByDate"), DISPID(405));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartDate /*[VT_DATE:0]*/;
  _args[3] = AEndDate /*[VT_DATE:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::EKLZDocByNum(long Number/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDocByNum"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::EKLZControlByNum(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZControlByNum"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::EKLZCloseArchive()
{
  _TDispID _dispid(*this, OLETEXT("EKLZCloseArchive"), DISPID(408));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::EKLZQueryStatus()
{
  _TDispID _dispid(*this, OLETEXT("EKLZQueryStatus"), DISPID(409));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPaperJournal"), DISPID(410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX8DispT<T>::QueryPaperJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryPaperJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPaperJournal"), DISPID(411));
  TAutoArgs<1> _args;
  _args[1] = PaperJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZSupported"), DISPID(412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX8DispT<T>::get_EKLZSupported(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZSupported((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivated"), DISPID(413));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX8DispT<T>::get_EKLZActivated(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZActivated((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZOper"), DISPID(414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX8DispT<T>::get_EKLZOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZArchiving"), DISPID(415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX8DispT<T>::get_EKLZArchiving(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZArchiving((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReporting"), DISPID(416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX8DispT<T>::get_EKLZReporting(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZReporting((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayOpened"), DISPID(417));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX8DispT<T>::get_EKLZDayOpened(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZDayOpened((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZFatalError"), DISPID(418));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX8DispT<T>::get_EKLZFatalError(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZFatalError((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZAttention"), DISPID(419));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX8DispT<T>::get_EKLZAttention(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZAttention((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryFullJournal"), DISPID(501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX8DispT<T>::QueryFullJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryFullJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFullJournal"), DISPID(502));
  TAutoArgs<1> _args;
  _args[1] = FullJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEKLZData"), DISPID(503));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastBuyingSum"), DISPID(504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX8DispT<T>::get_LastBuyingSum(void)
{
  CURRENCY Value;
  this->get_LastBuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX8DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX8DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_BorderSize(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_BorderSize(void)
{
  long Value;
  this->get_BorderSize((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::set_BorderSize(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX8DispT<T>::get_ShowState(void)
{
  VARIANT_BOOL Value;
  this->get_ShowState((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::set_ShowState(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX8DispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                       VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                       long Code/*[in]*/, long Adjustment/*[in]*/, 
                                       long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                       long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                       long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                     Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                     CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                     BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                      Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                       long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                       long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                       long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                       long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                      , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                    long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                   long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/
                                , long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                                long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                               CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                               BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                               long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                  long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                   long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                   VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                   long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                VARIANT_BOOL FullJournal/*[in]*/, 
                                Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                      long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                           long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                       VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                    VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                      long TimeOff/*[in]*/, long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                  BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                     CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX8DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                      long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrtX8DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrtX8DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrtX8DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX8DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX8DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX8DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrtX8DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX8DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX8DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX8DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX8DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX8DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX8DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX8DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX8DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX8DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX8DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX8DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX8DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                            BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                   BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                      long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX8DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX8DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX8DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX8DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrt9
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B9F07D55-3587-4FFE-BFA8-0F1BFE05554F}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::PrintEKL(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintEKL"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::PrintEKL(long Flags/*[in]*/)
{
  long ReportNum;
  this->PrintEKL(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryEKLState(Mercfprtx_tlb::TxMercEKLState* State/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEKLState"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)State /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEKLState __fastcall
IMercuryFPrt9DispT<T>::QueryEKLState(void)
{
  Mercfprtx_tlb::TxMercEKLState State;
  this->QueryEKLState((Mercfprtx_tlb::TxMercEKLState*)&State);
  return State;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetOperPassword(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                       BSTR OperPassword/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetOperPassword"), DISPID(901));
  TAutoArgs<3> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = OperPassword /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::PrintHeader()
{
  _TDispID _dispid(*this, OLETEXT("PrintHeader"), DISPID(801));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryParameterBool(long ParamCode/*[in]*/, 
                                          VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterBool"), DISPID(701));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt9DispT<T>::QueryParameterBool(long ParamCode/*[in]*/)
{
  VARIANT_BOOL Value;
  this->QueryParameterBool(ParamCode, (VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterInt"), DISPID(702));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::QueryParameterInt(long ParamCode/*[in]*/)
{
  long Value;
  this->QueryParameterInt(ParamCode, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetParameterBool(long ParamCode/*[in]*/, VARIANT_BOOL ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterBool"), DISPID(703));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterInt"), DISPID(704));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, long Height/*[in]*/, 
                                    BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteGraphic"), DISPID(601));
  TAutoArgs<4> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  _args[2] = Width /*[VT_I4:0]*/;
  _args[3] = Height /*[VT_I4:0]*/;
  _args[4] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintGraphic"), DISPID(602));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddRegNumber"), DISPID(501));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::EKLZActivate()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivate"), DISPID(401));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::EKLZActivationReport()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivationReport"), DISPID(402));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::EKLZDayReport(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayReport"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                       long AEndNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByNum"), DISPID(404));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartNum /*[VT_I4:0]*/;
  _args[3] = AEndNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                        DATE AEndDate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByDate"), DISPID(405));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartDate /*[VT_DATE:0]*/;
  _args[3] = AEndDate /*[VT_DATE:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::EKLZDocByNum(long Number/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDocByNum"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::EKLZControlByNum(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZControlByNum"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::EKLZCloseArchive()
{
  _TDispID _dispid(*this, OLETEXT("EKLZCloseArchive"), DISPID(408));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::EKLZQueryStatus()
{
  _TDispID _dispid(*this, OLETEXT("EKLZQueryStatus"), DISPID(409));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPaperJournal"), DISPID(410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt9DispT<T>::QueryPaperJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryPaperJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPaperJournal"), DISPID(411));
  TAutoArgs<1> _args;
  _args[1] = PaperJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZSupported"), DISPID(412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt9DispT<T>::get_EKLZSupported(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZSupported((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivated"), DISPID(413));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt9DispT<T>::get_EKLZActivated(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZActivated((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZOper"), DISPID(414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt9DispT<T>::get_EKLZOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZArchiving"), DISPID(415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt9DispT<T>::get_EKLZArchiving(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZArchiving((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReporting"), DISPID(416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt9DispT<T>::get_EKLZReporting(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZReporting((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayOpened"), DISPID(417));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt9DispT<T>::get_EKLZDayOpened(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZDayOpened((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZFatalError"), DISPID(418));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt9DispT<T>::get_EKLZFatalError(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZFatalError((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZAttention"), DISPID(419));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt9DispT<T>::get_EKLZAttention(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZAttention((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_LastRepNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRepNumber"), DISPID(420));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_LastRepNumber(void)
{
  long Value;
  this->get_LastRepNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EKLZRest(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZRest"), DISPID(421));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_EKLZRest(void)
{
  long Value;
  this->get_EKLZRest((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryFullJournal"), DISPID(422));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt9DispT<T>::QueryFullJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryFullJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFullJournal"), DISPID(423));
  TAutoArgs<1> _args;
  _args[1] = FullJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEKLZData"), DISPID(424));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastBuyingSum"), DISPID(425));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt9DispT<T>::get_LastBuyingSum(void)
{
  CURRENCY Value;
  this->get_LastBuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt9DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt9DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                      VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                      long Code/*[in]*/, long Adjustment/*[in]*/, 
                                      long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                      long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                      long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                    Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                    CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                    BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                    Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                      long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                      long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                      long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                      long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                     , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                   long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                               CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                               long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/, 
                               long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                               long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                               long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                       long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, CURRENCY PayCash/*[in]*/
                              , CURRENCY PayCashless/*[in]*/, BSTR PayInfo/*[in]*/, 
                              long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                              long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                  long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                  VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                  long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                 long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                               VARIANT_BOOL FullJournal/*[in]*/, 
                               Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                     long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                     BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                         long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                         long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                      VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                   VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, long TimeOff/*[in]*/
                                     , long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                 BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                    CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt9DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                     long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrt9DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrt9DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrt9DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt9DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt9DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt9DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrt9DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt9DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt9DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt9DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt9DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt9DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt9DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt9DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt9DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt9DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt9DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt9DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt9DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                           BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                  BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                    long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt9DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt9DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt9DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt9DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMercuryFPrtX9
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {47D80BD0-5B41-4BFE-98AA-9E76BA94F37E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::PrintEKL(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintEKL"), DISPID(1101));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::PrintEKL(long Flags/*[in]*/)
{
  long ReportNum;
  this->PrintEKL(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryEKLState(Mercfprtx_tlb::TxMercEKLState* State/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEKLState"), DISPID(1102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)State /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEKLState __fastcall
IMercuryFPrtX9DispT<T>::QueryEKLState(void)
{
  Mercfprtx_tlb::TxMercEKLState State;
  this->QueryEKLState((Mercfprtx_tlb::TxMercEKLState*)&State);
  return State;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetOperPassword(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                        BSTR OperPassword/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetOperPassword"), DISPID(1003));
  TAutoArgs<3> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = OperPassword /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::PrintHeader()
{
  _TDispID _dispid(*this, OLETEXT("PrintHeader"), DISPID(901));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryParameterBool(long ParamCode/*[in]*/, 
                                           VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterBool"), DISPID(801));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX9DispT<T>::QueryParameterBool(long ParamCode/*[in]*/)
{
  VARIANT_BOOL Value;
  this->QueryParameterBool(ParamCode, (VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterInt"), DISPID(802));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::QueryParameterInt(long ParamCode/*[in]*/)
{
  long Value;
  this->QueryParameterInt(ParamCode, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetParameterBool(long ParamCode/*[in]*/, VARIANT_BOOL ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterBool"), DISPID(803));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterInt"), DISPID(804));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, long Height/*[in]*/, 
                                     BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteGraphic"), DISPID(701));
  TAutoArgs<4> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  _args[2] = Width /*[VT_I4:0]*/;
  _args[3] = Height /*[VT_I4:0]*/;
  _args[4] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintGraphic"), DISPID(702));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddRegNumber"), DISPID(601));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::EKLZActivate()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivate"), DISPID(401));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::EKLZActivationReport()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivationReport"), DISPID(402));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::EKLZDayReport(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayReport"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                        long AEndNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByNum"), DISPID(404));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartNum /*[VT_I4:0]*/;
  _args[3] = AEndNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                         DATE AEndDate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByDate"), DISPID(405));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartDate /*[VT_DATE:0]*/;
  _args[3] = AEndDate /*[VT_DATE:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::EKLZDocByNum(long Number/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDocByNum"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::EKLZControlByNum(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZControlByNum"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::EKLZCloseArchive()
{
  _TDispID _dispid(*this, OLETEXT("EKLZCloseArchive"), DISPID(408));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::EKLZQueryStatus()
{
  _TDispID _dispid(*this, OLETEXT("EKLZQueryStatus"), DISPID(409));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPaperJournal"), DISPID(410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX9DispT<T>::QueryPaperJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryPaperJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPaperJournal"), DISPID(411));
  TAutoArgs<1> _args;
  _args[1] = PaperJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZSupported"), DISPID(412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX9DispT<T>::get_EKLZSupported(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZSupported((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivated"), DISPID(413));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX9DispT<T>::get_EKLZActivated(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZActivated((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZOper"), DISPID(414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX9DispT<T>::get_EKLZOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZArchiving"), DISPID(415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX9DispT<T>::get_EKLZArchiving(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZArchiving((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReporting"), DISPID(416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX9DispT<T>::get_EKLZReporting(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZReporting((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayOpened"), DISPID(417));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX9DispT<T>::get_EKLZDayOpened(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZDayOpened((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZFatalError"), DISPID(418));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX9DispT<T>::get_EKLZFatalError(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZFatalError((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZAttention"), DISPID(419));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX9DispT<T>::get_EKLZAttention(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZAttention((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryFullJournal"), DISPID(501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX9DispT<T>::QueryFullJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryFullJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFullJournal"), DISPID(502));
  TAutoArgs<1> _args;
  _args[1] = FullJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEKLZData"), DISPID(503));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastBuyingSum"), DISPID(504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX9DispT<T>::get_LastBuyingSum(void)
{
  CURRENCY Value;
  this->get_LastBuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX9DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX9DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_BorderSize(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_BorderSize(void)
{
  long Value;
  this->get_BorderSize((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::set_BorderSize(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX9DispT<T>::get_ShowState(void)
{
  VARIANT_BOOL Value;
  this->get_ShowState((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::set_ShowState(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX9DispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                       VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                       long Code/*[in]*/, long Adjustment/*[in]*/, 
                                       long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                       long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                       long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                     Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                     CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                     BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                      Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                       long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                       long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                       long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                       long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                      , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                    long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                   long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/
                                , long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                                long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                               CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                               BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                               long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                  long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                   long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                   VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                   long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                VARIANT_BOOL FullJournal/*[in]*/, 
                                Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                      long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                           long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                       VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                    VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                      long TimeOff/*[in]*/, long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                  BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                     CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX9DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                      long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrtX9DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrtX9DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrtX9DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX9DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX9DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX9DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrtX9DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX9DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX9DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX9DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX9DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX9DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX9DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX9DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX9DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX9DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX9DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX9DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX9DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                            BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                   BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                      long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX9DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX9DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX9DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX9DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIMercuryFPrt10
// Interface: IMercuryFPrt10
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMercuryFPrt10T<T>::ReprintDocument(void)
{
  return (*this)->ReprintDocument();
}

// *********************************************************************//
// DispIntf:  IMercuryFPrt10
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C389388E-BCC0-4580-8673-47193431C2C3}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::ReprintDocument()
{
  _TDispID _dispid(*this, OLETEXT("ReprintDocument"), DISPID(1101));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::PrintEKL(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintEKL"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::PrintEKL(long Flags/*[in]*/)
{
  long ReportNum;
  this->PrintEKL(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryEKLState(Mercfprtx_tlb::TxMercEKLState* State/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEKLState"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)State /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEKLState __fastcall
IMercuryFPrt10DispT<T>::QueryEKLState(void)
{
  Mercfprtx_tlb::TxMercEKLState State;
  this->QueryEKLState((Mercfprtx_tlb::TxMercEKLState*)&State);
  return State;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetOperPassword(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                        BSTR OperPassword/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetOperPassword"), DISPID(901));
  TAutoArgs<3> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = OperPassword /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::PrintHeader()
{
  _TDispID _dispid(*this, OLETEXT("PrintHeader"), DISPID(801));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryParameterBool(long ParamCode/*[in]*/, 
                                           VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterBool"), DISPID(701));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt10DispT<T>::QueryParameterBool(long ParamCode/*[in]*/)
{
  VARIANT_BOOL Value;
  this->QueryParameterBool(ParamCode, (VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterInt"), DISPID(702));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::QueryParameterInt(long ParamCode/*[in]*/)
{
  long Value;
  this->QueryParameterInt(ParamCode, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetParameterBool(long ParamCode/*[in]*/, VARIANT_BOOL ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterBool"), DISPID(703));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterInt"), DISPID(704));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, long Height/*[in]*/, 
                                     BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteGraphic"), DISPID(601));
  TAutoArgs<4> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  _args[2] = Width /*[VT_I4:0]*/;
  _args[3] = Height /*[VT_I4:0]*/;
  _args[4] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintGraphic"), DISPID(602));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddRegNumber"), DISPID(501));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::EKLZActivate()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivate"), DISPID(401));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::EKLZActivationReport()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivationReport"), DISPID(402));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::EKLZDayReport(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayReport"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                        long AEndNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByNum"), DISPID(404));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartNum /*[VT_I4:0]*/;
  _args[3] = AEndNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                         DATE AEndDate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByDate"), DISPID(405));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartDate /*[VT_DATE:0]*/;
  _args[3] = AEndDate /*[VT_DATE:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::EKLZDocByNum(long Number/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDocByNum"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::EKLZControlByNum(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZControlByNum"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::EKLZCloseArchive()
{
  _TDispID _dispid(*this, OLETEXT("EKLZCloseArchive"), DISPID(408));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::EKLZQueryStatus()
{
  _TDispID _dispid(*this, OLETEXT("EKLZQueryStatus"), DISPID(409));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPaperJournal"), DISPID(410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt10DispT<T>::QueryPaperJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryPaperJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPaperJournal"), DISPID(411));
  TAutoArgs<1> _args;
  _args[1] = PaperJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZSupported"), DISPID(412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt10DispT<T>::get_EKLZSupported(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZSupported((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivated"), DISPID(413));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt10DispT<T>::get_EKLZActivated(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZActivated((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZOper"), DISPID(414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt10DispT<T>::get_EKLZOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZArchiving"), DISPID(415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt10DispT<T>::get_EKLZArchiving(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZArchiving((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReporting"), DISPID(416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt10DispT<T>::get_EKLZReporting(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZReporting((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayOpened"), DISPID(417));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt10DispT<T>::get_EKLZDayOpened(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZDayOpened((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZFatalError"), DISPID(418));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt10DispT<T>::get_EKLZFatalError(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZFatalError((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZAttention"), DISPID(419));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt10DispT<T>::get_EKLZAttention(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZAttention((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_LastRepNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRepNumber"), DISPID(420));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_LastRepNumber(void)
{
  long Value;
  this->get_LastRepNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EKLZRest(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZRest"), DISPID(421));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_EKLZRest(void)
{
  long Value;
  this->get_EKLZRest((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryFullJournal"), DISPID(422));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt10DispT<T>::QueryFullJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryFullJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFullJournal"), DISPID(423));
  TAutoArgs<1> _args;
  _args[1] = FullJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEKLZData"), DISPID(424));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastBuyingSum"), DISPID(425));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt10DispT<T>::get_LastBuyingSum(void)
{
  CURRENCY Value;
  this->get_LastBuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt10DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt10DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                       VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                       long Code/*[in]*/, long Adjustment/*[in]*/, 
                                       long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                       long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                       long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                     Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                     CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                     BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                     Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                      Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                       long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                       long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                       long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                       long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/
                                      , long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                    long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                   long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/
                                , long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                                long HOffset/*[in]*/, long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                        long Flags/*[in]*/, long HOffset/*[in]*/, 
                                        long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                               CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                               BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                               long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                  long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                   long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                   VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                   long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                  long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                VARIANT_BOOL FullJournal/*[in]*/, 
                                Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                      long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                      BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                          long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                          long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                           long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                       VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                    VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                      long TimeOff/*[in]*/, long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                  BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                     CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt10DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                      long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrt10DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrt10DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrt10DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt10DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt10DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt10DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrt10DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt10DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt10DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt10DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt10DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt10DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt10DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt10DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt10DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrt10DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrt10DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrt10DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt10DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                            BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                   BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                     long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                      long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrt10DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrt10DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrt10DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrt10DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIMercuryFPrtX10
// Interface: IMercuryFPrtX10
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMercuryFPrtX10T<T>::ReprintDocument(void)
{
  return (*this)->ReprintDocument();
}

// *********************************************************************//
// DispIntf:  IMercuryFPrtX10
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10ECF5F7-72AB-4B70-8BB9-4297AC4B8EC3}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::ReprintDocument()
{
  _TDispID _dispid(*this, OLETEXT("ReprintDocument"), DISPID(1201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::PrintEKL(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintEKL"), DISPID(1101));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::PrintEKL(long Flags/*[in]*/)
{
  long ReportNum;
  this->PrintEKL(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryEKLState(Mercfprtx_tlb::TxMercEKLState* State/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEKLState"), DISPID(1102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)State /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEKLState __fastcall
IMercuryFPrtX10DispT<T>::QueryEKLState(void)
{
  Mercfprtx_tlb::TxMercEKLState State;
  this->QueryEKLState((Mercfprtx_tlb::TxMercEKLState*)&State);
  return State;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetOperPassword(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                         BSTR OperPassword/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetOperPassword"), DISPID(1003));
  TAutoArgs<3> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = OperPassword /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::PrintHeader()
{
  _TDispID _dispid(*this, OLETEXT("PrintHeader"), DISPID(901));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryParameterBool(long ParamCode/*[in]*/, 
                                            VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterBool"), DISPID(801));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX10DispT<T>::QueryParameterBool(long ParamCode/*[in]*/)
{
  VARIANT_BOOL Value;
  this->QueryParameterBool(ParamCode, (VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryParameterInt(long ParamCode/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryParameterInt"), DISPID(802));
  TAutoArgs<1> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::QueryParameterInt(long ParamCode/*[in]*/)
{
  long Value;
  this->QueryParameterInt(ParamCode, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetParameterBool(long ParamCode/*[in]*/, VARIANT_BOOL ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterBool"), DISPID(803));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetParameterInt(long ParamCode/*[in]*/, long ParamValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameterInt"), DISPID(804));
  TAutoArgs<2> _args;
  _args[1] = ParamCode /*[VT_I4:0]*/;
  _args[2] = ParamValue /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::WriteGraphic(long Number/*[in]*/, long Width/*[in]*/, long Height/*[in]*/, 
                                      BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteGraphic"), DISPID(701));
  TAutoArgs<4> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  _args[2] = Width /*[VT_I4:0]*/;
  _args[3] = Height /*[VT_I4:0]*/;
  _args[4] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::PrintGraphic(long Width/*[in]*/, long Height/*[in]*/, BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintGraphic"), DISPID(702));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddRegNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddRegNumber"), DISPID(601));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::EKLZActivate()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivate"), DISPID(401));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::EKLZActivationReport()
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivationReport"), DISPID(402));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::EKLZDayReport(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayReport"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::EKLZReportByNum(VARIANT_BOOL IsFull/*[in]*/, long AStartNum/*[in]*/, 
                                         long AEndNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByNum"), DISPID(404));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartNum /*[VT_I4:0]*/;
  _args[3] = AEndNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::EKLZReportByDate(VARIANT_BOOL IsFull/*[in]*/, DATE AStartDate/*[in]*/, 
                                          DATE AEndDate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReportByDate"), DISPID(405));
  TAutoArgs<3> _args;
  _args[1] = IsFull /*[VT_BOOL:0]*/;
  _args[2] = AStartDate /*[VT_DATE:0]*/;
  _args[3] = AEndDate /*[VT_DATE:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::EKLZDocByNum(long Number/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDocByNum"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Number /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::EKLZControlByNum(long DayNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZControlByNum"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = DayNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::EKLZCloseArchive()
{
  _TDispID _dispid(*this, OLETEXT("EKLZCloseArchive"), DISPID(408));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::EKLZQueryStatus()
{
  _TDispID _dispid(*this, OLETEXT("EKLZQueryStatus"), DISPID(409));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryPaperJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPaperJournal"), DISPID(410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX10DispT<T>::QueryPaperJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryPaperJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetPaperJournal(VARIANT_BOOL PaperJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPaperJournal"), DISPID(411));
  TAutoArgs<1> _args;
  _args[1] = PaperJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_EKLZSupported(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZSupported"), DISPID(412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX10DispT<T>::get_EKLZSupported(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZSupported((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_EKLZActivated(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZActivated"), DISPID(413));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX10DispT<T>::get_EKLZActivated(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZActivated((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_EKLZOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZOper"), DISPID(414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX10DispT<T>::get_EKLZOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_EKLZOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_EKLZArchiving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZArchiving"), DISPID(415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX10DispT<T>::get_EKLZArchiving(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZArchiving((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_EKLZReporting(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZReporting"), DISPID(416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX10DispT<T>::get_EKLZReporting(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZReporting((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_EKLZDayOpened(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZDayOpened"), DISPID(417));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX10DispT<T>::get_EKLZDayOpened(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZDayOpened((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_EKLZFatalError(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZFatalError"), DISPID(418));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX10DispT<T>::get_EKLZFatalError(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZFatalError((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_EKLZAttention(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EKLZAttention"), DISPID(419));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX10DispT<T>::get_EKLZAttention(void)
{
  VARIANT_BOOL Value;
  this->get_EKLZAttention((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryFullJournal(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryFullJournal"), DISPID(501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX10DispT<T>::QueryFullJournal(void)
{
  VARIANT_BOOL Value;
  this->QueryFullJournal((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetFullJournal(VARIANT_BOOL FullJournal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFullJournal"), DISPID(502));
  TAutoArgs<1> _args;
  _args[1] = FullJournal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddEKLZData(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEKLZData"), DISPID(503));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_LastBuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastBuyingSum"), DISPID(504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX10DispT<T>::get_LastBuyingSum(void)
{
  CURRENCY Value;
  this->get_LastBuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryAutocut(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryAutocut"), DISPID(353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX10DispT<T>::QueryAutocut(void)
{
  VARIANT_BOOL Value;
  this->QueryAutocut((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetAutocut(VARIANT_BOOL Autocut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAutocut"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = Autocut /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryEconomicMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEconomicMode"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX10DispT<T>::QueryEconomicMode(void)
{
  VARIANT_BOOL Value;
  this->QueryEconomicMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetEconomicMode(VARIANT_BOOL EconomicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEconomicMode"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = EconomicMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_EcrSubVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrSubVersion"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_EcrSubVersion(void)
{
  long Value;
  this->get_EcrSubVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_BorderSize(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_BorderSize(void)
{
  long Value;
  this->get_BorderSize((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::set_BorderSize(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderSize"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_ShowState(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX10DispT<T>::get_ShowState(void)
{
  VARIANT_BOOL Value;
  this->get_ShowState((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::set_ShowState(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowState"), DISPID(1002));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX10DispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::Close(VARIANT_BOOL ForceAbort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = ForceAbort /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::OpenReceipt(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReceipt"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddReceiptItem(BSTR Desc/*[in]*/, CURRENCY Price/*[in]*/, 
                                        VARIANT_BOOL ItemIsTare/*[in]*/, long Department/*[in]*/, 
                                        long Code/*[in]*/, long Adjustment/*[in]*/, 
                                        long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                        long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, 
                                        long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptItem"), DISPID(204));
  TAutoArgs<11> _args;
  _args[1] = Desc /*[VT_BSTR:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::CancelReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CancelReceipt"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::CloseReceipt(BSTR Account/*[in]*/, 
                                      Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                      CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                      BSTR PayInfo/*[in]*/, long CopiesNum/*[in]*/, 
                                      Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseReceipt"), DISPID(206));
  TAutoArgs<7> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[3] = PayCash /*[VT_CY:0]*/;
  _args[4] = PayCashless /*[VT_CY:0]*/;
  _args[5] = PayInfo /*[VT_BSTR:0]*/;
  _args[6] = CopiesNum /*[VT_I4:0]*/;
  _args[7] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::OpenCustomDoc(VARIANT_BOOL UseForm/*[in]*/, 
                                       Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCustomDoc"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = UseForm /*[VT_BOOL:0]*/;
  _args[2] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::CancelCustomDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelCustomDoc"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::CloseCustomDoc(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                        long Flags/*[in]*/, long HCopiesNum/*[in]*/, 
                                        long VCopiesNum/*[in]*/, long VOrigOffset/*[in]*/, 
                                        long HCopyOffset/*[in]*/, long VCopyOffset/*[in]*/, 
                                        long FiscalCopy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseCustomDoc"), DISPID(209));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HCopiesNum /*[VT_I4:0]*/;
  _args[4] = VCopiesNum /*[VT_I4:0]*/;
  _args[5] = VOrigOffset /*[VT_I4:0]*/;
  _args[6] = HCopyOffset /*[VT_I4:0]*/;
  _args[7] = VCopyOffset /*[VT_I4:0]*/;
  _args[8] = FiscalCopy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::OpenFiscalDoc(Mercfprtx_tlb::TxMercOperType Oper/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFiscalDoc"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Oper /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::CancelFiscalDoc(VARIANT_BOOL BufferOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelFiscalDoc"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = BufferOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::PrintFiscalDocBuffer()
{
  _TDispID _dispid(*this, OLETEXT("PrintFiscalDocBuffer"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::CloseFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseFiscalDoc"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::CopyFiscalDoc()
{
  _TDispID _dispid(*this, OLETEXT("CopyFiscalDoc"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddSerialNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSerialNumber"), DISPID(215));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddHeaderLine(long LineNum/*[in]*/, long Flags/*[in]*/, 
                                       long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHeaderLine"), DISPID(216));
  TAutoArgs<4> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddDateTime(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDateTime"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddOperInfo(Mercfprtx_tlb::TxMercOperInfo OperInfo/*[in]*/, 
                                     long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOperInfo"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = (int)OperInfo /*[VT_USERDEFINED:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddDocNumber(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocNumber"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddReceiptNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReceiptNumber"), DISPID(220));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddAccount(BSTR Account/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                    long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAccount"), DISPID(221));
  TAutoArgs<4> _args;
  _args[1] = Account /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddTaxPayerNumber(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                           long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxPayerNumber"), DISPID(222));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddItem(Mercfprtx_tlb::TxMercItemType ItemType/*[in]*/, 
                                 CURRENCY Price/*[in]*/, VARIANT_BOOL ItemIsTare/*[in]*/, 
                                 long Department/*[in]*/, long Code/*[in]*/, long Adjustment/*[in]*/
                                 , long Quantity/*[in]*/, long QuantityPrec/*[in]*/, 
                                 long TaxIndex/*[in]*/, BSTR UnitName/*[in]*/, long Flags/*[in]*/, 
                                 long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                 long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(223));
  TAutoArgs<14> _args;
  _args[1] = (int)ItemType /*[VT_USERDEFINED:0]*/;
  _args[2] = Price /*[VT_CY:0]*/;
  _args[3] = ItemIsTare /*[VT_BOOL:0]*/;
  _args[4] = Department /*[VT_I4:0]*/;
  _args[5] = Code /*[VT_I4:0]*/;
  _args[6] = Adjustment /*[VT_I4:0]*/;
  _args[7] = Quantity /*[VT_I4:0]*/;
  _args[8] = QuantityPrec /*[VT_I4:0]*/;
  _args[9] = TaxIndex /*[VT_I4:0]*/;
  _args[10] = UnitName /*[VT_BSTR:0]*/;
  _args[11] = Flags /*[VT_I4:0]*/;
  _args[12] = HOffset /*[VT_I4:0]*/;
  _args[13] = VOffset /*[VT_I4:0]*/;
  _args[14] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddDocPercentAdj(long Value/*[in]*/, long TaxIndex/*[in]*/, 
                                          long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocPercentAdj"), DISPID(224));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddDocAmountAdj(CURRENCY Value/*[in]*/, long TaxIndex/*[in]*/, 
                                         long Flags/*[in]*/, long HOffset/*[in]*/, 
                                         long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDocAmountAdj"), DISPID(225));
  TAutoArgs<6> _args;
  _args[1] = Value /*[VT_CY:0]*/;
  _args[2] = TaxIndex /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  _args[4] = HOffset /*[VT_I4:0]*/;
  _args[5] = VOffset /*[VT_I4:0]*/;
  _args[6] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddTotal(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                  long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddPay(Mercfprtx_tlb::TxMercPayType PayType/*[in]*/, 
                                CURRENCY PayCash/*[in]*/, CURRENCY PayCashless/*[in]*/, 
                                BSTR PayInfo/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPay"), DISPID(227));
  TAutoArgs<8> _args;
  _args[1] = (int)PayType /*[VT_USERDEFINED:0]*/;
  _args[2] = PayCash /*[VT_CY:0]*/;
  _args[3] = PayCashless /*[VT_CY:0]*/;
  _args[4] = PayInfo /*[VT_BSTR:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  _args[6] = HOffset /*[VT_I4:0]*/;
  _args[7] = VOffset /*[VT_I4:0]*/;
  _args[8] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddChange(long Flags/*[in]*/, long HOffset/*[in]*/, long VOffset/*[in]*/, 
                                   long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChange"), DISPID(228));
  TAutoArgs<4> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  _args[4] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddTaxSum(long TaxIndex/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                   long VOffset/*[in]*/, long RightOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTaxSum"), DISPID(229));
  TAutoArgs<5> _args;
  _args[1] = TaxIndex /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  _args[5] = RightOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddFiscalSign(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                       long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFiscalSign"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddBarcode(long Mask1/*[in]*/, long Mask2/*[in]*/, long Mask3/*[in]*/, 
                                    long Mask4/*[in]*/, long Mask5/*[in]*/, 
                                    VARIANT_BOOL DoubleDensity/*[in]*/, long Flags/*[in]*/, 
                                    long HOffset/*[in]*/, long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBarcode"), DISPID(231));
  TAutoArgs<9> _args;
  _args[1] = Mask1 /*[VT_I4:0]*/;
  _args[2] = Mask2 /*[VT_I4:0]*/;
  _args[3] = Mask3 /*[VT_I4:0]*/;
  _args[4] = Mask4 /*[VT_I4:0]*/;
  _args[5] = Mask5 /*[VT_I4:0]*/;
  _args[6] = DoubleDensity /*[VT_BOOL:0]*/;
  _args[7] = Flags /*[VT_I4:0]*/;
  _args[8] = HOffset /*[VT_I4:0]*/;
  _args[9] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddCustom(BSTR Text/*[in]*/, long Flags/*[in]*/, long HOffset/*[in]*/, 
                                   long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustom"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = HOffset /*[VT_I4:0]*/;
  _args[4] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::RepeatOperation()
{
  _TDispID _dispid(*this, OLETEXT("RepeatOperation"), DISPID(233));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::OpenDay(long OperNum/*[in]*/, BSTR OperName/*[in]*/, 
                                 VARIANT_BOOL FullJournal/*[in]*/, 
                                 Mercfprtx_tlb::TxMercProtocol AProtocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDay"), DISPID(234));
  TAutoArgs<4> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = OperName /*[VT_BSTR:0]*/;
  _args[3] = FullJournal /*[VT_BOOL:0]*/;
  _args[4] = (int)AProtocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::ZReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZReport"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::ZReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->ZReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                       BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/, 
                                       long* RewriteNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalRewrite"), DISPID(236));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = RegNum /*[VT_BSTR:0]*/;
  _args[3] = TaxPayerNum /*[VT_BSTR:0]*/;
  _args[4] = NewInspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(RewriteNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::FiscalRewrite(BSTR InspPswd/*[in]*/, BSTR RegNum/*[in]*/, 
                                       BSTR TaxPayerNum/*[in]*/, BSTR NewInspPswd/*[in]*/)
{
  long RewriteNum;
  this->FiscalRewrite(InspPswd, RegNum, TaxPayerNum, NewInspPswd, (long*)&RewriteNum);
  return RewriteNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           long AStartNum/*[in]*/, long AEndNum/*[in]*/, 
                                           long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByNum"), DISPID(237));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartNum /*[VT_I4:0]*/;
  _args[4] = AEndNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::FiscalReportByNum(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                           long AStartNum/*[in]*/, long AEndNum/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByNum(InspPswd, PrintFull, AStartNum, AEndNum, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                            DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/, 
                                            long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportByDate"), DISPID(238));
  TAutoArgs<4> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  _args[2] = PrintFull /*[VT_BOOL:0]*/;
  _args[3] = AStartDate /*[VT_DATE:0]*/;
  _args[4] = AEndDate /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::FiscalReportByDate(BSTR InspPswd/*[in]*/, VARIANT_BOOL PrintFull/*[in]*/, 
                                            DATE AStartDate/*[in]*/, DATE AEndDate/*[in]*/)
{
  long AReportNum;
  this->FiscalReportByDate(InspPswd, PrintFull, AStartDate, AEndDate, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/, long* AReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FiscalReportAll"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = InspPswd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(AReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::FiscalReportAll(BSTR InspPswd/*[in]*/)
{
  long AReportNum;
  this->FiscalReportAll(InspPswd, (long*)&AReportNum);
  return AReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::FeedAndCut(long LineCount/*[in]*/, VARIANT_BOOL CutAfterFeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedAndCut"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = LineCount /*[VT_I4:0]*/;
  _args[2] = CutAfterFeed /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::PrintNonFiscal(BSTR Data/*[in]*/, VARIANT_BOOL OpenDoc/*[in]*/, 
                                        VARIANT_BOOL CloseDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintNonFiscal"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenDoc /*[VT_BOOL:0]*/;
  _args[3] = CloseDoc /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::ShowDisplay(BSTR Data/*[in]*/, VARIANT_BOOL OpenMode/*[in]*/, 
                                     VARIANT_BOOL CloseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(242));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  _args[2] = OpenMode /*[VT_BOOL:0]*/;
  _args[3] = CloseMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetDisplayBaudRate(long BaudRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayBaudRate"), DISPID(243));
  TAutoArgs<1> _args;
  _args[1] = BaudRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::ExternalPulse(long Channel/*[in]*/, long TimeOn/*[in]*/, 
                                       long TimeOff/*[in]*/, long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalPulse"), DISPID(244));
  TAutoArgs<4> _args;
  _args[1] = Channel /*[VT_I4:0]*/;
  _args[2] = TimeOn /*[VT_I4:0]*/;
  _args[3] = TimeOff /*[VT_I4:0]*/;
  _args[4] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryDevExStatus()
{
  _TDispID _dispid(*this, OLETEXT("QueryDevExStatus"), DISPID(245));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryFirmwareInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryFirmwareInfo"), DISPID(246));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetHeader(BSTR Line1/*[in]*/, BSTR Line2/*[in]*/, BSTR Line3/*[in]*/, 
                                   BSTR Line4/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeader"), DISPID(247));
  TAutoArgs<4> _args;
  _args[1] = Line1 /*[VT_BSTR:0]*/;
  _args[2] = Line2 /*[VT_BSTR:0]*/;
  _args[3] = Line3 /*[VT_BSTR:0]*/;
  _args[4] = Line4 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetTax(long Index/*[in]*/, BSTR TaxName/*[in]*/, long TaxRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTax"), DISPID(248));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = TaxName /*[VT_BSTR:0]*/;
  _args[3] = TaxRate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryTax(long Index/*[in]*/, long* ATaxRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTax"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ATaxRate /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::QueryTax(long Index/*[in]*/)
{
  long ATaxRate;
  this->QueryTax(Index, (long*)&ATaxRate);
  return ATaxRate;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/, 
                                      CURRENCY* ASum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryCounter"), DISPID(250));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = NoRequest /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(ASum /*[VT_CY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX10DispT<T>::QueryCounter(long Index/*[in]*/, VARIANT_BOOL NoRequest/*[in]*/)
{
  CURRENCY ASum;
  this->QueryCounter(Index, NoRequest, (CURRENCY*)&ASum);
  return ASum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SynchronizeEcrDateTime()
{
  _TDispID _dispid(*this, OLETEXT("SynchronizeEcrDateTime"), DISPID(251));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryResourceInfo(VARIANT_BOOL PrintInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryResourceInfo"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = PrintInfo /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryLastDocInfo()
{
  _TDispID _dispid(*this, OLETEXT("QueryLastDocInfo"), DISPID(253));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetParameters(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/, 
                                       long PrnTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParameters"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = PrnTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_EcrModel(Mercfprtx_tlb::TxMercEcrModel* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrModel"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercEcrModel __fastcall
IMercuryFPrtX10DispT<T>::get_EcrModel(void)
{
  Mercfprtx_tlb::TxMercEcrModel Value;
  this->get_EcrModel((Mercfprtx_tlb::TxMercEcrModel*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_EcrVersion(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrVersion"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_EcrVersion(void)
{
  long Value;
  this->get_EcrVersion((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_Generation(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Generation"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_Generation(void)
{
  long Value;
  this->get_Generation((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_Protocol(Mercfprtx_tlb::TxMercProtocol* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercProtocol __fastcall
IMercuryFPrtX10DispT<T>::get_Protocol(void)
{
  Mercfprtx_tlb::TxMercProtocol Value;
  this->get_Protocol((Mercfprtx_tlb::TxMercProtocol*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_EcrStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatus"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_EcrStatus(void)
{
  long Value;
  this->get_EcrStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_EcrStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrStatusMask"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_EcrStatusMask(void)
{
  long Value;
  this->get_EcrStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_DevStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatus"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_DevStatus(void)
{
  long Value;
  this->get_DevStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_DevStatusMask(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevStatusMask"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_DevStatusMask(void)
{
  long Value;
  this->get_DevStatusMask((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_DocStatus(Mercfprtx_tlb::TxMercDocStatus* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocStatus"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercDocStatus __fastcall
IMercuryFPrtX10DispT<T>::get_DocStatus(void)
{
  Mercfprtx_tlb::TxMercDocStatus Value;
  this->get_DocStatus((Mercfprtx_tlb::TxMercDocStatus*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_CurrentOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentOper"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX10DispT<T>::get_CurrentOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_CurrentOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_PortNum(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_PortNum(void)
{
  long Value;
  this->get_PortNum((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::set_PortNum(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PortNum"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_BaudRate(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_BaudRate(void)
{
  long Value;
  this->get_BaudRate((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::set_BaudRate(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaudRate"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_Password(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::get_Password(void)
{
  BSTR Value;
  this->get_Password((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_InternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_InternalTimeout(void)
{
  long Value;
  this->get_InternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::set_InternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalTimeout"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_ExternalTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_ExternalTimeout(void)
{
  long Value;
  this->get_ExternalTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::set_ExternalTimeout(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExternalTimeout"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryHeaderLine(long LineNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderLine"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = LineNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::QueryHeaderLine(long LineNum/*[in]*/)
{
  BSTR Value;
  this->QueryHeaderLine(LineNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QuerySerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QuerySerialNumber"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::QuerySerialNumber(void)
{
  BSTR Value;
  this->QuerySerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetSerialNumber(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSerialNumber"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryTaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTaxPayerNumber"), DISPID(273));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::QueryTaxPayerNumber(void)
{
  BSTR Value;
  this->QueryTaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryRegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryRegNumber"), DISPID(274));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::QueryRegNumber(void)
{
  BSTR Value;
  this->QueryRegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryEcrDateTime(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryEcrDateTime"), DISPID(275));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX10DispT<T>::QueryEcrDateTime(void)
{
  DATE Value;
  this->QueryEcrDateTime((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryDepartName(long DepartNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDepartName"), DISPID(276));
  TAutoArgs<1> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::QueryDepartName(long DepartNum/*[in]*/)
{
  BSTR Value;
  this->QueryDepartName(DepartNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetDepartName(long DepartNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDepartName"), DISPID(277));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryTitle(long TitleNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryTitle"), DISPID(278));
  TAutoArgs<1> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::QueryTitle(long TitleNum/*[in]*/)
{
  BSTR Value;
  this->QueryTitle(TitleNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetTitle(long TitleNum/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTitle"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = TitleNum /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX10DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(280));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_ConnState(Mercfprtx_tlb::TxMercConnState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnState"), DISPID(281));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercConnState __fastcall
IMercuryFPrtX10DispT<T>::get_ConnState(void)
{
  Mercfprtx_tlb::TxMercConnState Value;
  this->get_ConnState((Mercfprtx_tlb::TxMercConnState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_SaleSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaleSum"), DISPID(282));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX10DispT<T>::get_SaleSum(void)
{
  CURRENCY Value;
  this->get_SaleSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_BuyingSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyingSum"), DISPID(283));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX10DispT<T>::get_BuyingSum(void)
{
  CURRENCY Value;
  this->get_BuyingSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_SerialNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialNumber"), DISPID(284));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::get_SerialNumber(void)
{
  BSTR Value;
  this->get_SerialNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_RegNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegNumber"), DISPID(285));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::get_RegNumber(void)
{
  BSTR Value;
  this->get_RegNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_TaxPayerNumber(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxPayerNumber"), DISPID(286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::get_TaxPayerNumber(void)
{
  BSTR Value;
  this->get_TaxPayerNumber((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_HeaderLine1(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine1"), DISPID(287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::get_HeaderLine1(void)
{
  BSTR Value;
  this->get_HeaderLine1((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_HeaderLine2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine2"), DISPID(288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::get_HeaderLine2(void)
{
  BSTR Value;
  this->get_HeaderLine2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_HeaderLine3(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine3"), DISPID(289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::get_HeaderLine3(void)
{
  BSTR Value;
  this->get_HeaderLine3((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_HeaderLine4(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderLine4"), DISPID(290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::get_HeaderLine4(void)
{
  BSTR Value;
  this->get_HeaderLine4((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_StartDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX10DispT<T>::get_StartDate(void)
{
  DATE Value;
  this->get_StartDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_EndDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX10DispT<T>::get_EndDate(void)
{
  DATE Value;
  this->get_EndDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_StartNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartNumber"), DISPID(293));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_StartNumber(void)
{
  long Value;
  this->get_StartNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_EndNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndNumber"), DISPID(294));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_EndNumber(void)
{
  long Value;
  this->get_EndNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_ReportDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportDate"), DISPID(295));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX10DispT<T>::get_ReportDate(void)
{
  DATE Value;
  this->get_ReportDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_ModelName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModelName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::get_ModelName(void)
{
  BSTR Value;
  this->get_ModelName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_Manufacturer(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manufacturer"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::get_Manufacturer(void)
{
  BSTR Value;
  this->get_Manufacturer((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_FirmwareVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirmwareVersion"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::get_FirmwareVersion(void)
{
  BSTR Value;
  this->get_FirmwareVersion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_TaxName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxName"), DISPID(299));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::get_TaxName(void)
{
  BSTR Value;
  this->get_TaxName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_TaxDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaxDate"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX10DispT<T>::get_TaxDate(void)
{
  DATE Value;
  this->get_TaxDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_CounterCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CounterCount"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_CounterCount(void)
{
  long Value;
  this->get_CounterCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_RewritesRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewritesRemain"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_RewritesRemain(void)
{
  long Value;
  this->get_RewritesRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_DaysRemain(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DaysRemain"), DISPID(303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_DaysRemain(void)
{
  long Value;
  this->get_DaysRemain((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_LastFiscalReport(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastFiscalReport"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_LastFiscalReport(void)
{
  long Value;
  this->get_LastFiscalReport((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_LastDayClosing(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDayClosing"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_LastDayClosing(void)
{
  long Value;
  this->get_LastDayClosing((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_DayDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayDate"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX10DispT<T>::get_DayDate(void)
{
  DATE Value;
  this->get_DayDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_LastDocOper(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocOper"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX10DispT<T>::get_LastDocOper(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocOper((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_LastDocNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocNumber"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_LastDocNumber(void)
{
  long Value;
  this->get_LastDocNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_LastRecNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastRecNumber"), DISPID(309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_LastRecNumber(void)
{
  long Value;
  this->get_LastRecNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_LastDocType(Mercfprtx_tlb::TxMercOperType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocType"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mercfprtx_tlb::TxMercOperType __fastcall
IMercuryFPrtX10DispT<T>::get_LastDocType(void)
{
  Mercfprtx_tlb::TxMercOperType Value;
  this->get_LastDocType((Mercfprtx_tlb::TxMercOperType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_LastDocSum(CURRENCY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocSum"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMercuryFPrtX10DispT<T>::get_LastDocSum(void)
{
  CURRENCY Value;
  this->get_LastDocSum((CURRENCY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_LastDocDate(DATE* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocDate"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMercuryFPrtX10DispT<T>::get_LastDocDate(void)
{
  DATE Value;
  this->get_LastDocDate((DATE*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_RetryOperation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX10DispT<T>::get_RetryOperation(void)
{
  VARIANT_BOOL Value;
  this->get_RetryOperation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::set_RetryOperation(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetryOperation"), DISPID(313));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_ErrCode(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCode"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_ErrCode(void)
{
  long Value;
  this->get_ErrCode((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_ErrCodeEx(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrCodeEx"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_ErrCodeEx(void)
{
  long Value;
  this->get_ErrCodeEx((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_ErrMessage(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrMessage"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::get_ErrMessage(void)
{
  BSTR Value;
  this->get_ErrMessage((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::CheckEcrStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckEcrStatus"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::CheckEcrStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckEcrStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::CheckDevStatus(long Flag/*[in]*/, long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckDevStatus"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = Flag /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::CheckDevStatus(long Flag/*[in]*/)
{
  long Value;
  this->CheckDevStatus(Flag, (long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_EcrHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrHour"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_EcrHour(void)
{
  long Value;
  this->get_EcrHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_EcrMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EcrMin"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_EcrMin(void)
{
  long Value;
  this->get_EcrMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_ReportHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportHour"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_ReportHour(void)
{
  long Value;
  this->get_ReportHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_ReportMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportMin"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_ReportMin(void)
{
  long Value;
  this->get_ReportMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_DayHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayHour"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_DayHour(void)
{
  long Value;
  this->get_DayHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_DayMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayMin"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_DayMin(void)
{
  long Value;
  this->get_DayMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_LastDocHour(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocHour"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_LastDocHour(void)
{
  long Value;
  this->get_LastDocHour((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_LastDocMin(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastDocMin"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_LastDocMin(void)
{
  long Value;
  this->get_LastDocMin((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddGraphicHeader(long Flags/*[in]*/, long HOffset/*[in]*/, 
                                          long VOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGraphicHeader"), DISPID(327));
  TAutoArgs<3> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  _args[2] = HOffset /*[VT_I4:0]*/;
  _args[3] = VOffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetProtocol(Mercfprtx_tlb::TxMercProtocol Protocol/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetProtocol"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = (int)Protocol /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetPrinterTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterTimeout"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetDisplayTimeout(long Timeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayTimeout"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetPrinterContrast(long Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPrinterContrast"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetLeading(long Leading/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLeading"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = Leading /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetCutterDisabled(VARIANT_BOOL Disabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCutterDisabled"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = Disabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetNarrowPaper(VARIANT_BOOL Narrow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNarrowPaper"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = Narrow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryPrinterTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterTimeout"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::QueryPrinterTimeout(void)
{
  long Value;
  this->QueryPrinterTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryDisplayTimeout(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryDisplayTimeout"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::QueryDisplayTimeout(void)
{
  long Value;
  this->QueryDisplayTimeout((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryPrinterContrast(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryPrinterContrast"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::QueryPrinterContrast(void)
{
  long Value;
  this->QueryPrinterContrast((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryLeading(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryLeading"), DISPID(338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::QueryLeading(void)
{
  long Value;
  this->QueryLeading((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::EnableGraphicHeader(long Width/*[in]*/, long Height/*[in]*/, 
                                             BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableGraphicHeader"), DISPID(339));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  _args[2] = Height /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::DisableGraphicHeader()
{
  _TDispID _dispid(*this, OLETEXT("DisableGraphicHeader"), DISPID(340));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::AddLicence(Mercfprtx_tlb::TxMercLicenceType LicType/*[in]*/, 
                                    BSTR Licence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLicence"), DISPID(341));
  TAutoArgs<2> _args;
  _args[1] = (int)LicType /*[VT_USERDEFINED:0]*/;
  _args[2] = Licence /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::XReport(long Flags/*[in]*/, long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReport"), DISPID(342));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::XReport(long Flags/*[in]*/)
{
  long ReportNum;
  this->XReport(Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/, 
                                      long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByDep"), DISPID(343));
  TAutoArgs<2> _args;
  _args[1] = DepartNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::XReportByDep(long DepartNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByDep(DepartNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/, 
                                       long* ReportNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XReportByOper"), DISPID(344));
  TAutoArgs<2> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ReportNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::XReportByOper(long OperNum/*[in]*/, long Flags/*[in]*/)
{
  long ReportNum;
  this->XReportByOper(OperNum, Flags, (long*)&ReportNum);
  return ReportNum;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryHeaderAlignment(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryHeaderAlignment"), DISPID(345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMercuryFPrtX10DispT<T>::QueryHeaderAlignment(void)
{
  VARIANT_BOOL Value;
  this->QueryHeaderAlignment((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryOperNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperNumber"), DISPID(346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::QueryOperNumber(void)
{
  long Value;
  this->QueryOperNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::QueryOperName(long OperNum/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryOperName"), DISPID(347));
  TAutoArgs<1> _args;
  _args[1] = OperNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::QueryOperName(long OperNum/*[in]*/)
{
  BSTR Value;
  this->QueryOperName(OperNum, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::SetHeaderAlignment(VARIANT_BOOL Aligned/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHeaderAlignment"), DISPID(348));
  TAutoArgs<1> _args;
  _args[1] = Aligned /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::TestConnection()
{
  _TDispID _dispid(*this, OLETEXT("TestConnection"), DISPID(349));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_VersionNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionNumber"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_VersionNumber(void)
{
  long Value;
  this->get_VersionNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_BuildNumber(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMercuryFPrtX10DispT<T>::get_BuildNumber(void)
{
  long Value;
  this->get_BuildNumber((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::get_Version(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMercuryFPrtX10DispT<T>::get_Version(void)
{
  BSTR Value;
  this->get_Version((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IMercuryFPrtX10DispT<T>::set_Version(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(352));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : MercuryFPrtCOM
// Interface: TCOMIMercuryFPrt10
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIMercuryFPrt10, IMercuryFPrt10, &CLSID_MercuryFPrtCOM, &IID_IMercuryFPrt10> CoMercuryFPrtCOM;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MercuryFPrtCOM
// Event Interface : IMercuryFPrtEvents
// *********************************************************************//
template <class T>
class TEvents_MercuryFPrtCOM : public IConnectionPointImpl<T,
                                                 &DIID_IMercuryFPrtEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnNoResponse(void);
  void            Fire_OnStatusUpdate(void);
  HRESULT         Fire_OnConnStateUpdate(void);
  HRESULT         Fire_OnPrinterError(void);
  HRESULT         Fire_OnDisplayError(void);
protected:
  IMercuryFPrtEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MercuryFPrtCOM<T>::Fire_OnNoResponse(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNoResponse();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MercuryFPrtCOM<T>::Fire_OnStatusUpdate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnStatusUpdate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_MercuryFPrtCOM<T>::Fire_OnConnStateUpdate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnStateUpdate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_MercuryFPrtCOM<T>::Fire_OnPrinterError(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnPrinterError();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_MercuryFPrtCOM<T>::Fire_OnDisplayError(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisplayError();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MercuryFPrtX
// Event Interface : IMercuryFPrtEvents
// *********************************************************************//
template <class T>
class TEvents_MercuryFPrtX : public IConnectionPointImpl<T,
                                                 &DIID_IMercuryFPrtEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnNoResponse(void);
  void            Fire_OnStatusUpdate(void);
  HRESULT         Fire_OnConnStateUpdate(void);
  HRESULT         Fire_OnPrinterError(void);
  HRESULT         Fire_OnDisplayError(void);
protected:
  IMercuryFPrtEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MercuryFPrtX<T>::Fire_OnNoResponse(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNoResponse();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MercuryFPrtX<T>::Fire_OnStatusUpdate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnStatusUpdate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_MercuryFPrtX<T>::Fire_OnConnStateUpdate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnStateUpdate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_MercuryFPrtX<T>::Fire_OnPrinterError(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnPrinterError();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_MercuryFPrtX<T>::Fire_OnDisplayError(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisplayError();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Mercfprtx_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Mercfprtx_tlb;
#endif

#pragma option pop

#endif // MercFPrtX_TLBH
