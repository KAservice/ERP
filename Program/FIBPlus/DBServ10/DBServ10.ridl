// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// This file is generated by the Type Library importer or Type Libary Editor. 
// Barring syntax errors, the Editor will parse modifications made to the file. 
// However, when applying changes via the Editor this file will be regenerated  
// and comments or formatting changes will be lost.                             
// ************************************************************************ //
// File generated on 11.09.2010 14:57:30 (- $Rev: 12980 $, 2751296).

[
  uuid(3F05B876-7B55-41DD-AB32-DA8BF9369FB4), 
  version(1.0), 
  helpstring("DBServ10 Library")
    
]
library DBServ10
{

  importlib("stdole2.tlb");

  interface IOleDMGurAllDoc;
  coclass OleDMGurAllDoc;
  interface IOleDM;
  coclass OleDM;
  interface IOleDMSprSklad;
  coclass OleDMSprSklad;
  interface IOleDMSprFirm;
  coclass OleDMSprFirm;
  interface IOleDMSprNom;
  coclass OleDMSprNom;
  interface IOleDMSprEd;
  coclass OleDMSprEd;
  interface IOleDMDocRepKKM;
  coclass OleDMDocRepKKM;
  interface IOleDMSprGrpNom;
  coclass OleDMSprGrpNom;
  interface IOleDMSprTypePrice;
  coclass OleDMSprTypePrice;
  interface IOleDMSprPrice;
  coclass OleDMSprPrice;
  interface IOleDMDocPer;
  coclass OleDMDocPer;
  interface IOleDMDocPrihNakl;
  coclass OleDMDocPrihNakl;
  interface IOleDMDocReal;
  coclass OleDMDocReal;
  interface IOleDMDocSpisNom;
  coclass OleDMDocSpisNom;
  interface IOleDMDocOstNom;
  coclass OleDMDocOstNom;
  interface IOleDMSprInfBase;
  coclass OleDMSprInfBase;


  [
    uuid(A02C7199-FA6C-428C-9023-6A07FC678FB3), 
    version(1.0), 
    helpstring("Dispatch interface for OleDMGurAllDoc Object"), 
    dual, 
    oleautomation
  ]
  interface IOleDMGurAllDoc: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall IdDoc([out, retval] BSTR* Value);
    [propput, id(0x00000001)]
    HRESULT _stdcall IdDoc([in] BSTR Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall PosDoc([out, retval] BSTR* Value);
    [propput, id(0x00000002)]
    HRESULT _stdcall PosDoc([in] BSTR Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall PrDoc([out, retval] int* Value);
    [propput, id(0x00000003)]
    HRESULT _stdcall PrDoc([in] int Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall NumDoc([out, retval] int* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall NumDoc([in] int Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall IdFirmDoc([out, retval] BSTR* Value);
    [propput, id(0x00000005)]
    HRESULT _stdcall IdFirmDoc([in] BSTR Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall IdSklDoc([out, retval] BSTR* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall IdSklDoc([in] BSTR Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall IdKlDoc([out, retval] BSTR* Value);
    [propput, id(0x00000007)]
    HRESULT _stdcall IdKlDoc([in] BSTR Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall SumDoc([out, retval] double* Value);
    [propput, id(0x00000008)]
    HRESULT _stdcall SumDoc([in] double Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall NameFirm([out, retval] BSTR* Value);
    [propput, id(0x00000009)]
    HRESULT _stdcall NameFirm([in] BSTR Value);
    [propget, id(0x0000000A)]
    HRESULT _stdcall NameSklad([out, retval] BSTR* Value);
    [propput, id(0x0000000A)]
    HRESULT _stdcall NameSklad([in] BSTR Value);
    [propget, id(0x0000000B)]
    HRESULT _stdcall NameKlient([out, retval] BSTR* Value);
    [propput, id(0x0000000B)]
    HRESULT _stdcall NameKlient([in] BSTR Value);
    [propget, id(0x0000000C)]
    HRESULT _stdcall NameUser([out, retval] BSTR* Value);
    [propput, id(0x0000000C)]
    HRESULT _stdcall NameUser([in] BSTR Value);
    [propget, id(0x0000000D)]
    HRESULT _stdcall IdUserDoc([out, retval] BSTR* Value);
    [propput, id(0x0000000D)]
    HRESULT _stdcall IdUserDoc([in] BSTR Value);
    [propget, id(0x0000000E)]
    HRESULT _stdcall TDoc([out, retval] BSTR* Value);
    [propput, id(0x0000000E)]
    HRESULT _stdcall TDoc([in] BSTR Value);
    [propget, id(0x0000000F)]
    HRESULT _stdcall TableEOF([out, retval] int* Value);
    [id(0x00000010)]
    HRESULT _stdcall TableFirst(void);
    [id(0x00000011)]
    HRESULT _stdcall TableNext(void);
    [id(0x00000012)]
    HRESULT _stdcall OpenTable(void);
    [id(0x00000013)]
    HRESULT _stdcall UpdateTable(void);
    [id(0x00000014)]
    HRESULT _stdcall FindDocPoIdDog([in] int iddogovor);
    [propget, id(0x00000015)]
    HRESULT _stdcall StringTypeDoc([out, retval] BSTR* Value);
    [propput, id(0x00000015)]
    HRESULT _stdcall StringTypeDoc([in] BSTR Value);
    [propget, id(0x00000016)]
    HRESULT _stdcall OtborVkl([out, retval] int* Value);
    [propput, id(0x00000016)]
    HRESULT _stdcall OtborVkl([in] int Value);
    [propget, id(0x00000017)]
    HRESULT _stdcall PosNach([out, retval] BSTR* Value);
    [propput, id(0x00000017)]
    HRESULT _stdcall PosNach([in] BSTR Value);
    [propget, id(0x00000018)]
    HRESULT _stdcall PosCon([out, retval] BSTR* Value);
    [propput, id(0x00000018)]
    HRESULT _stdcall PosCon([in] BSTR Value);
    [propget, id(0x00000019)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x0000001A)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
  };

  [
    uuid(1A440201-6AC2-4B65-A0E7-1092675C2A3F), 
    version(1.0), 
    helpstring("Dispatch interface for OleDM Object"), 
    dual, 
    oleautomation
  ]
  interface IOleDM: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall ConnectString([out, retval] BSTR* Value);
    [propput, id(0x00000001)]
    HRESULT _stdcall ConnectString([in] BSTR Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall NameUser([out, retval] BSTR* Value);
    [propput, id(0x00000002)]
    HRESULT _stdcall NameUser([in] BSTR Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall PasswordUser([out, retval] BSTR* Value);
    [propput, id(0x00000003)]
    HRESULT _stdcall PasswordUser([in] BSTR Value);
    [id(0x00000004)]
    HRESULT _stdcall GlobConnect(void);
    [propget, id(0x00000005)]
    HRESULT _stdcall ConnectOK([out, retval] int* Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall OleTextError([out, retval] BSTR* Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall OleCodeError([out, retval] int* Value);
  };

  [
    uuid(5B2971DD-B19A-4FC3-BEDC-3E05B157FE9A), 
    version(1.0), 
    helpstring("Dispatch interface for OleDMSprSklad Object"), 
    dual, 
    oleautomation
  ]
  interface IOleDMSprSklad: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall IdSklad([out, retval] BSTR* Value);
    [propput, id(0x00000001)]
    HRESULT _stdcall IdSklad([in] BSTR Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall NameSklad([out, retval] BSTR* Value);
    [propput, id(0x00000002)]
    HRESULT _stdcall NameSklad([in] BSTR Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall MolSklad([out, retval] BSTR* Value);
    [propput, id(0x00000003)]
    HRESULT _stdcall MolSklad([in] BSTR Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall AdrSklad([out, retval] BSTR* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall AdrSklad([in] BSTR Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall TSklad([out, retval] int* Value);
    [propput, id(0x00000005)]
    HRESULT _stdcall TSklad([in] int Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall GID_Sklad([out, retval] BSTR* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall GID_Sklad([in] BSTR Value);
    [id(0x00000008)]
    HRESULT _stdcall OpenElement([in] BSTR Id);
    [id(0x00000009)]
    HRESULT _stdcall NewElement(void);
    [id(0x0000000A)]
    HRESULT _stdcall SaveElement(void);
    [id(0x0000000B)]
    HRESULT _stdcall DeleteElement([in] BSTR Id);
    [id(0x0000000C)]
    HRESULT _stdcall GetIdElement([in] BSTR gid, [out, retval] BSTR* Id);
    [id(0x0000000D)]
    HRESULT _stdcall GetGidElement([in] BSTR Id, [out, retval] BSTR* gid);
    [propget, id(0x0000000E)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x0000000F)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [id(0x00000010)]
    HRESULT _stdcall TableFirst(void);
    [id(0x00000011)]
    HRESULT _stdcall TableNext(void);
    [propget, id(0x00000012)]
    HRESULT _stdcall TableEOF([out, retval] int* Value);
    [id(0x00000007)]
    HRESULT _stdcall CloseElement(void);
  };

  [
    uuid(C22EF17E-FDD9-48D0-9FE4-59AE225450D2), 
    version(1.0), 
    helpstring("Dispatch interface for OleDMSprFirm Object"), 
    dual, 
    oleautomation
  ]
  interface IOleDMSprFirm: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall IdFirm([out, retval] BSTR* Value);
    [propput, id(0x00000001)]
    HRESULT _stdcall IdFirm([in] BSTR Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall NameFirm([out, retval] BSTR* Value);
    [propput, id(0x00000002)]
    HRESULT _stdcall NameFirm([in] BSTR Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall FNameNom([out, retval] BSTR* Value);
    [propput, id(0x00000003)]
    HRESULT _stdcall FNameNom([in] BSTR Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall PAdrFirm([out, retval] BSTR* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall PAdrFirm([in] BSTR Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall UAdrFirm([out, retval] BSTR* Value);
    [propput, id(0x00000005)]
    HRESULT _stdcall UAdrFirm([in] BSTR Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall INNFirm([out, retval] BSTR* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall INNFirm([in] BSTR Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall KPPFirm([out, retval] BSTR* Value);
    [propput, id(0x00000007)]
    HRESULT _stdcall KPPFirm([in] BSTR Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall GID_Firm([out, retval] BSTR* Value);
    [propput, id(0x00000008)]
    HRESULT _stdcall GID_Firm([in] BSTR Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x0000000A)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [id(0x0000000B)]
    HRESULT _stdcall OpenTable(void);
    [id(0x0000000C)]
    HRESULT _stdcall OpenElement([in] BSTR Id);
    [id(0x0000000D)]
    HRESULT _stdcall NewElement(void);
    [id(0x0000000E)]
    HRESULT _stdcall SaveElement(void);
    [id(0x0000000F)]
    HRESULT _stdcall DeleteElement([in] BSTR Id);
    [id(0x00000010)]
    HRESULT _stdcall GetGidElement([in] BSTR Id, [out, retval] BSTR* gid);
    [propget, id(0x00000011)]
    HRESULT _stdcall TableEOF([out, retval] int* Value);
    [id(0x00000012)]
    HRESULT _stdcall ElementEdit(void);
    [id(0x00000013)]
    HRESULT _stdcall ElementPost(void);
    [id(0x00000014)]
    HRESULT _stdcall TableFirst(void);
    [id(0x00000015)]
    HRESULT _stdcall TableNext(void);
  };

  [
    uuid(EB727574-CFC8-449E-AB6B-FC507E173833), 
    version(1.0), 
    helpstring("Dispatch interface for OleDMSprNom Object"), 
    dual, 
    oleautomation
  ]
  interface IOleDMSprNom: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall IdNom([out, retval] BSTR* Value);
    [propput, id(0x00000001)]
    HRESULT _stdcall IdNom([in] BSTR Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall TNom([out, retval] int* Value);
    [propput, id(0x00000003)]
    HRESULT _stdcall TNom([in] int Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall CodeNom([out, retval] int* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall CodeNom([in] int Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall NameNom([out, retval] BSTR* Value);
    [propput, id(0x00000005)]
    HRESULT _stdcall NameNom([in] BSTR Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall FNameNom([out, retval] BSTR* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall FNameNom([in] BSTR Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall KrNameNom([out, retval] BSTR* Value);
    [propput, id(0x00000007)]
    HRESULT _stdcall KrNameNom([in] BSTR Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall IdBasEdNom([out, retval] BSTR* Value);
    [propput, id(0x00000008)]
    HRESULT _stdcall IdBasEdNom([in] BSTR Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall IdOsnEdNom([out, retval] BSTR* Value);
    [propput, id(0x00000009)]
    HRESULT _stdcall IdOsnEdNom([in] BSTR Value);
    [propget, id(0x0000000A)]
    HRESULT _stdcall IdGrpNom([out, retval] BSTR* Value);
    [propput, id(0x0000000A)]
    HRESULT _stdcall IdGrpNom([in] BSTR Value);
    [propget, id(0x0000000B)]
    HRESULT _stdcall ArtNom([out, retval] BSTR* Value);
    [propput, id(0x0000000B)]
    HRESULT _stdcall ArtNom([in] BSTR Value);
    [propget, id(0x0000000C)]
    HRESULT _stdcall GID_SNom([out, retval] BSTR* Value);
    [propput, id(0x0000000C)]
    HRESULT _stdcall GID_SNom([in] BSTR Value);
    [propget, id(0x0000000D)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x0000000E)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [propget, id(0x0000000F)]
    HRESULT _stdcall AllElement([out, retval] int* Value);
    [propput, id(0x0000000F)]
    HRESULT _stdcall AllElement([in] int Value);
    [propget, id(0x00000010)]
    HRESULT _stdcall IdTypePrice([out, retval] BSTR* Value);
    [propput, id(0x00000010)]
    HRESULT _stdcall IdTypePrice([in] BSTR Value);
    [id(0x00000011)]
    HRESULT _stdcall OpenTable([in] BSTR Grp, [in] int All);
    [id(0x00000012)]
    HRESULT _stdcall OpenElement([in] BSTR Id);
    [id(0x00000013)]
    HRESULT _stdcall NewElement([in] BSTR IdGrp);
    [id(0x00000014)]
    HRESULT _stdcall SaveElement(void);
    [id(0x00000015)]
    HRESULT _stdcall DeleteElement([in] BSTR Id);
    [id(0x00000016)]
    HRESULT _stdcall ChancheGrp([in] BSTR NewGrp);
    [id(0x00000017)]
    HRESULT _stdcall FindPoCodu([in] int Code);
    [id(0x00000018)]
    HRESULT _stdcall GetIdElement([in] BSTR gid, [out, retval] BSTR* Id);
    [id(0x0000001A)]
    HRESULT _stdcall GetGidElement([in] BSTR Id, [out, retval] BSTR* gid);
    [propget, id(0x0000001B)]
    HRESULT _stdcall TableEOF([out, retval] int* Value);
    [id(0x0000001C)]
    HRESULT _stdcall TableFirst(void);
    [id(0x0000001D)]
    HRESULT _stdcall TableNext(void);
  };

  [
    uuid(A7FF2337-C284-4BDC-84C5-5EB62FD8058C), 
    version(1.0), 
    helpstring("Dispatch interface for OleDMSprEd Object"), 
    dual, 
    oleautomation
  ]
  interface IOleDMSprEd: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall IdEd([out, retval] BSTR* Value);
    [propput, id(0x00000001)]
    HRESULT _stdcall IdEd([in] BSTR Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall NameEd([out, retval] BSTR* Value);
    [propput, id(0x00000002)]
    HRESULT _stdcall NameEd([in] BSTR Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall KFEd([out, retval] double* Value);
    [propput, id(0x00000003)]
    HRESULT _stdcall KFEd([in] double Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall TShEd([out, retval] int* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall TShEd([in] int Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall ShEd([out, retval] BSTR* Value);
    [propput, id(0x00000005)]
    HRESULT _stdcall ShEd([in] BSTR Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall IdNomEd([out, retval] BSTR* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall IdNomEd([in] BSTR Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall IdOKEIEd([out, retval] BSTR* Value);
    [propput, id(0x00000007)]
    HRESULT _stdcall IdOKEIEd([in] BSTR Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall NeIspEd([out, retval] int* Value);
    [propput, id(0x00000008)]
    HRESULT _stdcall NeIspEd([in] int Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall GID_SEd([out, retval] BSTR* Value);
    [propput, id(0x00000009)]
    HRESULT _stdcall GID_SEd([in] BSTR Value);
    [propget, id(0x0000000A)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x0000000B)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [propget, id(0x0000000C)]
    HRESULT _stdcall TableEOF([out, retval] int* Value);
    [id(0x0000000D)]
    HRESULT _stdcall TableFirst(void);
    [id(0x0000000E)]
    HRESULT _stdcall TableNext(void);
    [id(0x0000000F)]
    HRESULT _stdcall OpenTable([in] BSTR IdNom);
    [id(0x00000010)]
    HRESULT _stdcall OpenElement([in] BSTR Id);
    [id(0x00000011)]
    HRESULT _stdcall NewElement([in] BSTR IdNom);
    [id(0x00000012)]
    HRESULT _stdcall SaveElement(void);
    [id(0x00000013)]
    HRESULT _stdcall DeleteElement([in] BSTR Id);
    [id(0x00000014)]
    HRESULT _stdcall NewShtrihCod(void);
    [id(0x00000015)]
    HRESULT _stdcall FindEdPoSh([in] BSTR ShtrihCod);
    [id(0x00000016)]
    HRESULT _stdcall GetIdElement([in] BSTR gid, [out, retval] BSTR* Id);
    [id(0x00000017)]
    HRESULT _stdcall GetGidElement([in] BSTR Id, [out, retval] BSTR* gid);
  };

  [
    uuid(500BC744-0B7A-4DB5-AF7C-6B6B296C3B8B), 
    version(1.0), 
    helpstring("Dispatch interface for OleDMDocRepKKM Object"), 
    dual, 
    oleautomation
  ]
  interface IOleDMDocRepKKM: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall DocAllIDDOC([out, retval] BSTR* Value);
    [propput, id(0x00000003)]
    HRESULT _stdcall DocAllIDDOC([in] BSTR Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall DocAllPOSDOC([out, retval] BSTR* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall DocAllPOSDOC([in] BSTR Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall DocAllPRDOC([out, retval] int* Value);
    [propput, id(0x00000005)]
    HRESULT _stdcall DocAllPRDOC([in] int Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall DocAllNUMDOC([out, retval] int* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall DocAllNUMDOC([in] int Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall DocAllIDFIRMDOC([out, retval] BSTR* Value);
    [propput, id(0x00000007)]
    HRESULT _stdcall DocAllIDFIRMDOC([in] BSTR Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall DocAllIDSKLDOC([out, retval] BSTR* Value);
    [propput, id(0x00000008)]
    HRESULT _stdcall DocAllIDSKLDOC([in] BSTR Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall DocAllIDKLDOC([out, retval] BSTR* Value);
    [propput, id(0x00000009)]
    HRESULT _stdcall DocAllIDKLDOC([in] BSTR Value);
    [propget, id(0x0000000A)]
    HRESULT _stdcall DocAllSUMDOC([out, retval] double* Value);
    [propput, id(0x0000000A)]
    HRESULT _stdcall DocAllSUMDOC([in] double Value);
    [propget, id(0x0000000B)]
    HRESULT _stdcall DocAllFNAME_USER([out, retval] BSTR* Value);
    [propget, id(0x0000000C)]
    HRESULT _stdcall DocAllIDUSERDOC([out, retval] BSTR* Value);
    [propput, id(0x0000000C)]
    HRESULT _stdcall DocAllIDUSERDOC([in] BSTR Value);
    [propget, id(0x0000000D)]
    HRESULT _stdcall DocAllIDDOGDOC([out, retval] BSTR* Value);
    [propput, id(0x0000000D)]
    HRESULT _stdcall DocAllIDDOGDOC([in] BSTR Value);
    [propget, id(0x0000000E)]
    HRESULT _stdcall DocAllNAME_SDOG([out, retval] BSTR* Value);
    [propget, id(0x0000000F)]
    HRESULT _stdcall DocAllNAMEKLIENT([out, retval] BSTR* Value);
    [propget, id(0x00000010)]
    HRESULT _stdcall DocAllGID_DOC([out, retval] BSTR* Value);
    [propput, id(0x00000010)]
    HRESULT _stdcall DocAllGID_DOC([in] BSTR Value);
    [propget, id(0x00000011)]
    HRESULT _stdcall DocID_DREPKKM([out, retval] BSTR* Value);
    [propput, id(0x00000011)]
    HRESULT _stdcall DocID_DREPKKM([in] BSTR Value);
    [propget, id(0x00000012)]
    HRESULT _stdcall DocGID_DREPKKM([out, retval] BSTR* Value);
    [propput, id(0x00000012)]
    HRESULT _stdcall DocGID_DREPKKM([in] BSTR Value);
    [propget, id(0x00000013)]
    HRESULT _stdcall DocIDDOC_DREPKKM([out, retval] BSTR* Value);
    [propput, id(0x00000013)]
    HRESULT _stdcall DocIDDOC_DREPKKM([in] BSTR Value);
    [propget, id(0x00000014)]
    HRESULT _stdcall DocIDKKM_DREPKKM([out, retval] BSTR* Value);
    [propput, id(0x00000014)]
    HRESULT _stdcall DocIDKKM_DREPKKM([in] BSTR Value);
    [propget, id(0x00000015)]
    HRESULT _stdcall DocPRIM_DREPKKM([out, retval] BSTR* Value);
    [propput, id(0x00000015)]
    HRESULT _stdcall DocPRIM_DREPKKM([in] BSTR Value);
    [propget, id(0x00000016)]
    HRESULT _stdcall DocOPLNAL_DREPKKM([out, retval] double* Value);
    [propput, id(0x00000016)]
    HRESULT _stdcall DocOPLNAL_DREPKKM([in] double Value);
    [propget, id(0x00000017)]
    HRESULT _stdcall DocOPLPC_DREPKKM([out, retval] double* Value);
    [propput, id(0x00000017)]
    HRESULT _stdcall DocOPLPC_DREPKKM([in] double Value);
    [propget, id(0x00000018)]
    HRESULT _stdcall DocNKL_DREPKKM([out, retval] int* Value);
    [propput, id(0x00000018)]
    HRESULT _stdcall DocNKL_DREPKKM([in] int Value);
    [propget, id(0x00000019)]
    HRESULT _stdcall DocSK_DREPKKM([out, retval] double* Value);
    [propput, id(0x00000019)]
    HRESULT _stdcall DocSK_DREPKKM([in] double Value);
    [propget, id(0x0000001A)]
    HRESULT _stdcall DocNAD_DREPKKM([out, retval] double* Value);
    [propput, id(0x0000001A)]
    HRESULT _stdcall DocNAD_DREPKKM([in] double Value);
    [propget, id(0x0000001B)]
    HRESULT _stdcall DocDVREG_DREPKKM([out, retval] int* Value);
    [propput, id(0x0000001B)]
    HRESULT _stdcall DocDVREG_DREPKKM([in] int Value);
    [propget, id(0x0000001C)]
    HRESULT _stdcall DocNAMEKKM([out, retval] BSTR* Value);
    [propget, id(0x0000001D)]
    HRESULT _stdcall DocAllNAMEFIRM([out, retval] BSTR* Value);
    [propget, id(0x0000001E)]
    HRESULT _stdcall DocAllNAMESKLAD([out, retval] BSTR* Value);
    [propget, id(0x0000001F)]
    HRESULT _stdcall DocTID_DREPKKMT([out, retval] BSTR* Value);
    [propput, id(0x0000001F)]
    HRESULT _stdcall DocTID_DREPKKMT([in] BSTR Value);
    [propget, id(0x00000020)]
    HRESULT _stdcall DocTGID_DREPKKMT([out, retval] BSTR* Value);
    [propput, id(0x00000020)]
    HRESULT _stdcall DocTGID_DREPKKMT([in] BSTR Value);
    [propget, id(0x00000021)]
    HRESULT _stdcall DocTIDDOC_DREPKKMT([out, retval] BSTR* Value);
    [propput, id(0x00000021)]
    HRESULT _stdcall DocTIDDOC_DREPKKMT([in] BSTR Value);
    [propget, id(0x00000022)]
    HRESULT _stdcall DocTIDNOM_DREPKKMT([out, retval] BSTR* Value);
    [propput, id(0x00000022)]
    HRESULT _stdcall DocTIDNOM_DREPKKMT([in] BSTR Value);
    [propget, id(0x00000023)]
    HRESULT _stdcall DocTIDED_DREPKKMT([out, retval] BSTR* Value);
    [propput, id(0x00000023)]
    HRESULT _stdcall DocTIDED_DREPKKMT([in] BSTR Value);
    [propget, id(0x00000024)]
    HRESULT _stdcall DocTKOL_DREPKKMT([out, retval] double* Value);
    [propput, id(0x00000024)]
    HRESULT _stdcall DocTKOL_DREPKKMT([in] double Value);
    [propget, id(0x00000025)]
    HRESULT _stdcall DocTKF_DREPKKMT([out, retval] double* Value);
    [propput, id(0x00000025)]
    HRESULT _stdcall DocTKF_DREPKKMT([in] double Value);
    [propget, id(0x00000026)]
    HRESULT _stdcall DocTSUM_DREPKKMT([out, retval] double* Value);
    [propput, id(0x00000026)]
    HRESULT _stdcall DocTSUM_DREPKKMT([in] double Value);
    [propget, id(0x00000027)]
    HRESULT _stdcall DocTSK_DREPKKMT([out, retval] double* Value);
    [propput, id(0x00000027)]
    HRESULT _stdcall DocTSK_DREPKKMT([in] double Value);
    [propget, id(0x00000028)]
    HRESULT _stdcall DocTNAD_REPKKMT([out, retval] double* Value);
    [propput, id(0x00000028)]
    HRESULT _stdcall DocTNAD_REPKKMT([in] double Value);
    [propget, id(0x00000029)]
    HRESULT _stdcall DocTPRICEFULL_DREPKKMT([out, retval] double* Value);
    [propput, id(0x00000029)]
    HRESULT _stdcall DocTPRICEFULL_DREPKKMT([in] double Value);
    [propget, id(0x0000002A)]
    HRESULT _stdcall DocTNAMENOM([out, retval] BSTR* Value);
    [propget, id(0x0000002B)]
    HRESULT _stdcall DocTNAMEED([out, retval] BSTR* Value);
    [propget, id(0x0000002C)]
    HRESULT _stdcall DocTTNOM([out, retval] int* Value);
    [propget, id(0x0000002D)]
    HRESULT _stdcall DocTPRICE_DREPKKMT([out, retval] double* Value);
    [propput, id(0x0000002D)]
    HRESULT _stdcall DocTPRICE_DREPKKMT([in] double Value);
    [propget, id(0x0000002E)]
    HRESULT _stdcall DocAllTDOC([out, retval] BSTR* Value);
    [propput, id(0x0000002E)]
    HRESULT _stdcall DocAllTDOC([in] BSTR Value);
    [id(0x0000002F)]
    HRESULT _stdcall TableFirst(void);
    [id(0x00000030)]
    HRESULT _stdcall TableNext(void);
    [propget, id(0x00000031)]
    HRESULT _stdcall TableEOF([out, retval] int* Value);
    [id(0x00000032)]
    HRESULT _stdcall NewDoc(void);
    [id(0x00000033)]
    HRESULT _stdcall OpenDoc([in] BSTR Id);
    [id(0x00000034)]
    HRESULT _stdcall SaveDoc(void);
    [id(0x00000035)]
    HRESULT _stdcall DvRegDoc(void);
    [id(0x00000036)]
    HRESULT _stdcall CancelDvRegDoc(void);
    [id(0x00000037)]
    HRESULT _stdcall DeleteDoc([in] BSTR Id);
    [id(0x00000038)]
    HRESULT _stdcall AddDocNewString(void);
    [id(0x00000039)]
    HRESULT _stdcall DeleteStringDoc(void);
    [id(0x0000003A)]
    HRESULT _stdcall CloseDoc(void);
    [propget, id(0x0000003B)]
    HRESULT _stdcall PrefiksDoc([out, retval] BSTR* Value);
    [propput, id(0x0000003B)]
    HRESULT _stdcall PrefiksDoc([in] BSTR Value);
    [propget, id(0x0000003C)]
    HRESULT _stdcall NameBase([out, retval] BSTR* Value);
    [propget, id(0x000000C9)]
    HRESULT _stdcall DocAllIDBASE_GALLDOC([out, retval] BSTR* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall DocAllIDBASE_GALLDOC([in] BSTR Value);
  };

  [
    uuid(122A380E-AADA-46E5-AE13-7BC1C518942C), 
    version(1.0), 
    helpstring("Dispatch interface for OleDMSprGrpNom Object"), 
    dual, 
    oleautomation
  ]
  interface IOleDMSprGrpNom: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall ElIDGN([out, retval] BSTR* Value);
    [propput, id(0x00000001)]
    HRESULT _stdcall ElIDGN([in] BSTR Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall ElNAMEGN([out, retval] BSTR* Value);
    [propput, id(0x00000002)]
    HRESULT _stdcall ElNAMEGN([in] BSTR Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall ElIDGRPGN([out, retval] BSTR* Value);
    [propput, id(0x00000003)]
    HRESULT _stdcall ElIDGRPGN([in] BSTR Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall ElGID_SGRPNOM([out, retval] BSTR* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall ElGID_SGRPNOM([in] BSTR Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall TableEOF([out, retval] int* Value);
    [id(0x00000008)]
    HRESULT _stdcall OpenTable(void);
    [id(0x00000009)]
    HRESULT _stdcall OpenElement([in] BSTR Id);
    [id(0x0000000A)]
    HRESULT _stdcall NewElement([in] BSTR IdGrp);
    [id(0x0000000B)]
    HRESULT _stdcall SaveElement(void);
    [id(0x0000000C)]
    HRESULT _stdcall DeleteElement([in] BSTR Id);
    [id(0x0000000D)]
    HRESULT _stdcall GetIdElement([in] BSTR gid, [out, retval] BSTR* Id);
    [id(0x0000000E)]
    HRESULT _stdcall TableFirst(void);
    [id(0x0000000F)]
    HRESULT _stdcall TableNext(void);
  };

  [
    uuid(03AE0B1D-6050-471A-AFA2-2F5E0B1ADDED), 
    version(1.0), 
    helpstring("Dispatch interface for OleDMSprTypePrice Object"), 
    dual, 
    oleautomation
  ]
  interface IOleDMSprTypePrice: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall TableEOF([out, retval] int* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall ElID_TPRICE([out, retval] BSTR* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall ElID_TPRICE([in] BSTR Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall ElNAME_TPRICE([out, retval] BSTR* Value);
    [propput, id(0x00000005)]
    HRESULT _stdcall ElNAME_TPRICE([in] BSTR Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall ElGID_STPRICE([out, retval] BSTR* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall ElGID_STPRICE([in] BSTR Value);
    [id(0x00000007)]
    HRESULT _stdcall OpenTable(void);
    [id(0x00000008)]
    HRESULT _stdcall OpenElement([in] BSTR Id);
    [id(0x00000009)]
    HRESULT _stdcall NewElement(void);
    [id(0x0000000A)]
    HRESULT _stdcall SaveElement(void);
    [id(0x0000000B)]
    HRESULT _stdcall DeleteElement([in] BSTR Id);
    [id(0x0000000C)]
    HRESULT _stdcall GetIDTypePrice([in] BSTR name, [out, retval] BSTR* Id);
    [id(0x0000000D)]
    HRESULT _stdcall GetIdElement([in] BSTR gid, [out, retval] BSTR* Id);
    [id(0x0000000E)]
    HRESULT _stdcall TableFirst(void);
    [id(0x0000000F)]
    HRESULT _stdcall TableNext(void);
    [id(0x00000010)]
    HRESULT _stdcall CloseElement(void);
  };

  [
    uuid(81AAC7FF-6A90-4E54-B3FE-AF265465B0EB), 
    version(1.0), 
    helpstring("Dispatch interface for OleDMSprPrice Object"), 
    dual, 
    oleautomation
  ]
  interface IOleDMSprPrice: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall TableEOF([out, retval] int* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall ElID_PRICE([out, retval] BSTR* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall ElID_PRICE([in] BSTR Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall ElIDNOM_PRICE([out, retval] BSTR* Value);
    [propput, id(0x00000005)]
    HRESULT _stdcall ElIDNOM_PRICE([in] BSTR Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall ElIDTYPE_PRICE([out, retval] BSTR* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall ElIDTYPE_PRICE([in] BSTR Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall ElZNACH_PRICE([out, retval] double* Value);
    [propput, id(0x00000007)]
    HRESULT _stdcall ElZNACH_PRICE([in] double Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall ElGID_SPRICE([out, retval] BSTR* Value);
    [propput, id(0x00000008)]
    HRESULT _stdcall ElGID_SPRICE([in] BSTR Value);
    [id(0x00000009)]
    HRESULT _stdcall OpenTable([in] BSTR IdNom);
    [id(0x0000000A)]
    HRESULT _stdcall NewElement(void);
    [id(0x0000000B)]
    HRESULT _stdcall SaveElement(void);
    [id(0x0000000C)]
    HRESULT _stdcall DeleteElement([in] BSTR Id);
    [id(0x0000000D)]
    HRESULT _stdcall FindElement([in] BSTR IdTypePrice, [in] BSTR IdNom, [out, retval] int* kol_record);
    [propget, id(0x0000000E)]
    HRESULT _stdcall IdNom([out, retval] BSTR* Value);
    [propput, id(0x0000000E)]
    HRESULT _stdcall IdNom([in] BSTR Value);
    [propget, id(0x0000000F)]
    HRESULT _stdcall IdTypePrice([out, retval] BSTR* Value);
    [propput, id(0x0000000F)]
    HRESULT _stdcall IdTypePrice([in] BSTR Value);
  };

  [
    uuid(906D0C92-DE95-4FA2-9DE4-4E4DCA7242A1), 
    version(1.0), 
    helpstring("Dispatch interface for OleDMDocPer Object"), 
    dual, 
    oleautomation
  ]
  interface IOleDMDocPer: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall TableEOF([out, retval] int* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall DocAllIDDOC([out, retval] BSTR* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall DocAllIDDOC([in] BSTR Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall DocAllPOSDOC([out, retval] BSTR* Value);
    [propput, id(0x00000005)]
    HRESULT _stdcall DocAllPOSDOC([in] BSTR Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall DocAllPRDOC([out, retval] int* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall DocAllPRDOC([in] int Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall DocAllTDOC([out, retval] BSTR* Value);
    [propput, id(0x00000007)]
    HRESULT _stdcall DocAllTDOC([in] BSTR Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall DocAllNUMDOC([out, retval] int* Value);
    [propput, id(0x00000008)]
    HRESULT _stdcall DocAllNUMDOC([in] int Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall DocAllIDFIRMDOC([out, retval] BSTR* Value);
    [propput, id(0x00000009)]
    HRESULT _stdcall DocAllIDFIRMDOC([in] BSTR Value);
    [propget, id(0x0000000A)]
    HRESULT _stdcall DocAllIDSKLDOC([out, retval] BSTR* Value);
    [propput, id(0x0000000A)]
    HRESULT _stdcall DocAllIDSKLDOC([in] BSTR Value);
    [propget, id(0x0000000B)]
    HRESULT _stdcall DocAllIDKLDOC([out, retval] BSTR* Value);
    [propput, id(0x0000000B)]
    HRESULT _stdcall DocAllIDKLDOC([in] BSTR Value);
    [propget, id(0x0000000C)]
    HRESULT _stdcall DocAllSUMDOC([out, retval] double* Value);
    [propput, id(0x0000000C)]
    HRESULT _stdcall DocAllSUMDOC([in] double Value);
    [propget, id(0x0000000D)]
    HRESULT _stdcall DocIDPER([out, retval] BSTR* Value);
    [propput, id(0x0000000D)]
    HRESULT _stdcall DocIDPER([in] BSTR Value);
    [propget, id(0x0000000E)]
    HRESULT _stdcall DocIDDOCPER([out, retval] BSTR* Value);
    [propput, id(0x0000000E)]
    HRESULT _stdcall DocIDDOCPER([in] BSTR Value);
    [propget, id(0x0000000F)]
    HRESULT _stdcall DocIDSKLPOLPER([out, retval] BSTR* Value);
    [propput, id(0x0000000F)]
    HRESULT _stdcall DocIDSKLPOLPER([in] BSTR Value);
    [propget, id(0x00000010)]
    HRESULT _stdcall DocPRIMPER([out, retval] BSTR* Value);
    [propput, id(0x00000010)]
    HRESULT _stdcall DocPRIMPER([in] BSTR Value);
    [propget, id(0x00000011)]
    HRESULT _stdcall DocTIDPERT([out, retval] BSTR* Value);
    [propput, id(0x00000011)]
    HRESULT _stdcall DocTIDPERT([in] BSTR Value);
    [propget, id(0x00000012)]
    HRESULT _stdcall DocTIDDOCPERT([out, retval] BSTR* Value);
    [propput, id(0x00000012)]
    HRESULT _stdcall DocTIDDOCPERT([in] BSTR Value);
    [propget, id(0x00000013)]
    HRESULT _stdcall DocTIDNOMPERT([out, retval] BSTR* Value);
    [propput, id(0x00000013)]
    HRESULT _stdcall DocTIDNOMPERT([in] BSTR Value);
    [propget, id(0x00000014)]
    HRESULT _stdcall DocTIDEDPERT([out, retval] BSTR* Value);
    [propput, id(0x00000014)]
    HRESULT _stdcall DocTIDEDPERT([in] BSTR Value);
    [propget, id(0x00000015)]
    HRESULT _stdcall DocTKOLPERT([out, retval] double* Value);
    [propput, id(0x00000015)]
    HRESULT _stdcall DocTKOLPERT([in] double Value);
    [propget, id(0x00000016)]
    HRESULT _stdcall DocTKFPERT([out, retval] double* Value);
    [propput, id(0x00000016)]
    HRESULT _stdcall DocTKFPERT([in] double Value);
    [propget, id(0x00000017)]
    HRESULT _stdcall DocTPRICEPERT([out, retval] double* Value);
    [propput, id(0x00000017)]
    HRESULT _stdcall DocTPRICEPERT([in] double Value);
    [propget, id(0x00000018)]
    HRESULT _stdcall DocTSUMPERT([out, retval] double* Value);
    [propput, id(0x00000018)]
    HRESULT _stdcall DocTSUMPERT([in] double Value);
    [propget, id(0x00000019)]
    HRESULT _stdcall DocTNAMENOM([out, retval] BSTR* Value);
    [propget, id(0x0000001A)]
    HRESULT _stdcall DocTNAMEED([out, retval] BSTR* Value);
    [propget, id(0x0000001B)]
    HRESULT _stdcall DocTTNOM([out, retval] int* Value);
    [propget, id(0x0000001C)]
    HRESULT _stdcall DocAllIDUSERDOC([out, retval] BSTR* Value);
    [propput, id(0x0000001C)]
    HRESULT _stdcall DocAllIDUSERDOC([in] BSTR Value);
    [propget, id(0x0000001D)]
    HRESULT _stdcall DocAllGID_DOC([out, retval] BSTR* Value);
    [propput, id(0x0000001D)]
    HRESULT _stdcall DocAllGID_DOC([in] BSTR Value);
    [propget, id(0x0000001E)]
    HRESULT _stdcall DocGID_DPER([out, retval] BSTR* Value);
    [propput, id(0x0000001E)]
    HRESULT _stdcall DocGID_DPER([in] BSTR Value);
    [propget, id(0x0000001F)]
    HRESULT _stdcall DocTGID_DPERT([out, retval] BSTR* Value);
    [propput, id(0x0000001F)]
    HRESULT _stdcall DocTGID_DPERT([in] BSTR Value);
    [propget, id(0x00000020)]
    HRESULT _stdcall DocAllFNAMEUSER([out, retval] BSTR* Value);
    [id(0x00000021)]
    HRESULT _stdcall NewDoc(void);
    [id(0x00000022)]
    HRESULT _stdcall OpenDoc([in] BSTR IdDoc);
    [id(0x00000023)]
    HRESULT _stdcall SaveDoc(void);
    [id(0x00000024)]
    HRESULT _stdcall DvRegDoc(void);
    [id(0x00000025)]
    HRESULT _stdcall CancelDvRegDoc(void);
    [id(0x00000026)]
    HRESULT _stdcall AddDocNewString(void);
    [id(0x00000027)]
    HRESULT _stdcall DeleteStringDoc(void);
    [id(0x00000028)]
    HRESULT _stdcall DeleteDoc([in] BSTR Id);
    [id(0x00000029)]
    HRESULT _stdcall CloseDoc(void);
    [id(0x0000002A)]
    HRESULT _stdcall GetIdDocPoNomeruDoc([in] int number_doc, [in] BSTR date_doc, [out, retval] BSTR* IdDoc);
    [id(0x0000002B)]
    HRESULT _stdcall TableFirst(void);
    [id(0x0000002C)]
    HRESULT _stdcall TableNext(void);
    [propget, id(0x0000002F)]
    HRESULT _stdcall PrefiksDoc([out, retval] BSTR* Value);
    [propput, id(0x0000002F)]
    HRESULT _stdcall PrefiksDoc([in] BSTR Value);
    [propget, id(0x00000030)]
    HRESULT _stdcall NameBase([out, retval] BSTR* Value);
    [propget, id(0x000000C9)]
    HRESULT _stdcall DocAllIDBASE_GALLDOC([out, retval] BSTR* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall DocAllIDBASE_GALLDOC([in] BSTR Value);
  };

  [
    uuid(68D9AE11-D691-410E-8E27-AD1CF6A3CA54), 
    version(1.0), 
    helpstring("Dispatch interface for OleDMDocPrihNakl Object"), 
    dual, 
    oleautomation
  ]
  interface IOleDMDocPrihNakl: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall TableEOF([out, retval] int* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall DocTIDPRNT([out, retval] BSTR* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall DocTIDPRNT([in] BSTR Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall DocTIDDOCPRNT([out, retval] BSTR* Value);
    [propput, id(0x00000005)]
    HRESULT _stdcall DocTIDDOCPRNT([in] BSTR Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall DocTIDNOMPRNT([out, retval] BSTR* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall DocTIDNOMPRNT([in] BSTR Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall DocTIDEDPRNT([out, retval] BSTR* Value);
    [propput, id(0x00000007)]
    HRESULT _stdcall DocTIDEDPRNT([in] BSTR Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall DocTIDPARTPRNT([out, retval] BSTR* Value);
    [propput, id(0x00000008)]
    HRESULT _stdcall DocTIDPARTPRNT([in] BSTR Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall DocTKOLPRNT([out, retval] double* Value);
    [propput, id(0x00000009)]
    HRESULT _stdcall DocTKOLPRNT([in] double Value);
    [propget, id(0x0000000A)]
    HRESULT _stdcall DocTKFPRNT([out, retval] double* Value);
    [propput, id(0x0000000A)]
    HRESULT _stdcall DocTKFPRNT([in] double Value);
    [propget, id(0x0000000B)]
    HRESULT _stdcall DocTPRICEPRNT([out, retval] double* Value);
    [propput, id(0x0000000B)]
    HRESULT _stdcall DocTPRICEPRNT([in] double Value);
    [propget, id(0x0000000C)]
    HRESULT _stdcall DocTSUMPRNT([out, retval] double* Value);
    [propput, id(0x0000000C)]
    HRESULT _stdcall DocTSUMPRNT([in] double Value);
    [propget, id(0x0000000D)]
    HRESULT _stdcall DocIDPRN([out, retval] BSTR* Value);
    [propput, id(0x0000000D)]
    HRESULT _stdcall DocIDPRN([in] BSTR Value);
    [propget, id(0x0000000E)]
    HRESULT _stdcall DocTNAMENOM([out, retval] BSTR* Value);
    [propget, id(0x0000000F)]
    HRESULT _stdcall DocTNAMEED([out, retval] BSTR* Value);
    [propget, id(0x00000010)]
    HRESULT _stdcall DocIDDOCPRN([out, retval] BSTR* Value);
    [propput, id(0x00000010)]
    HRESULT _stdcall DocIDDOCPRN([in] BSTR Value);
    [propget, id(0x00000011)]
    HRESULT _stdcall DocPRIMDOC([out, retval] BSTR* Value);
    [propput, id(0x00000011)]
    HRESULT _stdcall DocPRIMDOC([in] BSTR Value);
    [propget, id(0x00000012)]
    HRESULT _stdcall DocAllIDDOC([out, retval] BSTR* Value);
    [propput, id(0x00000012)]
    HRESULT _stdcall DocAllIDDOC([in] BSTR Value);
    [propget, id(0x00000013)]
    HRESULT _stdcall DocAllPOSDOC([out, retval] BSTR* Value);
    [propput, id(0x00000013)]
    HRESULT _stdcall DocAllPOSDOC([in] BSTR Value);
    [propget, id(0x00000014)]
    HRESULT _stdcall DocAllPRDOC([out, retval] int* Value);
    [propput, id(0x00000014)]
    HRESULT _stdcall DocAllPRDOC([in] int Value);
    [propget, id(0x00000015)]
    HRESULT _stdcall DocAllTDOC([out, retval] BSTR* Value);
    [propput, id(0x00000015)]
    HRESULT _stdcall DocAllTDOC([in] BSTR Value);
    [propget, id(0x00000016)]
    HRESULT _stdcall DocAllNUMDOC([out, retval] int* Value);
    [propput, id(0x00000016)]
    HRESULT _stdcall DocAllNUMDOC([in] int Value);
    [propget, id(0x00000017)]
    HRESULT _stdcall DocAllIDFIRMDOC([out, retval] BSTR* Value);
    [propput, id(0x00000017)]
    HRESULT _stdcall DocAllIDFIRMDOC([in] BSTR Value);
    [propget, id(0x00000018)]
    HRESULT _stdcall DocAllIDSKLDOC([out, retval] BSTR* Value);
    [propput, id(0x00000018)]
    HRESULT _stdcall DocAllIDSKLDOC([in] BSTR Value);
    [propget, id(0x00000019)]
    HRESULT _stdcall DocAllIDKLDOC([out, retval] BSTR* Value);
    [propput, id(0x00000019)]
    HRESULT _stdcall DocAllIDKLDOC([in] BSTR Value);
    [propget, id(0x0000001A)]
    HRESULT _stdcall DocAllSUMDOC([out, retval] double* Value);
    [propput, id(0x0000001A)]
    HRESULT _stdcall DocAllSUMDOC([in] double Value);
    [propget, id(0x0000001B)]
    HRESULT _stdcall DocAllFNAMEUSER([out, retval] BSTR* Value);
    [propput, id(0x0000001B)]
    HRESULT _stdcall DocAllFNAMEUSER([in] BSTR Value);
    [propget, id(0x0000001C)]
    HRESULT _stdcall DocIDTPRICE([out, retval] BSTR* Value);
    [propput, id(0x0000001C)]
    HRESULT _stdcall DocIDTPRICE([in] BSTR Value);
    [propget, id(0x0000001D)]
    HRESULT _stdcall DocAllIDUSERDOC([out, retval] BSTR* Value);
    [propput, id(0x0000001D)]
    HRESULT _stdcall DocAllIDUSERDOC([in] BSTR Value);
    [propget, id(0x0000001E)]
    HRESULT _stdcall DocAllGID_DOC([out, retval] BSTR* Value);
    [propput, id(0x0000001E)]
    HRESULT _stdcall DocAllGID_DOC([in] BSTR Value);
    [propget, id(0x0000001F)]
    HRESULT _stdcall DocGID_DPRN([out, retval] BSTR* Value);
    [propput, id(0x0000001F)]
    HRESULT _stdcall DocGID_DPRN([in] BSTR Value);
    [propget, id(0x00000020)]
    HRESULT _stdcall DocTGID_DPRNT([out, retval] BSTR* Value);
    [propput, id(0x00000020)]
    HRESULT _stdcall DocTGID_DPRNT([in] BSTR Value);
    [id(0x00000021)]
    HRESULT _stdcall NewDoc(void);
    [id(0x00000022)]
    HRESULT _stdcall OpenDoc([in] BSTR IdDoc);
    [id(0x00000023)]
    HRESULT _stdcall SaveDoc(void);
    [id(0x00000025)]
    HRESULT _stdcall DvRegDoc(void);
    [id(0x00000026)]
    HRESULT _stdcall CancelDvRegDoc(void);
    [id(0x00000027)]
    HRESULT _stdcall AddDocNewString(void);
    [id(0x00000028)]
    HRESULT _stdcall DeleteStringDoc(void);
    [id(0x00000029)]
    HRESULT _stdcall DeleteDoc([in] BSTR Id);
    [id(0x0000002A)]
    HRESULT _stdcall GetIdDocPoNomeruDoc([in] int number_doc, [in] DATE date_doc, [out, retval] BSTR* id_doc);
    [id(0x0000002B)]
    HRESULT _stdcall TableFirst(void);
    [id(0x0000002C)]
    HRESULT _stdcall TableNext(void);
    [propget, id(0x00000024)]
    HRESULT _stdcall PrefiksDoc([out, retval] BSTR* Value);
    [propput, id(0x00000024)]
    HRESULT _stdcall PrefiksDoc([in] BSTR Value);
    [propget, id(0x0000002D)]
    HRESULT _stdcall NameBase([out, retval] BSTR* Value);
    [propget, id(0x000000C9)]
    HRESULT _stdcall DocAllIDBASE_GALLDOC([out, retval] BSTR* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall DocAllIDBASE_GALLDOC([in] BSTR Value);
  };

  [
    uuid(A9B32F6B-0BBA-4CFA-AEF1-312AA488A02F), 
    version(1.0), 
    helpstring("Dispatch interface for OleDMDocInv Object"), 
    dual, 
    oleautomation
  ]
  interface IOleDMDocReal: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall TableEOF([out, retval] int* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall DocAllIDDOC([out, retval] BSTR* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall DocAllIDDOC([in] BSTR Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall DocAllPOSDOC([out, retval] BSTR* Value);
    [propput, id(0x00000005)]
    HRESULT _stdcall DocAllPOSDOC([in] BSTR Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall DocAllPRDOC([out, retval] int* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall DocAllPRDOC([in] int Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall DocAllTDOC([out, retval] BSTR* Value);
    [propput, id(0x00000007)]
    HRESULT _stdcall DocAllTDOC([in] BSTR Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall DocAllNUMDOC([out, retval] int* Value);
    [propput, id(0x00000008)]
    HRESULT _stdcall DocAllNUMDOC([in] int Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall DocAllIDFIRMDOC([out, retval] BSTR* Value);
    [propput, id(0x00000009)]
    HRESULT _stdcall DocAllIDFIRMDOC([in] BSTR Value);
    [propget, id(0x0000000B)]
    HRESULT _stdcall DocAllIDSKLDOC([out, retval] BSTR* Value);
    [propput, id(0x0000000B)]
    HRESULT _stdcall DocAllIDSKLDOC([in] BSTR Value);
    [propget, id(0x0000000C)]
    HRESULT _stdcall DocAllSUMDOC([out, retval] double* Value);
    [propput, id(0x0000000C)]
    HRESULT _stdcall DocAllSUMDOC([in] double Value);
    [propget, id(0x0000000D)]
    HRESULT _stdcall DocAllIDUSERDOC([out, retval] BSTR* Value);
    [propput, id(0x0000000D)]
    HRESULT _stdcall DocAllIDUSERDOC([in] BSTR Value);
    [propget, id(0x0000000E)]
    HRESULT _stdcall DocAllFNAMEUSER([out, retval] BSTR* Value);
    [propget, id(0x0000000F)]
    HRESULT _stdcall DocID_INV([out, retval] BSTR* Value);
    [propput, id(0x0000000F)]
    HRESULT _stdcall DocID_INV([in] BSTR Value);
    [propget, id(0x00000010)]
    HRESULT _stdcall DocIDDOC_INV([out, retval] BSTR* Value);
    [propput, id(0x00000010)]
    HRESULT _stdcall DocIDDOC_INV([in] BSTR Value);
    [propget, id(0x00000013)]
    HRESULT _stdcall DocPRIM_INV([out, retval] BSTR* Value);
    [propput, id(0x00000013)]
    HRESULT _stdcall DocPRIM_INV([in] BSTR Value);
    [propget, id(0x00000014)]
    HRESULT _stdcall DocTID_INVT([out, retval] BSTR* Value);
    [propput, id(0x00000014)]
    HRESULT _stdcall DocTID_INVT([in] BSTR Value);
    [propget, id(0x00000015)]
    HRESULT _stdcall DocTIDDOC_INVT([out, retval] BSTR* Value);
    [propput, id(0x00000015)]
    HRESULT _stdcall DocTIDDOC_INVT([in] BSTR Value);
    [propget, id(0x00000016)]
    HRESULT _stdcall DocTIDNOM_INVT([out, retval] BSTR* Value);
    [propput, id(0x00000016)]
    HRESULT _stdcall DocTIDNOM_INVT([in] BSTR Value);
    [propget, id(0x00000017)]
    HRESULT _stdcall DocTIDED_INVT([out, retval] BSTR* Value);
    [propput, id(0x00000017)]
    HRESULT _stdcall DocTIDED_INVT([in] BSTR Value);
    [propget, id(0x00000018)]
    HRESULT _stdcall DocTKF_INVT([out, retval] double* Value);
    [propput, id(0x00000018)]
    HRESULT _stdcall DocTKF_INVT([in] double Value);
    [propget, id(0x00000019)]
    HRESULT _stdcall DocTKOLUCH_INVT([out, retval] double* Value);
    [propput, id(0x00000019)]
    HRESULT _stdcall DocTKOLUCH_INVT([in] double Value);
    [propget, id(0x0000001A)]
    HRESULT _stdcall DocTNAMENOM([out, retval] BSTR* Value);
    [propget, id(0x0000001B)]
    HRESULT _stdcall DocTNAMEED([out, retval] BSTR* Value);
    [propget, id(0x0000001C)]
    HRESULT _stdcall DocTKOLFAKT_INVT([out, retval] double* Value);
    [propput, id(0x0000001C)]
    HRESULT _stdcall DocTKOLFAKT_INVT([in] double Value);
    [propget, id(0x0000001D)]
    HRESULT _stdcall DocAllGID_DOC([out, retval] BSTR* Value);
    [propput, id(0x0000001D)]
    HRESULT _stdcall DocAllGID_DOC([in] BSTR Value);
    [propget, id(0x0000001E)]
    HRESULT _stdcall DocGID_INV([out, retval] BSTR* Value);
    [propput, id(0x0000001E)]
    HRESULT _stdcall DocGID_INV([in] BSTR Value);
    [propget, id(0x0000001F)]
    HRESULT _stdcall DocTGID_INVT([out, retval] BSTR* Value);
    [propput, id(0x0000001F)]
    HRESULT _stdcall DocTGID_INVT([in] BSTR Value);
    [id(0x00000020)]
    HRESULT _stdcall NewDoc(void);
    [id(0x00000021)]
    HRESULT _stdcall OpenDoc([in] BSTR IdDoc);
    [id(0x00000022)]
    HRESULT _stdcall SaveDoc(void);
    [id(0x00000023)]
    HRESULT _stdcall DvRegDoc(void);
    [id(0x00000025)]
    HRESULT _stdcall CancelDvRegDoc(void);
    [id(0x00000026)]
    HRESULT _stdcall AddDocNewString(void);
    [id(0x00000027)]
    HRESULT _stdcall DeleteStringDoc(void);
    [id(0x00000028)]
    HRESULT _stdcall DeleteDoc([in] BSTR Id);
    [id(0x00000029)]
    HRESULT _stdcall GetIdDocPoNomeruDoc([in] int number_doc, [in] DATE date_doc, [out, retval] BSTR* id_doc);
    [id(0x0000002A)]
    HRESULT _stdcall TableNext(void);
    [id(0x0000002B)]
    HRESULT _stdcall TableFirst(void);
    [propget, id(0x0000000A)]
    HRESULT _stdcall PrefiksDoc([out, retval] BSTR* Value);
    [propput, id(0x0000000A)]
    HRESULT _stdcall PrefiksDoc([in] BSTR Value);
    [propget, id(0x00000011)]
    HRESULT _stdcall NameBase([out, retval] BSTR* Value);
    [propget, id(0x000000C9)]
    HRESULT _stdcall DocAllIDBASE_GALLDOC([out, retval] BSTR* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall DocAllIDBASE_GALLDOC([in] BSTR Value);
  };

  [
    uuid(8B080649-063C-46B7-AB4B-F1555658555E), 
    version(1.0), 
    helpstring("Dispatch interface for OleDMDocSpisNom Object"), 
    dual, 
    oleautomation
  ]
  interface IOleDMDocSpisNom: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall TableEOF([out, retval] int* Value);
    [id(0x00000004)]
    HRESULT _stdcall TableNext(void);
    [id(0x00000005)]
    HRESULT _stdcall TableFirst(void);
    [propget, id(0x00000006)]
    HRESULT _stdcall DocAllIDDOC([out, retval] BSTR* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall DocAllIDDOC([in] BSTR Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall DocAllPOSDOC([out, retval] BSTR* Value);
    [propput, id(0x00000007)]
    HRESULT _stdcall DocAllPOSDOC([in] BSTR Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall DocAllPRDOC([out, retval] int* Value);
    [propput, id(0x00000008)]
    HRESULT _stdcall DocAllPRDOC([in] int Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall DocAllTDOC([out, retval] BSTR* Value);
    [propput, id(0x00000009)]
    HRESULT _stdcall DocAllTDOC([in] BSTR Value);
    [propget, id(0x0000000A)]
    HRESULT _stdcall DocAllNUMDOC([out, retval] int* Value);
    [propput, id(0x0000000A)]
    HRESULT _stdcall DocAllNUMDOC([in] int Value);
    [propget, id(0x0000000B)]
    HRESULT _stdcall DocAllIDFIRMDOC([out, retval] BSTR* Value);
    [propput, id(0x0000000B)]
    HRESULT _stdcall DocAllIDFIRMDOC([in] BSTR Value);
    [propget, id(0x0000000C)]
    HRESULT _stdcall DocAllIDSKLDOC([out, retval] BSTR* Value);
    [propput, id(0x0000000C)]
    HRESULT _stdcall DocAllIDSKLDOC([in] BSTR Value);
    [propget, id(0x0000000D)]
    HRESULT _stdcall DocAllIDKLDOC([out, retval] BSTR* Value);
    [propput, id(0x0000000D)]
    HRESULT _stdcall DocAllIDKLDOC([in] BSTR Value);
    [propget, id(0x0000000E)]
    HRESULT _stdcall DocAllSUMDOC([out, retval] double* Value);
    [propput, id(0x0000000E)]
    HRESULT _stdcall DocAllSUMDOC([in] double Value);
    [propget, id(0x0000000F)]
    HRESULT _stdcall DocIDSPN([out, retval] BSTR* Value);
    [propput, id(0x0000000F)]
    HRESULT _stdcall DocIDSPN([in] BSTR Value);
    [propget, id(0x00000010)]
    HRESULT _stdcall DocIDDOCSPN([out, retval] BSTR* Value);
    [propput, id(0x00000010)]
    HRESULT _stdcall DocIDDOCSPN([in] BSTR Value);
    [propget, id(0x00000011)]
    HRESULT _stdcall DocPRIMSPN([out, retval] BSTR* Value);
    [propput, id(0x00000011)]
    HRESULT _stdcall DocPRIMSPN([in] BSTR Value);
    [propget, id(0x00000012)]
    HRESULT _stdcall DocTIDSPNT([out, retval] BSTR* Value);
    [propput, id(0x00000012)]
    HRESULT _stdcall DocTIDSPNT([in] BSTR Value);
    [propget, id(0x00000013)]
    HRESULT _stdcall DocTIDDOCSPNT([out, retval] BSTR* Value);
    [propput, id(0x00000013)]
    HRESULT _stdcall DocTIDDOCSPNT([in] BSTR Value);
    [propget, id(0x00000014)]
    HRESULT _stdcall DocTIDNOMSPNT([out, retval] BSTR* Value);
    [propput, id(0x00000014)]
    HRESULT _stdcall DocTIDNOMSPNT([in] BSTR Value);
    [propget, id(0x00000015)]
    HRESULT _stdcall DocTIDEDSPNT([out, retval] BSTR* Value);
    [propput, id(0x00000015)]
    HRESULT _stdcall DocTIDEDSPNT([in] BSTR Value);
    [propget, id(0x00000016)]
    HRESULT _stdcall DocTKOLSPNT([out, retval] double* Value);
    [propput, id(0x00000016)]
    HRESULT _stdcall DocTKOLSPNT([in] double Value);
    [propget, id(0x00000017)]
    HRESULT _stdcall DocTKFSPNT([out, retval] double* Value);
    [propput, id(0x00000017)]
    HRESULT _stdcall DocTKFSPNT([in] double Value);
    [propget, id(0x00000018)]
    HRESULT _stdcall DocTPRICESPNT([out, retval] double* Value);
    [propput, id(0x00000018)]
    HRESULT _stdcall DocTPRICESPNT([in] double Value);
    [propget, id(0x00000019)]
    HRESULT _stdcall DocTSUMSPNT([out, retval] double* Value);
    [propput, id(0x00000019)]
    HRESULT _stdcall DocTSUMSPNT([in] double Value);
    [propget, id(0x0000001A)]
    HRESULT _stdcall DocTNAMENOM([out, retval] BSTR* Value);
    [propget, id(0x0000001B)]
    HRESULT _stdcall DocTNAMEED([out, retval] BSTR* Value);
    [propget, id(0x0000001C)]
    HRESULT _stdcall DocAllGID_DOC([out, retval] BSTR* Value);
    [propput, id(0x0000001C)]
    HRESULT _stdcall DocAllGID_DOC([in] BSTR Value);
    [propget, id(0x0000001D)]
    HRESULT _stdcall DocGID_DSPN([out, retval] BSTR* Value);
    [propput, id(0x0000001D)]
    HRESULT _stdcall DocGID_DSPN([in] BSTR Value);
    [propget, id(0x0000001E)]
    HRESULT _stdcall DocTGID_DSPNT([out, retval] BSTR* Value);
    [propput, id(0x0000001E)]
    HRESULT _stdcall DocTGID_DSPNT([in] BSTR Value);
    [id(0x0000001F)]
    HRESULT _stdcall NewDoc(void);
    [id(0x00000020)]
    HRESULT _stdcall OpenDoc([in] BSTR IdDoc);
    [id(0x00000021)]
    HRESULT _stdcall SaveDoc(void);
    [id(0x00000022)]
    HRESULT _stdcall DvRegDoc(void);
    [id(0x00000023)]
    HRESULT _stdcall CancelDvRegDoc(void);
    [id(0x00000024)]
    HRESULT _stdcall AddDocNewString(void);
    [id(0x00000025)]
    HRESULT _stdcall DeleteStringDoc(void);
    [id(0x00000026)]
    HRESULT _stdcall CloseDoc(void);
    [id(0x00000027)]
    HRESULT _stdcall DeleteDoc([in] BSTR Id);
    [propget, id(0x00000028)]
    HRESULT _stdcall PrefiksDoc([out, retval] BSTR* Value);
    [propput, id(0x00000028)]
    HRESULT _stdcall PrefiksDoc([in] BSTR Value);
    [propget, id(0x00000029)]
    HRESULT _stdcall NameBase([out, retval] BSTR* Value);
    [propget, id(0x000000C9)]
    HRESULT _stdcall DocAllIDBASE_GALLDOC([out, retval] BSTR* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall DocAllIDBASE_GALLDOC([in] BSTR Value);
  };

  [
    uuid(38DC6630-17D6-42FC-B528-A2C9A6047C38), 
    version(1.0), 
    helpstring("Dispatch interface for OleDMDocOstNom Object"), 
    dual, 
    oleautomation
  ]
  interface IOleDMDocOstNom: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall TableEOF([out, retval] int* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall DocIDOCN([out, retval] BSTR* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall DocIDOCN([in] BSTR Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall DocPRIMOSN([out, retval] BSTR* Value);
    [propput, id(0x00000005)]
    HRESULT _stdcall DocPRIMOSN([in] BSTR Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall DocIDDOCOSN([out, retval] BSTR* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall DocIDDOCOSN([in] BSTR Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall DocAllIDDOC([out, retval] BSTR* Value);
    [propput, id(0x00000007)]
    HRESULT _stdcall DocAllIDDOC([in] BSTR Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall DocAllPOSDOC([out, retval] BSTR* Value);
    [propput, id(0x00000008)]
    HRESULT _stdcall DocAllPOSDOC([in] BSTR Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall DocAllPRDOC([out, retval] int* Value);
    [propput, id(0x00000009)]
    HRESULT _stdcall DocAllPRDOC([in] int Value);
    [propget, id(0x0000000A)]
    HRESULT _stdcall DocAllTDOC([out, retval] BSTR* Value);
    [propput, id(0x0000000A)]
    HRESULT _stdcall DocAllTDOC([in] BSTR Value);
    [propget, id(0x0000000B)]
    HRESULT _stdcall DocAllNUMDOC([out, retval] int* Value);
    [propput, id(0x0000000B)]
    HRESULT _stdcall DocAllNUMDOC([in] int Value);
    [propget, id(0x0000000C)]
    HRESULT _stdcall DocAllIDFIRMDOC([out, retval] BSTR* Value);
    [propput, id(0x0000000C)]
    HRESULT _stdcall DocAllIDFIRMDOC([in] BSTR Value);
    [propget, id(0x0000000D)]
    HRESULT _stdcall DocAllIDSKLDOC([out, retval] BSTR* Value);
    [propput, id(0x0000000D)]
    HRESULT _stdcall DocAllIDSKLDOC([in] BSTR Value);
    [propget, id(0x0000000E)]
    HRESULT _stdcall DocAllIDKLDOC([out, retval] BSTR* Value);
    [propput, id(0x0000000E)]
    HRESULT _stdcall DocAllIDKLDOC([in] BSTR Value);
    [propget, id(0x0000000F)]
    HRESULT _stdcall DocAllSUMDOC([out, retval] double* Value);
    [propput, id(0x0000000F)]
    HRESULT _stdcall DocAllSUMDOC([in] double Value);
    [propget, id(0x00000010)]
    HRESULT _stdcall DocAllIDUSERDOC([out, retval] BSTR* Value);
    [propput, id(0x00000010)]
    HRESULT _stdcall DocAllIDUSERDOC([in] BSTR Value);
    [propget, id(0x00000011)]
    HRESULT _stdcall DocAllFNAMEUSER([out, retval] BSTR* Value);
    [propget, id(0x00000012)]
    HRESULT _stdcall DocIDTPRICEOSN([out, retval] BSTR* Value);
    [propput, id(0x00000012)]
    HRESULT _stdcall DocIDTPRICEOSN([in] BSTR Value);
    [propget, id(0x00000013)]
    HRESULT _stdcall DocNAME_TPRICE([out, retval] BSTR* Value);
    [propget, id(0x00000014)]
    HRESULT _stdcall DocTIDOSNT([out, retval] BSTR* Value);
    [propput, id(0x00000014)]
    HRESULT _stdcall DocTIDOSNT([in] BSTR Value);
    [propget, id(0x00000015)]
    HRESULT _stdcall DocTIDDOCOSNT([out, retval] BSTR* Value);
    [propput, id(0x00000015)]
    HRESULT _stdcall DocTIDDOCOSNT([in] BSTR Value);
    [propget, id(0x00000016)]
    HRESULT _stdcall DocTIDNOMOSNT([out, retval] BSTR* Value);
    [propput, id(0x00000016)]
    HRESULT _stdcall DocTIDNOMOSNT([in] BSTR Value);
    [propget, id(0x00000017)]
    HRESULT _stdcall DocTIDEDOSNT([out, retval] BSTR* Value);
    [propput, id(0x00000017)]
    HRESULT _stdcall DocTIDEDOSNT([in] BSTR Value);
    [propget, id(0x00000018)]
    HRESULT _stdcall DocTIDPARTOSNT([out, retval] BSTR* Value);
    [propput, id(0x00000018)]
    HRESULT _stdcall DocTIDPARTOSNT([in] BSTR Value);
    [propget, id(0x00000019)]
    HRESULT _stdcall DocTKOLOSNT([out, retval] double* Value);
    [propput, id(0x00000019)]
    HRESULT _stdcall DocTKOLOSNT([in] double Value);
    [propget, id(0x0000001A)]
    HRESULT _stdcall DocTKFOSNT([out, retval] double* Value);
    [propput, id(0x0000001A)]
    HRESULT _stdcall DocTKFOSNT([in] double Value);
    [propget, id(0x0000001B)]
    HRESULT _stdcall DocTPRICEOSNT([out, retval] double* Value);
    [propput, id(0x0000001B)]
    HRESULT _stdcall DocTPRICEOSNT([in] double Value);
    [propget, id(0x0000001C)]
    HRESULT _stdcall DocTSUMOSNT([out, retval] double* Value);
    [propput, id(0x0000001C)]
    HRESULT _stdcall DocTSUMOSNT([in] double Value);
    [propget, id(0x0000001D)]
    HRESULT _stdcall DocTNAMENOM([out, retval] BSTR* Value);
    [propget, id(0x0000001E)]
    HRESULT _stdcall DocTNAMEED([out, retval] BSTR* Value);
    [propget, id(0x0000001F)]
    HRESULT _stdcall DocAllGID_DOC([out, retval] BSTR* Value);
    [propput, id(0x0000001F)]
    HRESULT _stdcall DocAllGID_DOC([in] BSTR Value);
    [propget, id(0x00000020)]
    HRESULT _stdcall DocGID_DOSN([out, retval] BSTR* Value);
    [propput, id(0x00000020)]
    HRESULT _stdcall DocGID_DOSN([in] BSTR Value);
    [propget, id(0x00000021)]
    HRESULT _stdcall DocTGID_DOSNT([out, retval] BSTR* Value);
    [propput, id(0x00000021)]
    HRESULT _stdcall DocTGID_DOSNT([in] BSTR Value);
    [id(0x00000022)]
    HRESULT _stdcall NewDoc(void);
    [id(0x00000023)]
    HRESULT _stdcall OpenDoc([in] BSTR IdDoc);
    [id(0x00000024)]
    HRESULT _stdcall SaveDoc(void);
    [id(0x00000025)]
    HRESULT _stdcall CloseDoc(void);
    [id(0x00000026)]
    HRESULT _stdcall DvRegDoc(void);
    [id(0x00000027)]
    HRESULT _stdcall CancelDvRegDoc(void);
    [id(0x00000028)]
    HRESULT _stdcall AddDocNewString(void);
    [id(0x00000029)]
    HRESULT _stdcall DeleteStringDoc(void);
    [id(0x0000002A)]
    HRESULT _stdcall DeleteDoc([in] BSTR Id);
    [id(0x0000002B)]
    HRESULT _stdcall GetIdDocPoNomeruDoc([in] int number_doc, [in] DATE date_doc, [out, retval] BSTR* id_doc);
    [id(0x0000002C)]
    HRESULT _stdcall TableFirst(void);
    [id(0x0000002D)]
    HRESULT _stdcall TableNext(void);
    [propget, id(0x0000002E)]
    HRESULT _stdcall DocTTNOM([out, retval] int* Value);
    [propput, id(0x0000002E)]
    HRESULT _stdcall DocTTNOM([in] int Value);
    [propget, id(0x0000002F)]
    HRESULT _stdcall PrefiksDoc([out, retval] BSTR* Value);
    [propput, id(0x0000002F)]
    HRESULT _stdcall PrefiksDoc([in] BSTR Value);
    [propget, id(0x00000030)]
    HRESULT _stdcall NameBase([out, retval] BSTR* Value);
    [propget, id(0x000000C9)]
    HRESULT _stdcall DocAllIDBASE_GALLDOC([out, retval] BSTR* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall DocAllIDBASE_GALLDOC([in] BSTR Value);
  };

  [
    uuid(D8FD7D0D-A464-40C9-8530-852FB721E035), 
    version(1.0), 
    helpstring("Dispatch interface for OleDMSprInfBase Object"), 
    dual, 
    oleautomation
  ]
  interface IOleDMSprInfBase: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall NameBase([out, retval] BSTR* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall PrefiksBase([out, retval] BSTR* Value);
    [id(0x00000003)]
    HRESULT _stdcall TableNext(void);
    [propget, id(0x00000004)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall TableEOF([out, retval] int* Value);
    [id(0x00000007)]
    HRESULT _stdcall OpenTable(void);
    [id(0x00000008)]
    HRESULT _stdcall TableFirst(void);
    [id(0x000000C9)]
    HRESULT _stdcall GetIdPoName([in] BSTR name, [out, retval] BSTR* Id);
  };

  [
    uuid(0C7F069C-F727-4C30-AF70-28D56BDA6232), 
    version(1.0), 
    helpstring("OleDMGurAllDoc Object")
  ]
  coclass OleDMGurAllDoc
  {
    [default] interface IOleDMGurAllDoc;
  };

  [
    uuid(5ACCEFEF-42EE-4D8B-8651-38A36C647263), 
    version(1.0), 
    helpstring("OleDM Object")
  ]
  coclass OleDM
  {
    [default] interface IOleDM;
  };

  [
    uuid(9211AAB2-DB04-4B5D-A58F-2C75914E98AE), 
    version(1.0), 
    helpstring("OleDMSprSklad Object")
  ]
  coclass OleDMSprSklad
  {
    [default] interface IOleDMSprSklad;
  };

  [
    uuid(F97F36F8-3028-4137-BCFE-3CB688307676), 
    version(1.0), 
    helpstring("OleDMSprFirm Object")
  ]
  coclass OleDMSprFirm
  {
    [default] interface IOleDMSprFirm;
  };

  [
    uuid(33B3A2F9-A013-4EAC-A789-392293C8BB02), 
    version(1.0), 
    helpstring("OleDMSprNom Object")
  ]
  coclass OleDMSprNom
  {
    [default] interface IOleDMSprNom;
  };

  [
    uuid(FC78D318-C8DD-4958-9F54-5D0CC9104AAE), 
    version(1.0), 
    helpstring("OleDMSprEd Object")
  ]
  coclass OleDMSprEd
  {
    [default] interface IOleDMSprEd;
  };

  [
    uuid(243D2465-0A38-4386-B56B-812762A1C8EA), 
    version(1.0), 
    helpstring("OleDMDocRepKKM Object")
  ]
  coclass OleDMDocRepKKM
  {
    [default] interface IOleDMDocRepKKM;
  };

  [
    uuid(B2F95F97-7808-4C5B-9C54-E0540EB1607A), 
    version(1.0), 
    helpstring("OleDMSprGrpNom Object")
  ]
  coclass OleDMSprGrpNom
  {
    [default] interface IOleDMSprGrpNom;
  };

  [
    uuid(8E0175B5-F301-4761-BEB1-ACE6DC556228), 
    version(1.0), 
    helpstring("OleDMSprTypePrice Object")
  ]
  coclass OleDMSprTypePrice
  {
    [default] interface IOleDMSprTypePrice;
  };

  [
    uuid(EF431542-F473-43BC-914C-73AEC77EB4B0), 
    version(1.0), 
    helpstring("OleDMSprPrice Object")
  ]
  coclass OleDMSprPrice
  {
    [default] interface IOleDMSprPrice;
  };

  [
    uuid(EF156EFE-CA13-415E-A4DC-EF6C3FAB8B59), 
    version(1.0), 
    helpstring("OleDMDocPer Object")
  ]
  coclass OleDMDocPer
  {
    [default] interface IOleDMDocPer;
  };

  [
    uuid(3CAEA598-1689-40ED-9102-874FB89B9FF3), 
    version(1.0), 
    helpstring("OleDMDocPrihNakl Object")
  ]
  coclass OleDMDocPrihNakl
  {
    [default] interface IOleDMDocPrihNakl;
  };

  [
    uuid(C8A9095E-0961-49A2-9558-20DC25C87675), 
    version(1.0), 
    helpstring("OleDMDocInv Object")
  ]
  coclass OleDMDocReal
  {
    [default] interface IOleDMDocReal;
  };

  [
    uuid(73F7166B-6192-4DCA-BFEF-5777841BD870), 
    version(1.0), 
    helpstring("OleDMDocSpisNom Object")
  ]
  coclass OleDMDocSpisNom
  {
    [default] interface IOleDMDocSpisNom;
  };

  [
    uuid(47808F00-360B-4A0A-847B-50BA0A106D2A), 
    version(1.0), 
    helpstring("OleDMDocOstNom Object")
  ]
  coclass OleDMDocOstNom
  {
    [default] interface IOleDMDocOstNom;
  };

  [
    uuid(261FEA00-60AD-49C2-8785-3AFD2C1DF845), 
    version(1.0), 
    helpstring("OleDMSprInfBase Object")
  ]
  coclass OleDMSprInfBase
  {
    [default] interface IOleDMSprInfBase;
  };

};