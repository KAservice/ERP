// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 5081 $
// File generated on 26.11.2009 11:09:45 from Type Library described below.

// ************************************************************************  //
// Type Lib: K:\Program\FIBPlus\DBServ10\DBServ10.tlb (1)
// LIBID: {3F05B876-7B55-41DD-AB32-DA8BF9369FB4}
// LCID: 0
// Helpfile: 
// HelpString: DBServ10 Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   DBServ10_TLBH
#define   DBServ10_TLBH

#pragma option push -b -w-inl

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Dbserv10_tlb
{

// *********************************************************************//
// HelpString: DBServ10 Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_DBServ10;
extern __declspec (package) const GUID IID_IOleDMGurAllDoc;
extern __declspec (package) const GUID CLSID_OleDMGurAllDoc;
extern __declspec (package) const GUID IID_IOleDM;
extern __declspec (package) const GUID CLSID_OleDM;
extern __declspec (package) const GUID IID_IOleDMSprSklad;
extern __declspec (package) const GUID CLSID_OleDMSprSklad;
extern __declspec (package) const GUID IID_IOleDMSprFirm;
extern __declspec (package) const GUID CLSID_OleDMSprFirm;
extern __declspec (package) const GUID IID_IOleDMSprNom;
extern __declspec (package) const GUID CLSID_OleDMSprNom;
extern __declspec (package) const GUID IID_IOleDMSprEd;
extern __declspec (package) const GUID CLSID_OleDMSprEd;
extern __declspec (package) const GUID IID_IOleDMDocRepKKM;
extern __declspec (package) const GUID CLSID_OleDMDocRepKKM;
extern __declspec (package) const GUID IID_IOleDMSprGrpNom;
extern __declspec (package) const GUID CLSID_OleDMSprGrpNom;
extern __declspec (package) const GUID IID_IOleDMSprTypePrice;
extern __declspec (package) const GUID CLSID_OleDMSprTypePrice;
extern __declspec (package) const GUID IID_IOleDMSprPrice;
extern __declspec (package) const GUID CLSID_OleDMSprPrice;
extern __declspec (package) const GUID IID_IOleDMDocPer;
extern __declspec (package) const GUID CLSID_OleDMDocPer;
extern __declspec (package) const GUID IID_IOleDMDocPrihNakl;
extern __declspec (package) const GUID CLSID_OleDMDocPrihNakl;
extern __declspec (package) const GUID IID_IOleDMDocReal;
extern __declspec (package) const GUID CLSID_OleDMDocReal;
extern __declspec (package) const GUID IID_IOleDMDocSpisNom;
extern __declspec (package) const GUID CLSID_OleDMDocSpisNom;
extern __declspec (package) const GUID IID_IOleDMDocOstNom;
extern __declspec (package) const GUID CLSID_OleDMDocOstNom;
extern __declspec (package) const GUID IID_IOleDMSprInfBase;
extern __declspec (package) const GUID CLSID_OleDMSprInfBase;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{A02C7199-FA6C-428C-9023-6A07FC678FB3}") IOleDMGurAllDoc;
typedef TComInterface<IOleDMGurAllDoc, &IID_IOleDMGurAllDoc> IOleDMGurAllDocPtr;

interface DECLSPEC_UUID("{1A440201-6AC2-4B65-A0E7-1092675C2A3F}") IOleDM;
typedef TComInterface<IOleDM, &IID_IOleDM> IOleDMPtr;

interface DECLSPEC_UUID("{5B2971DD-B19A-4FC3-BEDC-3E05B157FE9A}") IOleDMSprSklad;
typedef TComInterface<IOleDMSprSklad, &IID_IOleDMSprSklad> IOleDMSprSkladPtr;

interface DECLSPEC_UUID("{C22EF17E-FDD9-48D0-9FE4-59AE225450D2}") IOleDMSprFirm;
typedef TComInterface<IOleDMSprFirm, &IID_IOleDMSprFirm> IOleDMSprFirmPtr;

interface DECLSPEC_UUID("{EB727574-CFC8-449E-AB6B-FC507E173833}") IOleDMSprNom;
typedef TComInterface<IOleDMSprNom, &IID_IOleDMSprNom> IOleDMSprNomPtr;

interface DECLSPEC_UUID("{A7FF2337-C284-4BDC-84C5-5EB62FD8058C}") IOleDMSprEd;
typedef TComInterface<IOleDMSprEd, &IID_IOleDMSprEd> IOleDMSprEdPtr;

interface DECLSPEC_UUID("{500BC744-0B7A-4DB5-AF7C-6B6B296C3B8B}") IOleDMDocRepKKM;
typedef TComInterface<IOleDMDocRepKKM, &IID_IOleDMDocRepKKM> IOleDMDocRepKKMPtr;

interface DECLSPEC_UUID("{122A380E-AADA-46E5-AE13-7BC1C518942C}") IOleDMSprGrpNom;
typedef TComInterface<IOleDMSprGrpNom, &IID_IOleDMSprGrpNom> IOleDMSprGrpNomPtr;

interface DECLSPEC_UUID("{03AE0B1D-6050-471A-AFA2-2F5E0B1ADDED}") IOleDMSprTypePrice;
typedef TComInterface<IOleDMSprTypePrice, &IID_IOleDMSprTypePrice> IOleDMSprTypePricePtr;

interface DECLSPEC_UUID("{81AAC7FF-6A90-4E54-B3FE-AF265465B0EB}") IOleDMSprPrice;
typedef TComInterface<IOleDMSprPrice, &IID_IOleDMSprPrice> IOleDMSprPricePtr;

interface DECLSPEC_UUID("{906D0C92-DE95-4FA2-9DE4-4E4DCA7242A1}") IOleDMDocPer;
typedef TComInterface<IOleDMDocPer, &IID_IOleDMDocPer> IOleDMDocPerPtr;

interface DECLSPEC_UUID("{68D9AE11-D691-410E-8E27-AD1CF6A3CA54}") IOleDMDocPrihNakl;
typedef TComInterface<IOleDMDocPrihNakl, &IID_IOleDMDocPrihNakl> IOleDMDocPrihNaklPtr;

interface DECLSPEC_UUID("{A9B32F6B-0BBA-4CFA-AEF1-312AA488A02F}") IOleDMDocReal;
typedef TComInterface<IOleDMDocReal, &IID_IOleDMDocReal> IOleDMDocRealPtr;

interface DECLSPEC_UUID("{8B080649-063C-46B7-AB4B-F1555658555E}") IOleDMDocSpisNom;
typedef TComInterface<IOleDMDocSpisNom, &IID_IOleDMDocSpisNom> IOleDMDocSpisNomPtr;

interface DECLSPEC_UUID("{38DC6630-17D6-42FC-B528-A2C9A6047C38}") IOleDMDocOstNom;
typedef TComInterface<IOleDMDocOstNom, &IID_IOleDMDocOstNom> IOleDMDocOstNomPtr;

interface DECLSPEC_UUID("{D8FD7D0D-A464-40C9-8530-852FB721E035}") IOleDMSprInfBase;
typedef TComInterface<IOleDMSprInfBase, &IID_IOleDMSprInfBase> IOleDMSprInfBasePtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IOleDMGurAllDoc OleDMGurAllDoc;
typedef IOleDMGurAllDocPtr OleDMGurAllDocPtr;
typedef IOleDM OleDM;
typedef IOleDMPtr OleDMPtr;
typedef IOleDMSprSklad OleDMSprSklad;
typedef IOleDMSprSkladPtr OleDMSprSkladPtr;
typedef IOleDMSprFirm OleDMSprFirm;
typedef IOleDMSprFirmPtr OleDMSprFirmPtr;
typedef IOleDMSprNom OleDMSprNom;
typedef IOleDMSprNomPtr OleDMSprNomPtr;
typedef IOleDMSprEd OleDMSprEd;
typedef IOleDMSprEdPtr OleDMSprEdPtr;
typedef IOleDMDocRepKKM OleDMDocRepKKM;
typedef IOleDMDocRepKKMPtr OleDMDocRepKKMPtr;
typedef IOleDMSprGrpNom OleDMSprGrpNom;
typedef IOleDMSprGrpNomPtr OleDMSprGrpNomPtr;
typedef IOleDMSprTypePrice OleDMSprTypePrice;
typedef IOleDMSprTypePricePtr OleDMSprTypePricePtr;
typedef IOleDMSprPrice OleDMSprPrice;
typedef IOleDMSprPricePtr OleDMSprPricePtr;
typedef IOleDMDocPer OleDMDocPer;
typedef IOleDMDocPerPtr OleDMDocPerPtr;
typedef IOleDMDocPrihNakl OleDMDocPrihNakl;
typedef IOleDMDocPrihNaklPtr OleDMDocPrihNaklPtr;
typedef IOleDMDocReal OleDMDocReal;
typedef IOleDMDocRealPtr OleDMDocRealPtr;
typedef IOleDMDocSpisNom OleDMDocSpisNom;
typedef IOleDMDocSpisNomPtr OleDMDocSpisNomPtr;
typedef IOleDMDocOstNom OleDMDocOstNom;
typedef IOleDMDocOstNomPtr OleDMDocOstNomPtr;
typedef IOleDMSprInfBase OleDMSprInfBase;
typedef IOleDMSprInfBasePtr OleDMSprInfBasePtr;

#define LIBID_OF_OleDMGurAllDoc (&LIBID_DBServ10)
#define LIBID_OF_OleDM (&LIBID_DBServ10)
#define LIBID_OF_OleDMSprSklad (&LIBID_DBServ10)
#define LIBID_OF_OleDMSprFirm (&LIBID_DBServ10)
#define LIBID_OF_OleDMSprNom (&LIBID_DBServ10)
#define LIBID_OF_OleDMSprEd (&LIBID_DBServ10)
#define LIBID_OF_OleDMDocRepKKM (&LIBID_DBServ10)
#define LIBID_OF_OleDMSprGrpNom (&LIBID_DBServ10)
#define LIBID_OF_OleDMSprTypePrice (&LIBID_DBServ10)
#define LIBID_OF_OleDMSprPrice (&LIBID_DBServ10)
#define LIBID_OF_OleDMDocPer (&LIBID_DBServ10)
#define LIBID_OF_OleDMDocPrihNakl (&LIBID_DBServ10)
#define LIBID_OF_OleDMDocReal (&LIBID_DBServ10)
#define LIBID_OF_OleDMDocSpisNom (&LIBID_DBServ10)
#define LIBID_OF_OleDMDocOstNom (&LIBID_DBServ10)
#define LIBID_OF_OleDMSprInfBase (&LIBID_DBServ10)
// *********************************************************************//
// Interface: IOleDMGurAllDoc
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A02C7199-FA6C-428C-9023-6A07FC678FB3}
// *********************************************************************//
interface IOleDMGurAllDoc  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_IdDoc(BSTR* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_IdDoc(BSTR Value/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_PosDoc(BSTR* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_PosDoc(BSTR Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_PrDoc(int* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_PrDoc(int Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_NumDoc(int* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_NumDoc(int Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_IdFirmDoc(BSTR* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_IdFirmDoc(BSTR Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_IdSklDoc(BSTR* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_IdSklDoc(BSTR Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_IdKlDoc(BSTR* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_IdKlDoc(BSTR Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_SumDoc(double* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_SumDoc(double Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_NameFirm(BSTR* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_NameFirm(BSTR Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_NameSklad(BSTR* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_NameSklad(BSTR Value/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_NameKlient(BSTR* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_NameKlient(BSTR Value/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_NameUser(BSTR* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_NameUser(BSTR Value/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_IdUserDoc(BSTR* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_IdUserDoc(BSTR Value/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_TDoc(BSTR* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE set_TDoc(BSTR Value/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_TableEOF(int* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(void) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE UpdateTable(void) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE FindDocPoIdDog(int iddogovor/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_StringTypeDoc(BSTR* Value/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_StringTypeDoc(BSTR Value/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_OtborVkl(int* Value/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_OtborVkl(int Value/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_PosNach(BSTR* Value/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_PosNach(BSTR Value/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_PosCon(BSTR* Value/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE set_PosCon(BSTR Value/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [26]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_IdDoc(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdDoc((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_PosDoc(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_PosDoc((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_PrDoc(void)
  {
    int Value;
    OLECHECK(this->get_PrDoc((int*)&Value));
    return Value;
  }

  int __fastcall get_NumDoc(void)
  {
    int Value;
    OLECHECK(this->get_NumDoc((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_IdFirmDoc(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdFirmDoc((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_IdSklDoc(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdSklDoc((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_IdKlDoc(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdKlDoc((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_SumDoc(void)
  {
    double Value;
    OLECHECK(this->get_SumDoc((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_NameFirm(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NameFirm((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_NameSklad(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NameSklad((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_NameKlient(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NameKlient((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_NameUser(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NameUser((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_IdUserDoc(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdUserDoc((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TDoc(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TDoc((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_TableEOF(void)
  {
    int Value;
    OLECHECK(this->get_TableEOF((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_StringTypeDoc(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_StringTypeDoc((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_OtborVkl(void)
  {
    int Value;
    OLECHECK(this->get_OtborVkl((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_PosNach(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_PosNach((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_PosCon(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_PosCon((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }


  __property   BSTR            IdDoc = {read = get_IdDoc, write = set_IdDoc};
  __property   BSTR            PosDoc = {read = get_PosDoc, write = set_PosDoc};
  __property   int             PrDoc = {read = get_PrDoc, write = set_PrDoc};
  __property   int             NumDoc = {read = get_NumDoc, write = set_NumDoc};
  __property   BSTR            IdFirmDoc = {read = get_IdFirmDoc, write = set_IdFirmDoc};
  __property   BSTR            IdSklDoc = {read = get_IdSklDoc, write = set_IdSklDoc};
  __property   BSTR            IdKlDoc = {read = get_IdKlDoc, write = set_IdKlDoc};
  __property   double          SumDoc = {read = get_SumDoc, write = set_SumDoc};
  __property   BSTR            NameFirm = {read = get_NameFirm, write = set_NameFirm};
  __property   BSTR            NameSklad = {read = get_NameSklad, write = set_NameSklad};
  __property   BSTR            NameKlient = {read = get_NameKlient, write = set_NameKlient};
  __property   BSTR            NameUser = {read = get_NameUser, write = set_NameUser};
  __property   BSTR            IdUserDoc = {read = get_IdUserDoc, write = set_IdUserDoc};
  __property   BSTR            TDoc = {read = get_TDoc, write = set_TDoc};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            StringTypeDoc = {read = get_StringTypeDoc, write = set_StringTypeDoc};
  __property   int             OtborVkl = {read = get_OtborVkl, write = set_OtborVkl};
  __property   BSTR            PosNach = {read = get_PosNach, write = set_PosNach};
  __property   BSTR            PosCon = {read = get_PosCon, write = set_PosCon};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDM
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1A440201-6AC2-4B65-A0E7-1092675C2A3F}
// *********************************************************************//
interface IOleDM  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ConnectString(BSTR* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_ConnectString(BSTR Value/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_NameUser(BSTR* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_NameUser(BSTR Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_PasswordUser(BSTR* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_PasswordUser(BSTR Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE GlobConnect(void) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectOK(int* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_OleTextError(BSTR* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_OleCodeError(int* Value/*[out,retval]*/) = 0; // [7]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ConnectString(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ConnectString((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_NameUser(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NameUser((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_PasswordUser(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_PasswordUser((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_ConnectOK(void)
  {
    int Value;
    OLECHECK(this->get_ConnectOK((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_OleTextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_OleTextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_OleCodeError(void)
  {
    int Value;
    OLECHECK(this->get_OleCodeError((int*)&Value));
    return Value;
  }


  __property   BSTR            ConnectString = {read = get_ConnectString, write = set_ConnectString};
  __property   BSTR            NameUser = {read = get_NameUser, write = set_NameUser};
  __property   BSTR            PasswordUser = {read = get_PasswordUser, write = set_PasswordUser};
  __property   int             ConnectOK = {read = get_ConnectOK};
  __property   BSTR            OleTextError = {read = get_OleTextError};
  __property   int             OleCodeError = {read = get_OleCodeError};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMSprSklad
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5B2971DD-B19A-4FC3-BEDC-3E05B157FE9A}
// *********************************************************************//
interface IOleDMSprSklad  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_IdSklad(BSTR* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_IdSklad(BSTR Value/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_NameSklad(BSTR* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_NameSklad(BSTR Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_MolSklad(BSTR* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_MolSklad(BSTR Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_AdrSklad(BSTR* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_AdrSklad(BSTR Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_TSklad(int* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_TSklad(int Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_GID_Sklad(BSTR* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_GID_Sklad(BSTR Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE OpenElement(BSTR Id/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE NewElement(void) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE SaveElement(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE DeleteElement(BSTR Id/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_TableEOF(int* Value/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE CloseElement(void) = 0; // [7]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_IdSklad(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdSklad((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_NameSklad(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NameSklad((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_MolSklad(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_MolSklad((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_AdrSklad(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_AdrSklad((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_TSklad(void)
  {
    int Value;
    OLECHECK(this->get_TSklad((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_GID_Sklad(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_GID_Sklad((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall GetIdElement(BSTR gid/*[in]*/)
  {
    BSTR Id = 0;
    OLECHECK(this->GetIdElement(gid, (BSTR*)&Id));
    return Id;
  }

  BSTR __fastcall GetGidElement(BSTR Id/*[in]*/)
  {
    BSTR gid = 0;
    OLECHECK(this->GetGidElement(Id, (BSTR*)&gid));
    return gid;
  }

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_TableEOF(void)
  {
    int Value;
    OLECHECK(this->get_TableEOF((int*)&Value));
    return Value;
  }


  __property   BSTR            IdSklad = {read = get_IdSklad, write = set_IdSklad};
  __property   BSTR            NameSklad = {read = get_NameSklad, write = set_NameSklad};
  __property   BSTR            MolSklad = {read = get_MolSklad, write = set_MolSklad};
  __property   BSTR            AdrSklad = {read = get_AdrSklad, write = set_AdrSklad};
  __property   int             TSklad = {read = get_TSklad, write = set_TSklad};
  __property   BSTR            GID_Sklad = {read = get_GID_Sklad, write = set_GID_Sklad};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMSprFirm
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C22EF17E-FDD9-48D0-9FE4-59AE225450D2}
// *********************************************************************//
interface IOleDMSprFirm  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_IdFirm(BSTR* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_IdFirm(BSTR Value/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_NameFirm(BSTR* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_NameFirm(BSTR Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_FNameNom(BSTR* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_FNameNom(BSTR Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_PAdrFirm(BSTR* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_PAdrFirm(BSTR Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_UAdrFirm(BSTR* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_UAdrFirm(BSTR Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_INNFirm(BSTR* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_INNFirm(BSTR Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_KPPFirm(BSTR* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_KPPFirm(BSTR Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_GID_Firm(BSTR* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_GID_Firm(BSTR Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE OpenElement(BSTR Id/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE NewElement(void) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE SaveElement(void) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE DeleteElement(BSTR Id/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_TableEOF(int* Value/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE ElementEdit(void) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE ElementPost(void) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [21]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_IdFirm(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdFirm((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_NameFirm(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NameFirm((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_FNameNom(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_FNameNom((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_PAdrFirm(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_PAdrFirm((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_UAdrFirm(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_UAdrFirm((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_INNFirm(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_INNFirm((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_KPPFirm(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_KPPFirm((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_GID_Firm(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_GID_Firm((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall GetGidElement(BSTR Id/*[in]*/)
  {
    BSTR gid = 0;
    OLECHECK(this->GetGidElement(Id, (BSTR*)&gid));
    return gid;
  }

  int __fastcall get_TableEOF(void)
  {
    int Value;
    OLECHECK(this->get_TableEOF((int*)&Value));
    return Value;
  }


  __property   BSTR            IdFirm = {read = get_IdFirm, write = set_IdFirm};
  __property   BSTR            NameFirm = {read = get_NameFirm, write = set_NameFirm};
  __property   BSTR            FNameNom = {read = get_FNameNom, write = set_FNameNom};
  __property   BSTR            PAdrFirm = {read = get_PAdrFirm, write = set_PAdrFirm};
  __property   BSTR            UAdrFirm = {read = get_UAdrFirm, write = set_UAdrFirm};
  __property   BSTR            INNFirm = {read = get_INNFirm, write = set_INNFirm};
  __property   BSTR            KPPFirm = {read = get_KPPFirm, write = set_KPPFirm};
  __property   BSTR            GID_Firm = {read = get_GID_Firm, write = set_GID_Firm};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMSprNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB727574-CFC8-449E-AB6B-FC507E173833}
// *********************************************************************//
interface IOleDMSprNom  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_IdNom(BSTR* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_IdNom(BSTR Value/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_TNom(int* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_TNom(int Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_CodeNom(int* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_CodeNom(int Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_NameNom(BSTR* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_NameNom(BSTR Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_FNameNom(BSTR* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_FNameNom(BSTR Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_KrNameNom(BSTR* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_KrNameNom(BSTR Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_IdBasEdNom(BSTR* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_IdBasEdNom(BSTR Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_IdOsnEdNom(BSTR* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_IdOsnEdNom(BSTR Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_IdGrpNom(BSTR* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_IdGrpNom(BSTR Value/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_ArtNom(BSTR* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_ArtNom(BSTR Value/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_GID_SNom(BSTR* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_GID_SNom(BSTR Value/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_AllElement(int* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE set_AllElement(int Value/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_IdTypePrice(BSTR* Value/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_IdTypePrice(BSTR Value/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(BSTR Grp/*[in]*/, int All/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE OpenElement(BSTR Id/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE NewElement(BSTR IdGrp/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE SaveElement(void) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE DeleteElement(BSTR Id/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE ChancheGrp(BSTR NewGrp/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE FindPoCodu(int Code/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_TableEOF(int* Value/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [29]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_IdNom(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdNom((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_TNom(void)
  {
    int Value;
    OLECHECK(this->get_TNom((int*)&Value));
    return Value;
  }

  int __fastcall get_CodeNom(void)
  {
    int Value;
    OLECHECK(this->get_CodeNom((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_NameNom(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NameNom((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_FNameNom(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_FNameNom((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_KrNameNom(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_KrNameNom((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_IdBasEdNom(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdBasEdNom((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_IdOsnEdNom(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdOsnEdNom((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_IdGrpNom(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdGrpNom((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ArtNom(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ArtNom((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_GID_SNom(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_GID_SNom((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_AllElement(void)
  {
    int Value;
    OLECHECK(this->get_AllElement((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_IdTypePrice(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdTypePrice((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall GetIdElement(BSTR gid/*[in]*/)
  {
    BSTR Id = 0;
    OLECHECK(this->GetIdElement(gid, (BSTR*)&Id));
    return Id;
  }

  BSTR __fastcall GetGidElement(BSTR Id/*[in]*/)
  {
    BSTR gid = 0;
    OLECHECK(this->GetGidElement(Id, (BSTR*)&gid));
    return gid;
  }

  int __fastcall get_TableEOF(void)
  {
    int Value;
    OLECHECK(this->get_TableEOF((int*)&Value));
    return Value;
  }


  __property   BSTR            IdNom = {read = get_IdNom, write = set_IdNom};
  __property   int             TNom = {read = get_TNom, write = set_TNom};
  __property   int             CodeNom = {read = get_CodeNom, write = set_CodeNom};
  __property   BSTR            NameNom = {read = get_NameNom, write = set_NameNom};
  __property   BSTR            FNameNom = {read = get_FNameNom, write = set_FNameNom};
  __property   BSTR            KrNameNom = {read = get_KrNameNom, write = set_KrNameNom};
  __property   BSTR            IdBasEdNom = {read = get_IdBasEdNom, write = set_IdBasEdNom};
  __property   BSTR            IdOsnEdNom = {read = get_IdOsnEdNom, write = set_IdOsnEdNom};
  __property   BSTR            IdGrpNom = {read = get_IdGrpNom, write = set_IdGrpNom};
  __property   BSTR            ArtNom = {read = get_ArtNom, write = set_ArtNom};
  __property   BSTR            GID_SNom = {read = get_GID_SNom, write = set_GID_SNom};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             AllElement = {read = get_AllElement, write = set_AllElement};
  __property   BSTR            IdTypePrice = {read = get_IdTypePrice, write = set_IdTypePrice};
  __property   int             TableEOF = {read = get_TableEOF};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMSprEd
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A7FF2337-C284-4BDC-84C5-5EB62FD8058C}
// *********************************************************************//
interface IOleDMSprEd  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_IdEd(BSTR* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_IdEd(BSTR Value/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_NameEd(BSTR* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_NameEd(BSTR Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_KFEd(double* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_KFEd(double Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_TShEd(int* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_TShEd(int Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_ShEd(BSTR* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_ShEd(BSTR Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_IdNomEd(BSTR* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_IdNomEd(BSTR Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_IdOKEIEd(BSTR* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_IdOKEIEd(BSTR Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_NeIspEd(int* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_NeIspEd(int Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_GID_SEd(BSTR* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_GID_SEd(BSTR Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_TableEOF(int* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(BSTR IdNom/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE OpenElement(BSTR Id/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE NewElement(BSTR IdNom/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE SaveElement(void) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE DeleteElement(BSTR Id/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE NewShtrihCod(void) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE FindEdPoSh(BSTR ShtrihCod/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/) = 0; // [23]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_IdEd(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdEd((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_NameEd(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NameEd((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_KFEd(void)
  {
    double Value;
    OLECHECK(this->get_KFEd((double*)&Value));
    return Value;
  }

  int __fastcall get_TShEd(void)
  {
    int Value;
    OLECHECK(this->get_TShEd((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_ShEd(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ShEd((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_IdNomEd(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdNomEd((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_IdOKEIEd(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdOKEIEd((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_NeIspEd(void)
  {
    int Value;
    OLECHECK(this->get_NeIspEd((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_GID_SEd(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_GID_SEd((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_TableEOF(void)
  {
    int Value;
    OLECHECK(this->get_TableEOF((int*)&Value));
    return Value;
  }

  BSTR __fastcall GetIdElement(BSTR gid/*[in]*/)
  {
    BSTR Id = 0;
    OLECHECK(this->GetIdElement(gid, (BSTR*)&Id));
    return Id;
  }

  BSTR __fastcall GetGidElement(BSTR Id/*[in]*/)
  {
    BSTR gid = 0;
    OLECHECK(this->GetGidElement(Id, (BSTR*)&gid));
    return gid;
  }


  __property   BSTR            IdEd = {read = get_IdEd, write = set_IdEd};
  __property   BSTR            NameEd = {read = get_NameEd, write = set_NameEd};
  __property   double          KFEd = {read = get_KFEd, write = set_KFEd};
  __property   int             TShEd = {read = get_TShEd, write = set_TShEd};
  __property   BSTR            ShEd = {read = get_ShEd, write = set_ShEd};
  __property   BSTR            IdNomEd = {read = get_IdNomEd, write = set_IdNomEd};
  __property   BSTR            IdOKEIEd = {read = get_IdOKEIEd, write = set_IdOKEIEd};
  __property   int             NeIspEd = {read = get_NeIspEd, write = set_NeIspEd};
  __property   BSTR            GID_SEd = {read = get_GID_SEd, write = set_GID_SEd};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMDocRepKKM
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {500BC744-0B7A-4DB5-AF7C-6B6B296C3B8B}
// *********************************************************************//
interface IOleDMDocRepKKM  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDDOC(BSTR* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDDOC(BSTR Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllPOSDOC(BSTR Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllPRDOC(int* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllPRDOC(int Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllNUMDOC(int* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllNUMDOC(int Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDFIRMDOC(BSTR Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDSKLDOC(BSTR Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDKLDOC(BSTR Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllSUMDOC(double* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllSUMDOC(double Value/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllFNAME_USER(BSTR* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDUSERDOC(BSTR Value/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDDOGDOC(BSTR* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDDOGDOC(BSTR Value/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllNAME_SDOG(BSTR* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllNAMEKLIENT(BSTR* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllGID_DOC(BSTR Value/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_DocID_DREPKKM(BSTR* Value/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE set_DocID_DREPKKM(BSTR Value/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_DocGID_DREPKKM(BSTR* Value/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE set_DocGID_DREPKKM(BSTR Value/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDDOC_DREPKKM(BSTR* Value/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDDOC_DREPKKM(BSTR Value/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDKKM_DREPKKM(BSTR* Value/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDKKM_DREPKKM(BSTR Value/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_DocPRIM_DREPKKM(BSTR* Value/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_DocPRIM_DREPKKM(BSTR Value/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_DocOPLNAL_DREPKKM(double* Value/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_DocOPLNAL_DREPKKM(double Value/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_DocOPLPC_DREPKKM(double* Value/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_DocOPLPC_DREPKKM(double Value/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_DocNKL_DREPKKM(int* Value/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE set_DocNKL_DREPKKM(int Value/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_DocSK_DREPKKM(double* Value/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_DocSK_DREPKKM(double Value/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_DocNAD_DREPKKM(double* Value/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_DocNAD_DREPKKM(double Value/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_DocDVREG_DREPKKM(int* Value/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_DocDVREG_DREPKKM(int Value/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_DocNAMEKKM(BSTR* Value/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllNAMEFIRM(BSTR* Value/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllNAMESKLAD(BSTR* Value/*[out,retval]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE get_DocTID_DREPKKMT(BSTR* Value/*[out,retval]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE set_DocTID_DREPKKMT(BSTR Value/*[in]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE get_DocTGID_DREPKKMT(BSTR* Value/*[out,retval]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE set_DocTGID_DREPKKMT(BSTR Value/*[in]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDDOC_DREPKKMT(BSTR* Value/*[out,retval]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDDOC_DREPKKMT(BSTR Value/*[in]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDNOM_DREPKKMT(BSTR* Value/*[out,retval]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDNOM_DREPKKMT(BSTR Value/*[in]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDED_DREPKKMT(BSTR* Value/*[out,retval]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDED_DREPKKMT(BSTR Value/*[in]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE get_DocTKOL_DREPKKMT(double* Value/*[out,retval]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE set_DocTKOL_DREPKKMT(double Value/*[in]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE get_DocTKF_DREPKKMT(double* Value/*[out,retval]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE set_DocTKF_DREPKKMT(double Value/*[in]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE get_DocTSUM_DREPKKMT(double* Value/*[out,retval]*/) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE set_DocTSUM_DREPKKMT(double Value/*[in]*/) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE get_DocTSK_DREPKKMT(double* Value/*[out,retval]*/) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE set_DocTSK_DREPKKMT(double Value/*[in]*/) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE get_DocTNAD_REPKKMT(double* Value/*[out,retval]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE set_DocTNAD_REPKKMT(double Value/*[in]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE get_DocTPRICEFULL_DREPKKMT(double* Value/*[out,retval]*/) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE set_DocTPRICEFULL_DREPKKMT(double Value/*[in]*/) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE get_DocTNAMENOM(BSTR* Value/*[out,retval]*/) = 0; // [42]
  virtual HRESULT STDMETHODCALLTYPE get_DocTNAMEED(BSTR* Value/*[out,retval]*/) = 0; // [43]
  virtual HRESULT STDMETHODCALLTYPE get_DocTTNOM(int* Value/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_DocTPRICE_DREPKKMT(double* Value/*[out,retval]*/) = 0; // [45]
  virtual HRESULT STDMETHODCALLTYPE set_DocTPRICE_DREPKKMT(double Value/*[in]*/) = 0; // [45]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllTDOC(BSTR* Value/*[out,retval]*/) = 0; // [46]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllTDOC(BSTR Value/*[in]*/) = 0; // [46]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [47]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [48]
  virtual HRESULT STDMETHODCALLTYPE get_TableEOF(int* Value/*[out,retval]*/) = 0; // [49]
  virtual HRESULT STDMETHODCALLTYPE NewDoc(void) = 0; // [50]
  virtual HRESULT STDMETHODCALLTYPE OpenDoc(BSTR Id/*[in]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE SaveDoc(void) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE DvRegDoc(void) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE CancelDvRegDoc(void) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE DeleteDoc(BSTR Id/*[in]*/) = 0; // [55]
  virtual HRESULT STDMETHODCALLTYPE AddDocNewString(void) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE DeleteStringDoc(void) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE CloseDoc(void) = 0; // [58]
  virtual HRESULT STDMETHODCALLTYPE get_PrefiksDoc(BSTR* Value/*[out,retval]*/) = 0; // [59]
  virtual HRESULT STDMETHODCALLTYPE set_PrefiksDoc(BSTR Value/*[in]*/) = 0; // [59]
  virtual HRESULT STDMETHODCALLTYPE get_NameBase(BSTR* Value/*[out,retval]*/) = 0; // [60]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/) = 0; // [201]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllPOSDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllPOSDOC((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_DocAllPRDOC(void)
  {
    int Value;
    OLECHECK(this->get_DocAllPRDOC((int*)&Value));
    return Value;
  }

  int __fastcall get_DocAllNUMDOC(void)
  {
    int Value;
    OLECHECK(this->get_DocAllNUMDOC((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDFIRMDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDFIRMDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDSKLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDSKLDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDKLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDKLDOC((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_DocAllSUMDOC(void)
  {
    double Value;
    OLECHECK(this->get_DocAllSUMDOC((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllFNAME_USER(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllFNAME_USER((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDUSERDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDUSERDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDDOGDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDDOGDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllNAME_SDOG(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllNAME_SDOG((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllNAMEKLIENT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllNAMEKLIENT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllGID_DOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllGID_DOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocID_DREPKKM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocID_DREPKKM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocGID_DREPKKM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocGID_DREPKKM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDDOC_DREPKKM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDDOC_DREPKKM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDKKM_DREPKKM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDKKM_DREPKKM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocPRIM_DREPKKM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocPRIM_DREPKKM((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_DocOPLNAL_DREPKKM(void)
  {
    double Value;
    OLECHECK(this->get_DocOPLNAL_DREPKKM((double*)&Value));
    return Value;
  }

  double __fastcall get_DocOPLPC_DREPKKM(void)
  {
    double Value;
    OLECHECK(this->get_DocOPLPC_DREPKKM((double*)&Value));
    return Value;
  }

  int __fastcall get_DocNKL_DREPKKM(void)
  {
    int Value;
    OLECHECK(this->get_DocNKL_DREPKKM((int*)&Value));
    return Value;
  }

  double __fastcall get_DocSK_DREPKKM(void)
  {
    double Value;
    OLECHECK(this->get_DocSK_DREPKKM((double*)&Value));
    return Value;
  }

  double __fastcall get_DocNAD_DREPKKM(void)
  {
    double Value;
    OLECHECK(this->get_DocNAD_DREPKKM((double*)&Value));
    return Value;
  }

  int __fastcall get_DocDVREG_DREPKKM(void)
  {
    int Value;
    OLECHECK(this->get_DocDVREG_DREPKKM((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocNAMEKKM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocNAMEKKM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllNAMEFIRM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllNAMEFIRM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllNAMESKLAD(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllNAMESKLAD((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTID_DREPKKMT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTID_DREPKKMT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTGID_DREPKKMT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTGID_DREPKKMT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDDOC_DREPKKMT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDDOC_DREPKKMT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDNOM_DREPKKMT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDNOM_DREPKKMT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDED_DREPKKMT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDED_DREPKKMT((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_DocTKOL_DREPKKMT(void)
  {
    double Value;
    OLECHECK(this->get_DocTKOL_DREPKKMT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTKF_DREPKKMT(void)
  {
    double Value;
    OLECHECK(this->get_DocTKF_DREPKKMT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTSUM_DREPKKMT(void)
  {
    double Value;
    OLECHECK(this->get_DocTSUM_DREPKKMT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTSK_DREPKKMT(void)
  {
    double Value;
    OLECHECK(this->get_DocTSK_DREPKKMT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTNAD_REPKKMT(void)
  {
    double Value;
    OLECHECK(this->get_DocTNAD_REPKKMT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTPRICEFULL_DREPKKMT(void)
  {
    double Value;
    OLECHECK(this->get_DocTPRICEFULL_DREPKKMT((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTNAMENOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTNAMENOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTNAMEED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTNAMEED((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_DocTTNOM(void)
  {
    int Value;
    OLECHECK(this->get_DocTTNOM((int*)&Value));
    return Value;
  }

  double __fastcall get_DocTPRICE_DREPKKMT(void)
  {
    double Value;
    OLECHECK(this->get_DocTPRICE_DREPKKMT((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllTDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllTDOC((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_TableEOF(void)
  {
    int Value;
    OLECHECK(this->get_TableEOF((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_PrefiksDoc(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_PrefiksDoc((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_NameBase(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NameBase((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDBASE_GALLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value));
    return Value;
  }


  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocAllFNAME_USER = {read = get_DocAllFNAME_USER};
  __property   BSTR            DocAllIDUSERDOC = {read = get_DocAllIDUSERDOC, write = set_DocAllIDUSERDOC};
  __property   BSTR            DocAllIDDOGDOC = {read = get_DocAllIDDOGDOC, write = set_DocAllIDDOGDOC};
  __property   BSTR            DocAllNAME_SDOG = {read = get_DocAllNAME_SDOG};
  __property   BSTR            DocAllNAMEKLIENT = {read = get_DocAllNAMEKLIENT};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocID_DREPKKM = {read = get_DocID_DREPKKM, write = set_DocID_DREPKKM};
  __property   BSTR            DocGID_DREPKKM = {read = get_DocGID_DREPKKM, write = set_DocGID_DREPKKM};
  __property   BSTR            DocIDDOC_DREPKKM = {read = get_DocIDDOC_DREPKKM, write = set_DocIDDOC_DREPKKM};
  __property   BSTR            DocIDKKM_DREPKKM = {read = get_DocIDKKM_DREPKKM, write = set_DocIDKKM_DREPKKM};
  __property   BSTR            DocPRIM_DREPKKM = {read = get_DocPRIM_DREPKKM, write = set_DocPRIM_DREPKKM};
  __property   double          DocOPLNAL_DREPKKM = {read = get_DocOPLNAL_DREPKKM, write = set_DocOPLNAL_DREPKKM};
  __property   double          DocOPLPC_DREPKKM = {read = get_DocOPLPC_DREPKKM, write = set_DocOPLPC_DREPKKM};
  __property   int             DocNKL_DREPKKM = {read = get_DocNKL_DREPKKM, write = set_DocNKL_DREPKKM};
  __property   double          DocSK_DREPKKM = {read = get_DocSK_DREPKKM, write = set_DocSK_DREPKKM};
  __property   double          DocNAD_DREPKKM = {read = get_DocNAD_DREPKKM, write = set_DocNAD_DREPKKM};
  __property   int             DocDVREG_DREPKKM = {read = get_DocDVREG_DREPKKM, write = set_DocDVREG_DREPKKM};
  __property   BSTR            DocNAMEKKM = {read = get_DocNAMEKKM};
  __property   BSTR            DocAllNAMEFIRM = {read = get_DocAllNAMEFIRM};
  __property   BSTR            DocAllNAMESKLAD = {read = get_DocAllNAMESKLAD};
  __property   BSTR            DocTID_DREPKKMT = {read = get_DocTID_DREPKKMT, write = set_DocTID_DREPKKMT};
  __property   BSTR            DocTGID_DREPKKMT = {read = get_DocTGID_DREPKKMT, write = set_DocTGID_DREPKKMT};
  __property   BSTR            DocTIDDOC_DREPKKMT = {read = get_DocTIDDOC_DREPKKMT, write = set_DocTIDDOC_DREPKKMT};
  __property   BSTR            DocTIDNOM_DREPKKMT = {read = get_DocTIDNOM_DREPKKMT, write = set_DocTIDNOM_DREPKKMT};
  __property   BSTR            DocTIDED_DREPKKMT = {read = get_DocTIDED_DREPKKMT, write = set_DocTIDED_DREPKKMT};
  __property   double          DocTKOL_DREPKKMT = {read = get_DocTKOL_DREPKKMT, write = set_DocTKOL_DREPKKMT};
  __property   double          DocTKF_DREPKKMT = {read = get_DocTKF_DREPKKMT, write = set_DocTKF_DREPKKMT};
  __property   double          DocTSUM_DREPKKMT = {read = get_DocTSUM_DREPKKMT, write = set_DocTSUM_DREPKKMT};
  __property   double          DocTSK_DREPKKMT = {read = get_DocTSK_DREPKKMT, write = set_DocTSK_DREPKKMT};
  __property   double          DocTNAD_REPKKMT = {read = get_DocTNAD_REPKKMT, write = set_DocTNAD_REPKKMT};
  __property   double          DocTPRICEFULL_DREPKKMT = {read = get_DocTPRICEFULL_DREPKKMT, write = set_DocTPRICEFULL_DREPKKMT};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   int             DocTTNOM = {read = get_DocTTNOM};
  __property   double          DocTPRICE_DREPKKMT = {read = get_DocTPRICE_DREPKKMT, write = set_DocTPRICE_DREPKKMT};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMSprGrpNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {122A380E-AADA-46E5-AE13-7BC1C518942C}
// *********************************************************************//
interface IOleDMSprGrpNom  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ElIDGN(BSTR* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_ElIDGN(BSTR Value/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_ElNAMEGN(BSTR* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_ElNAMEGN(BSTR Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_ElIDGRPGN(BSTR* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_ElIDGRPGN(BSTR Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_ElGID_SGRPNOM(BSTR* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_ElGID_SGRPNOM(BSTR Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_TableEOF(int* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(void) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE OpenElement(BSTR Id/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE NewElement(BSTR IdGrp/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE SaveElement(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE DeleteElement(BSTR Id/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [15]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ElIDGN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElIDGN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElNAMEGN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElNAMEGN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElIDGRPGN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElIDGRPGN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElGID_SGRPNOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElGID_SGRPNOM((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_TableEOF(void)
  {
    int Value;
    OLECHECK(this->get_TableEOF((int*)&Value));
    return Value;
  }

  BSTR __fastcall GetIdElement(BSTR gid/*[in]*/)
  {
    BSTR Id = 0;
    OLECHECK(this->GetIdElement(gid, (BSTR*)&Id));
    return Id;
  }


  __property   BSTR            ElIDGN = {read = get_ElIDGN, write = set_ElIDGN};
  __property   BSTR            ElNAMEGN = {read = get_ElNAMEGN, write = set_ElNAMEGN};
  __property   BSTR            ElIDGRPGN = {read = get_ElIDGRPGN, write = set_ElIDGRPGN};
  __property   BSTR            ElGID_SGRPNOM = {read = get_ElGID_SGRPNOM, write = set_ElGID_SGRPNOM};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMSprTypePrice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {03AE0B1D-6050-471A-AFA2-2F5E0B1ADDED}
// *********************************************************************//
interface IOleDMSprTypePrice  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_TableEOF(int* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_ElID_TPRICE(BSTR* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_ElID_TPRICE(BSTR Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_ElNAME_TPRICE(BSTR* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_ElNAME_TPRICE(BSTR Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_ElGID_STPRICE(BSTR* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_ElGID_STPRICE(BSTR Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(void) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE OpenElement(BSTR Id/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE NewElement(void) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE SaveElement(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE DeleteElement(BSTR Id/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE GetIDTypePrice(BSTR name/*[in]*/, BSTR* Id/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE CloseElement(void) = 0; // [16]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_TableEOF(void)
  {
    int Value;
    OLECHECK(this->get_TableEOF((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElID_TPRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElID_TPRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElNAME_TPRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElNAME_TPRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElGID_STPRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElGID_STPRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall GetIDTypePrice(BSTR name/*[in]*/)
  {
    BSTR Id = 0;
    OLECHECK(this->GetIDTypePrice(name, (BSTR*)&Id));
    return Id;
  }

  BSTR __fastcall GetIdElement(BSTR gid/*[in]*/)
  {
    BSTR Id = 0;
    OLECHECK(this->GetIdElement(gid, (BSTR*)&Id));
    return Id;
  }


  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            ElID_TPRICE = {read = get_ElID_TPRICE, write = set_ElID_TPRICE};
  __property   BSTR            ElNAME_TPRICE = {read = get_ElNAME_TPRICE, write = set_ElNAME_TPRICE};
  __property   BSTR            ElGID_STPRICE = {read = get_ElGID_STPRICE, write = set_ElGID_STPRICE};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMSprPrice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {81AAC7FF-6A90-4E54-B3FE-AF265465B0EB}
// *********************************************************************//
interface IOleDMSprPrice  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_TableEOF(int* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_ElID_PRICE(BSTR* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_ElID_PRICE(BSTR Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_ElIDNOM_PRICE(BSTR* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_ElIDNOM_PRICE(BSTR Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_ElIDTYPE_PRICE(BSTR* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_ElIDTYPE_PRICE(BSTR Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_ElZNACH_PRICE(double* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_ElZNACH_PRICE(double Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_ElGID_SPRICE(BSTR* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_ElGID_SPRICE(BSTR Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(BSTR IdNom/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE NewElement(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE SaveElement(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE DeleteElement(BSTR Id/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE FindElement(BSTR IdTypePrice/*[in]*/, BSTR IdNom/*[in]*/, 
                                                int* kol_record/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_IdNom(BSTR* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE set_IdNom(BSTR Value/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_IdTypePrice(BSTR* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE set_IdTypePrice(BSTR Value/*[in]*/) = 0; // [15]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_TableEOF(void)
  {
    int Value;
    OLECHECK(this->get_TableEOF((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElID_PRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElID_PRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElIDNOM_PRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElIDNOM_PRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElIDTYPE_PRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElIDTYPE_PRICE((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_ElZNACH_PRICE(void)
  {
    double Value;
    OLECHECK(this->get_ElZNACH_PRICE((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElGID_SPRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElGID_SPRICE((BSTR*)&Value));
    return Value;
  }

  int __fastcall FindElement(BSTR IdTypePrice/*[in]*/, BSTR IdNom/*[in]*/)
  {
    int kol_record;
    OLECHECK(this->FindElement(IdTypePrice, IdNom, (int*)&kol_record));
    return kol_record;
  }

  BSTR __fastcall get_IdNom(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdNom((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_IdTypePrice(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdTypePrice((BSTR*)&Value));
    return Value;
  }


  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            ElID_PRICE = {read = get_ElID_PRICE, write = set_ElID_PRICE};
  __property   BSTR            ElIDNOM_PRICE = {read = get_ElIDNOM_PRICE, write = set_ElIDNOM_PRICE};
  __property   BSTR            ElIDTYPE_PRICE = {read = get_ElIDTYPE_PRICE, write = set_ElIDTYPE_PRICE};
  __property   double          ElZNACH_PRICE = {read = get_ElZNACH_PRICE, write = set_ElZNACH_PRICE};
  __property   BSTR            ElGID_SPRICE = {read = get_ElGID_SPRICE, write = set_ElGID_SPRICE};
  __property   BSTR            IdNom = {read = get_IdNom, write = set_IdNom};
  __property   BSTR            IdTypePrice = {read = get_IdTypePrice, write = set_IdTypePrice};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMDocPer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {906D0C92-DE95-4FA2-9DE4-4E4DCA7242A1}
// *********************************************************************//
interface IOleDMDocPer  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_TableEOF(int* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDDOC(BSTR* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDDOC(BSTR Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllPOSDOC(BSTR Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllPRDOC(int* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllPRDOC(int Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllTDOC(BSTR* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllTDOC(BSTR Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllNUMDOC(int* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllNUMDOC(int Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDFIRMDOC(BSTR Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDSKLDOC(BSTR Value/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDKLDOC(BSTR Value/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllSUMDOC(double* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllSUMDOC(double Value/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDPER(BSTR* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDPER(BSTR Value/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDDOCPER(BSTR* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDDOCPER(BSTR Value/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDSKLPOLPER(BSTR* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDSKLPOLPER(BSTR Value/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_DocPRIMPER(BSTR* Value/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_DocPRIMPER(BSTR Value/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDPERT(BSTR* Value/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDPERT(BSTR Value/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDDOCPERT(BSTR* Value/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDDOCPERT(BSTR Value/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDNOMPERT(BSTR* Value/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDNOMPERT(BSTR Value/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDEDPERT(BSTR* Value/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDEDPERT(BSTR Value/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_DocTKOLPERT(double* Value/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_DocTKOLPERT(double Value/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_DocTKFPERT(double* Value/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_DocTKFPERT(double Value/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_DocTPRICEPERT(double* Value/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_DocTPRICEPERT(double Value/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_DocTSUMPERT(double* Value/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE set_DocTSUMPERT(double Value/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_DocTNAMENOM(BSTR* Value/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_DocTNAMEED(BSTR* Value/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_DocTTNOM(int* Value/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDUSERDOC(BSTR Value/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllGID_DOC(BSTR Value/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_DocGID_DPER(BSTR* Value/*[out,retval]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE set_DocGID_DPER(BSTR Value/*[in]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE get_DocTGID_DPERT(BSTR* Value/*[out,retval]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE set_DocTGID_DPERT(BSTR Value/*[in]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE NewDoc(void) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE OpenDoc(BSTR IdDoc/*[in]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE SaveDoc(void) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE DvRegDoc(void) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE CancelDvRegDoc(void) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE AddDocNewString(void) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE DeleteStringDoc(void) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE DeleteDoc(BSTR Id/*[in]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE CloseDoc(void) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE GetIdDocPoNomeruDoc(int number_doc/*[in]*/, 
                                                        BSTR date_doc/*[in]*/, 
                                                        BSTR* IdDoc/*[out,retval]*/) = 0; // [42]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [43]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_PrefiksDoc(BSTR* Value/*[out,retval]*/) = 0; // [47]
  virtual HRESULT STDMETHODCALLTYPE set_PrefiksDoc(BSTR Value/*[in]*/) = 0; // [47]
  virtual HRESULT STDMETHODCALLTYPE get_NameBase(BSTR* Value/*[out,retval]*/) = 0; // [48]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/) = 0; // [201]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_TableEOF(void)
  {
    int Value;
    OLECHECK(this->get_TableEOF((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllPOSDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllPOSDOC((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_DocAllPRDOC(void)
  {
    int Value;
    OLECHECK(this->get_DocAllPRDOC((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllTDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllTDOC((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_DocAllNUMDOC(void)
  {
    int Value;
    OLECHECK(this->get_DocAllNUMDOC((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDFIRMDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDFIRMDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDSKLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDSKLDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDKLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDKLDOC((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_DocAllSUMDOC(void)
  {
    double Value;
    OLECHECK(this->get_DocAllSUMDOC((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDPER(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDPER((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDDOCPER(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDDOCPER((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDSKLPOLPER(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDSKLPOLPER((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocPRIMPER(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocPRIMPER((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDPERT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDPERT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDDOCPERT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDDOCPERT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDNOMPERT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDNOMPERT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDEDPERT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDEDPERT((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_DocTKOLPERT(void)
  {
    double Value;
    OLECHECK(this->get_DocTKOLPERT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTKFPERT(void)
  {
    double Value;
    OLECHECK(this->get_DocTKFPERT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTPRICEPERT(void)
  {
    double Value;
    OLECHECK(this->get_DocTPRICEPERT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTSUMPERT(void)
  {
    double Value;
    OLECHECK(this->get_DocTSUMPERT((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTNAMENOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTNAMENOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTNAMEED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTNAMEED((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_DocTTNOM(void)
  {
    int Value;
    OLECHECK(this->get_DocTTNOM((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDUSERDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDUSERDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllGID_DOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllGID_DOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocGID_DPER(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocGID_DPER((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTGID_DPERT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTGID_DPERT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllFNAMEUSER(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllFNAMEUSER((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/)
  {
    BSTR IdDoc = 0;
    OLECHECK(this->GetIdDocPoNomeruDoc(number_doc, date_doc, (BSTR*)&IdDoc));
    return IdDoc;
  }

  BSTR __fastcall get_PrefiksDoc(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_PrefiksDoc((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_NameBase(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NameBase((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDBASE_GALLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value));
    return Value;
  }


  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocIDPER = {read = get_DocIDPER, write = set_DocIDPER};
  __property   BSTR            DocIDDOCPER = {read = get_DocIDDOCPER, write = set_DocIDDOCPER};
  __property   BSTR            DocIDSKLPOLPER = {read = get_DocIDSKLPOLPER, write = set_DocIDSKLPOLPER};
  __property   BSTR            DocPRIMPER = {read = get_DocPRIMPER, write = set_DocPRIMPER};
  __property   BSTR            DocTIDPERT = {read = get_DocTIDPERT, write = set_DocTIDPERT};
  __property   BSTR            DocTIDDOCPERT = {read = get_DocTIDDOCPERT, write = set_DocTIDDOCPERT};
  __property   BSTR            DocTIDNOMPERT = {read = get_DocTIDNOMPERT, write = set_DocTIDNOMPERT};
  __property   BSTR            DocTIDEDPERT = {read = get_DocTIDEDPERT, write = set_DocTIDEDPERT};
  __property   double          DocTKOLPERT = {read = get_DocTKOLPERT, write = set_DocTKOLPERT};
  __property   double          DocTKFPERT = {read = get_DocTKFPERT, write = set_DocTKFPERT};
  __property   double          DocTPRICEPERT = {read = get_DocTPRICEPERT, write = set_DocTPRICEPERT};
  __property   double          DocTSUMPERT = {read = get_DocTSUMPERT, write = set_DocTSUMPERT};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   int             DocTTNOM = {read = get_DocTTNOM};
  __property   BSTR            DocAllIDUSERDOC = {read = get_DocAllIDUSERDOC, write = set_DocAllIDUSERDOC};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocGID_DPER = {read = get_DocGID_DPER, write = set_DocGID_DPER};
  __property   BSTR            DocTGID_DPERT = {read = get_DocTGID_DPERT, write = set_DocTGID_DPERT};
  __property   BSTR            DocAllFNAMEUSER = {read = get_DocAllFNAMEUSER};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMDocPrihNakl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {68D9AE11-D691-410E-8E27-AD1CF6A3CA54}
// *********************************************************************//
interface IOleDMDocPrihNakl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_TableEOF(int* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDPRNT(BSTR* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDPRNT(BSTR Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDDOCPRNT(BSTR* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDDOCPRNT(BSTR Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDNOMPRNT(BSTR* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDNOMPRNT(BSTR Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDEDPRNT(BSTR* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDEDPRNT(BSTR Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDPARTPRNT(BSTR* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDPARTPRNT(BSTR Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_DocTKOLPRNT(double* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_DocTKOLPRNT(double Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_DocTKFPRNT(double* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_DocTKFPRNT(double Value/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_DocTPRICEPRNT(double* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_DocTPRICEPRNT(double Value/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_DocTSUMPRNT(double* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_DocTSUMPRNT(double Value/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDPRN(BSTR* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDPRN(BSTR Value/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_DocTNAMENOM(BSTR* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_DocTNAMEED(BSTR* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDDOCPRN(BSTR* Value/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDDOCPRN(BSTR Value/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_DocPRIMDOC(BSTR* Value/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE set_DocPRIMDOC(BSTR Value/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDDOC(BSTR* Value/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDDOC(BSTR Value/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllPOSDOC(BSTR Value/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllPRDOC(int* Value/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllPRDOC(int Value/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllTDOC(BSTR* Value/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllTDOC(BSTR Value/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllNUMDOC(int* Value/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllNUMDOC(int Value/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDFIRMDOC(BSTR Value/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDSKLDOC(BSTR Value/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDKLDOC(BSTR Value/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllSUMDOC(double* Value/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllSUMDOC(double Value/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllFNAMEUSER(BSTR Value/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDTPRICE(BSTR* Value/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDTPRICE(BSTR Value/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDUSERDOC(BSTR Value/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllGID_DOC(BSTR Value/*[in]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE get_DocGID_DPRN(BSTR* Value/*[out,retval]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE set_DocGID_DPRN(BSTR Value/*[in]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE get_DocTGID_DPRNT(BSTR* Value/*[out,retval]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE set_DocTGID_DPRNT(BSTR Value/*[in]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE NewDoc(void) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE OpenDoc(BSTR IdDoc/*[in]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE SaveDoc(void) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE DvRegDoc(void) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE CancelDvRegDoc(void) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE AddDocNewString(void) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE DeleteStringDoc(void) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE DeleteDoc(BSTR Id/*[in]*/) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE GetIdDocPoNomeruDoc(int number_doc/*[in]*/, 
                                                        DATE date_doc/*[in]*/, 
                                                        BSTR* id_doc/*[out,retval]*/) = 0; // [42]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [43]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_PrefiksDoc(BSTR* Value/*[out,retval]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE set_PrefiksDoc(BSTR Value/*[in]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE get_NameBase(BSTR* Value/*[out,retval]*/) = 0; // [45]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/) = 0; // [201]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_TableEOF(void)
  {
    int Value;
    OLECHECK(this->get_TableEOF((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDPRNT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDPRNT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDDOCPRNT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDDOCPRNT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDNOMPRNT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDNOMPRNT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDEDPRNT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDEDPRNT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDPARTPRNT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDPARTPRNT((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_DocTKOLPRNT(void)
  {
    double Value;
    OLECHECK(this->get_DocTKOLPRNT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTKFPRNT(void)
  {
    double Value;
    OLECHECK(this->get_DocTKFPRNT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTPRICEPRNT(void)
  {
    double Value;
    OLECHECK(this->get_DocTPRICEPRNT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTSUMPRNT(void)
  {
    double Value;
    OLECHECK(this->get_DocTSUMPRNT((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDPRN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDPRN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTNAMENOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTNAMENOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTNAMEED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTNAMEED((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDDOCPRN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDDOCPRN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocPRIMDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocPRIMDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllPOSDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllPOSDOC((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_DocAllPRDOC(void)
  {
    int Value;
    OLECHECK(this->get_DocAllPRDOC((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllTDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllTDOC((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_DocAllNUMDOC(void)
  {
    int Value;
    OLECHECK(this->get_DocAllNUMDOC((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDFIRMDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDFIRMDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDSKLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDSKLDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDKLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDKLDOC((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_DocAllSUMDOC(void)
  {
    double Value;
    OLECHECK(this->get_DocAllSUMDOC((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllFNAMEUSER(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllFNAMEUSER((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDTPRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDTPRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDUSERDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDUSERDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllGID_DOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllGID_DOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocGID_DPRN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocGID_DPRN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTGID_DPRNT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTGID_DPRNT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/)
  {
    BSTR id_doc = 0;
    OLECHECK(this->GetIdDocPoNomeruDoc(number_doc, date_doc, (BSTR*)&id_doc));
    return id_doc;
  }

  BSTR __fastcall get_PrefiksDoc(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_PrefiksDoc((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_NameBase(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NameBase((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDBASE_GALLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value));
    return Value;
  }


  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            DocTIDPRNT = {read = get_DocTIDPRNT, write = set_DocTIDPRNT};
  __property   BSTR            DocTIDDOCPRNT = {read = get_DocTIDDOCPRNT, write = set_DocTIDDOCPRNT};
  __property   BSTR            DocTIDNOMPRNT = {read = get_DocTIDNOMPRNT, write = set_DocTIDNOMPRNT};
  __property   BSTR            DocTIDEDPRNT = {read = get_DocTIDEDPRNT, write = set_DocTIDEDPRNT};
  __property   BSTR            DocTIDPARTPRNT = {read = get_DocTIDPARTPRNT, write = set_DocTIDPARTPRNT};
  __property   double          DocTKOLPRNT = {read = get_DocTKOLPRNT, write = set_DocTKOLPRNT};
  __property   double          DocTKFPRNT = {read = get_DocTKFPRNT, write = set_DocTKFPRNT};
  __property   double          DocTPRICEPRNT = {read = get_DocTPRICEPRNT, write = set_DocTPRICEPRNT};
  __property   double          DocTSUMPRNT = {read = get_DocTSUMPRNT, write = set_DocTSUMPRNT};
  __property   BSTR            DocIDPRN = {read = get_DocIDPRN, write = set_DocIDPRN};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   BSTR            DocIDDOCPRN = {read = get_DocIDDOCPRN, write = set_DocIDDOCPRN};
  __property   BSTR            DocPRIMDOC = {read = get_DocPRIMDOC, write = set_DocPRIMDOC};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocAllFNAMEUSER = {read = get_DocAllFNAMEUSER, write = set_DocAllFNAMEUSER};
  __property   BSTR            DocIDTPRICE = {read = get_DocIDTPRICE, write = set_DocIDTPRICE};
  __property   BSTR            DocAllIDUSERDOC = {read = get_DocAllIDUSERDOC, write = set_DocAllIDUSERDOC};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocGID_DPRN = {read = get_DocGID_DPRN, write = set_DocGID_DPRN};
  __property   BSTR            DocTGID_DPRNT = {read = get_DocTGID_DPRNT, write = set_DocTGID_DPRNT};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMDocReal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A9B32F6B-0BBA-4CFA-AEF1-312AA488A02F}
// *********************************************************************//
interface IOleDMDocReal  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_TableEOF(int* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDDOC(BSTR* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDDOC(BSTR Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllPOSDOC(BSTR Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllPRDOC(int* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllPRDOC(int Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllTDOC(BSTR* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllTDOC(BSTR Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllNUMDOC(int* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllNUMDOC(int Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDFIRMDOC(BSTR Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDSKLDOC(BSTR Value/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllSUMDOC(double* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllSUMDOC(double Value/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDUSERDOC(BSTR Value/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_DocID_INV(BSTR* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE set_DocID_INV(BSTR Value/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDDOC_INV(BSTR* Value/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDDOC_INV(BSTR Value/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_DocPRIM_INV(BSTR* Value/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_DocPRIM_INV(BSTR Value/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_DocTID_INVT(BSTR* Value/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_DocTID_INVT(BSTR Value/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDDOC_INVT(BSTR* Value/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDDOC_INVT(BSTR Value/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDNOM_INVT(BSTR* Value/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDNOM_INVT(BSTR Value/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDED_INVT(BSTR* Value/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDED_INVT(BSTR Value/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_DocTKF_INVT(double* Value/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE set_DocTKF_INVT(double Value/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_DocTKOLUCH_INVT(double* Value/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_DocTKOLUCH_INVT(double Value/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_DocTNAMENOM(BSTR* Value/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_DocTNAMEED(BSTR* Value/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_DocTKOLFAKT_INVT(double* Value/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_DocTKOLFAKT_INVT(double Value/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllGID_DOC(BSTR Value/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_DocGID_INV(BSTR* Value/*[out,retval]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE set_DocGID_INV(BSTR Value/*[in]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE get_DocTGID_INVT(BSTR* Value/*[out,retval]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE set_DocTGID_INVT(BSTR Value/*[in]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE NewDoc(void) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE OpenDoc(BSTR IdDoc/*[in]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE SaveDoc(void) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE DvRegDoc(void) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE CancelDvRegDoc(void) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE AddDocNewString(void) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE DeleteStringDoc(void) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE DeleteDoc(BSTR Id/*[in]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE GetIdDocPoNomeruDoc(int number_doc/*[in]*/, 
                                                        DATE date_doc/*[in]*/, 
                                                        BSTR* id_doc/*[out,retval]*/) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [42]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [43]
  virtual HRESULT STDMETHODCALLTYPE get_PrefiksDoc(BSTR* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_PrefiksDoc(BSTR Value/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_NameBase(BSTR* Value/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/) = 0; // [201]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  int __fastcall get_TableEOF(void)
  {
    int Value;
    OLECHECK(this->get_TableEOF((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllPOSDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllPOSDOC((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_DocAllPRDOC(void)
  {
    int Value;
    OLECHECK(this->get_DocAllPRDOC((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllTDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllTDOC((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_DocAllNUMDOC(void)
  {
    int Value;
    OLECHECK(this->get_DocAllNUMDOC((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDFIRMDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDFIRMDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDSKLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDSKLDOC((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_DocAllSUMDOC(void)
  {
    double Value;
    OLECHECK(this->get_DocAllSUMDOC((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDUSERDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDUSERDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllFNAMEUSER(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllFNAMEUSER((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocID_INV(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocID_INV((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDDOC_INV(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDDOC_INV((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocPRIM_INV(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocPRIM_INV((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTID_INVT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTID_INVT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDDOC_INVT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDDOC_INVT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDNOM_INVT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDNOM_INVT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDED_INVT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDED_INVT((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_DocTKF_INVT(void)
  {
    double Value;
    OLECHECK(this->get_DocTKF_INVT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTKOLUCH_INVT(void)
  {
    double Value;
    OLECHECK(this->get_DocTKOLUCH_INVT((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTNAMENOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTNAMENOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTNAMEED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTNAMEED((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_DocTKOLFAKT_INVT(void)
  {
    double Value;
    OLECHECK(this->get_DocTKOLFAKT_INVT((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllGID_DOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllGID_DOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocGID_INV(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocGID_INV((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTGID_INVT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTGID_INVT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/)
  {
    BSTR id_doc = 0;
    OLECHECK(this->GetIdDocPoNomeruDoc(number_doc, date_doc, (BSTR*)&id_doc));
    return id_doc;
  }

  BSTR __fastcall get_PrefiksDoc(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_PrefiksDoc((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_NameBase(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NameBase((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDBASE_GALLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value));
    return Value;
  }


  __property   BSTR            TextError = {read = get_TextError};
  __property   int             CodeError = {read = get_CodeError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocAllIDUSERDOC = {read = get_DocAllIDUSERDOC, write = set_DocAllIDUSERDOC};
  __property   BSTR            DocAllFNAMEUSER = {read = get_DocAllFNAMEUSER};
  __property   BSTR            DocID_INV = {read = get_DocID_INV, write = set_DocID_INV};
  __property   BSTR            DocIDDOC_INV = {read = get_DocIDDOC_INV, write = set_DocIDDOC_INV};
  __property   BSTR            DocPRIM_INV = {read = get_DocPRIM_INV, write = set_DocPRIM_INV};
  __property   BSTR            DocTID_INVT = {read = get_DocTID_INVT, write = set_DocTID_INVT};
  __property   BSTR            DocTIDDOC_INVT = {read = get_DocTIDDOC_INVT, write = set_DocTIDDOC_INVT};
  __property   BSTR            DocTIDNOM_INVT = {read = get_DocTIDNOM_INVT, write = set_DocTIDNOM_INVT};
  __property   BSTR            DocTIDED_INVT = {read = get_DocTIDED_INVT, write = set_DocTIDED_INVT};
  __property   double          DocTKF_INVT = {read = get_DocTKF_INVT, write = set_DocTKF_INVT};
  __property   double          DocTKOLUCH_INVT = {read = get_DocTKOLUCH_INVT, write = set_DocTKOLUCH_INVT};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   double          DocTKOLFAKT_INVT = {read = get_DocTKOLFAKT_INVT, write = set_DocTKOLFAKT_INVT};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocGID_INV = {read = get_DocGID_INV, write = set_DocGID_INV};
  __property   BSTR            DocTGID_INVT = {read = get_DocTGID_INVT, write = set_DocTGID_INVT};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMDocSpisNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8B080649-063C-46B7-AB4B-F1555658555E}
// *********************************************************************//
interface IOleDMDocSpisNom  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_TableEOF(int* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDDOC(BSTR* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDDOC(BSTR Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllPOSDOC(BSTR Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllPRDOC(int* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllPRDOC(int Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllTDOC(BSTR* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllTDOC(BSTR Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllNUMDOC(int* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllNUMDOC(int Value/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDFIRMDOC(BSTR Value/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDSKLDOC(BSTR Value/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDKLDOC(BSTR Value/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllSUMDOC(double* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllSUMDOC(double Value/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDSPN(BSTR* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDSPN(BSTR Value/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDDOCSPN(BSTR* Value/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDDOCSPN(BSTR Value/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_DocPRIMSPN(BSTR* Value/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE set_DocPRIMSPN(BSTR Value/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDSPNT(BSTR* Value/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDSPNT(BSTR Value/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDDOCSPNT(BSTR* Value/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDDOCSPNT(BSTR Value/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDNOMSPNT(BSTR* Value/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDNOMSPNT(BSTR Value/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDEDSPNT(BSTR* Value/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDEDSPNT(BSTR Value/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_DocTKOLSPNT(double* Value/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_DocTKOLSPNT(double Value/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_DocTKFSPNT(double* Value/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_DocTKFSPNT(double Value/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_DocTPRICESPNT(double* Value/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE set_DocTPRICESPNT(double Value/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_DocTSUMSPNT(double* Value/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_DocTSUMSPNT(double Value/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_DocTNAMENOM(BSTR* Value/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_DocTNAMEED(BSTR* Value/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllGID_DOC(BSTR Value/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_DocGID_DSPN(BSTR* Value/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_DocGID_DSPN(BSTR Value/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_DocTGID_DSPNT(BSTR* Value/*[out,retval]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE set_DocTGID_DSPNT(BSTR Value/*[in]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE NewDoc(void) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE OpenDoc(BSTR IdDoc/*[in]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE SaveDoc(void) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE DvRegDoc(void) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE CancelDvRegDoc(void) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE AddDocNewString(void) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE DeleteStringDoc(void) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE CloseDoc(void) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE DeleteDoc(BSTR Id/*[in]*/) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE get_PrefiksDoc(BSTR* Value/*[out,retval]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE set_PrefiksDoc(BSTR Value/*[in]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE get_NameBase(BSTR* Value/*[out,retval]*/) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/) = 0; // [201]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_TableEOF(void)
  {
    int Value;
    OLECHECK(this->get_TableEOF((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllPOSDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllPOSDOC((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_DocAllPRDOC(void)
  {
    int Value;
    OLECHECK(this->get_DocAllPRDOC((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllTDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllTDOC((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_DocAllNUMDOC(void)
  {
    int Value;
    OLECHECK(this->get_DocAllNUMDOC((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDFIRMDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDFIRMDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDSKLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDSKLDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDKLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDKLDOC((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_DocAllSUMDOC(void)
  {
    double Value;
    OLECHECK(this->get_DocAllSUMDOC((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDSPN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDSPN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDDOCSPN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDDOCSPN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocPRIMSPN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocPRIMSPN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDSPNT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDSPNT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDDOCSPNT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDDOCSPNT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDNOMSPNT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDNOMSPNT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDEDSPNT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDEDSPNT((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_DocTKOLSPNT(void)
  {
    double Value;
    OLECHECK(this->get_DocTKOLSPNT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTKFSPNT(void)
  {
    double Value;
    OLECHECK(this->get_DocTKFSPNT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTPRICESPNT(void)
  {
    double Value;
    OLECHECK(this->get_DocTPRICESPNT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTSUMSPNT(void)
  {
    double Value;
    OLECHECK(this->get_DocTSUMSPNT((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTNAMENOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTNAMENOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTNAMEED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTNAMEED((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllGID_DOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllGID_DOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocGID_DSPN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocGID_DSPN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTGID_DSPNT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTGID_DSPNT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_PrefiksDoc(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_PrefiksDoc((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_NameBase(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NameBase((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDBASE_GALLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value));
    return Value;
  }


  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocIDSPN = {read = get_DocIDSPN, write = set_DocIDSPN};
  __property   BSTR            DocIDDOCSPN = {read = get_DocIDDOCSPN, write = set_DocIDDOCSPN};
  __property   BSTR            DocPRIMSPN = {read = get_DocPRIMSPN, write = set_DocPRIMSPN};
  __property   BSTR            DocTIDSPNT = {read = get_DocTIDSPNT, write = set_DocTIDSPNT};
  __property   BSTR            DocTIDDOCSPNT = {read = get_DocTIDDOCSPNT, write = set_DocTIDDOCSPNT};
  __property   BSTR            DocTIDNOMSPNT = {read = get_DocTIDNOMSPNT, write = set_DocTIDNOMSPNT};
  __property   BSTR            DocTIDEDSPNT = {read = get_DocTIDEDSPNT, write = set_DocTIDEDSPNT};
  __property   double          DocTKOLSPNT = {read = get_DocTKOLSPNT, write = set_DocTKOLSPNT};
  __property   double          DocTKFSPNT = {read = get_DocTKFSPNT, write = set_DocTKFSPNT};
  __property   double          DocTPRICESPNT = {read = get_DocTPRICESPNT, write = set_DocTPRICESPNT};
  __property   double          DocTSUMSPNT = {read = get_DocTSUMSPNT, write = set_DocTSUMSPNT};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocGID_DSPN = {read = get_DocGID_DSPN, write = set_DocGID_DSPN};
  __property   BSTR            DocTGID_DSPNT = {read = get_DocTGID_DSPNT, write = set_DocTGID_DSPNT};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMDocOstNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {38DC6630-17D6-42FC-B528-A2C9A6047C38}
// *********************************************************************//
interface IOleDMDocOstNom  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_TableEOF(int* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDOCN(BSTR* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDOCN(BSTR Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_DocPRIMOSN(BSTR* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_DocPRIMOSN(BSTR Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDDOCOSN(BSTR* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDDOCOSN(BSTR Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDDOC(BSTR* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDDOC(BSTR Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllPOSDOC(BSTR Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllPRDOC(int* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllPRDOC(int Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllTDOC(BSTR* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllTDOC(BSTR Value/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllNUMDOC(int* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllNUMDOC(int Value/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDFIRMDOC(BSTR Value/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDSKLDOC(BSTR Value/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDKLDOC(BSTR Value/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllSUMDOC(double* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllSUMDOC(double Value/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDUSERDOC(BSTR Value/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDTPRICEOSN(BSTR* Value/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDTPRICEOSN(BSTR Value/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_DocNAME_TPRICE(BSTR* Value/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDOSNT(BSTR* Value/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDOSNT(BSTR Value/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDDOCOSNT(BSTR* Value/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDDOCOSNT(BSTR Value/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDNOMOSNT(BSTR* Value/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDNOMOSNT(BSTR Value/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDEDOSNT(BSTR* Value/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDEDOSNT(BSTR Value/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDPARTOSNT(BSTR* Value/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDPARTOSNT(BSTR Value/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_DocTKOLOSNT(double* Value/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_DocTKOLOSNT(double Value/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_DocTKFOSNT(double* Value/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_DocTKFOSNT(double Value/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_DocTPRICEOSNT(double* Value/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_DocTPRICEOSNT(double Value/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_DocTSUMOSNT(double* Value/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_DocTSUMOSNT(double Value/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_DocTNAMENOM(BSTR* Value/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_DocTNAMEED(BSTR* Value/*[out,retval]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllGID_DOC(BSTR Value/*[in]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE get_DocGID_DOSN(BSTR* Value/*[out,retval]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE set_DocGID_DOSN(BSTR Value/*[in]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE get_DocTGID_DOSNT(BSTR* Value/*[out,retval]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE set_DocTGID_DOSNT(BSTR Value/*[in]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE NewDoc(void) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE OpenDoc(BSTR IdDoc/*[in]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE SaveDoc(void) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE CloseDoc(void) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE DvRegDoc(void) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE CancelDvRegDoc(void) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE AddDocNewString(void) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE DeleteStringDoc(void) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE DeleteDoc(BSTR Id/*[in]*/) = 0; // [42]
  virtual HRESULT STDMETHODCALLTYPE GetIdDocPoNomeruDoc(int number_doc/*[in]*/, 
                                                        DATE date_doc/*[in]*/, 
                                                        BSTR* id_doc/*[out,retval]*/) = 0; // [43]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [45]
  virtual HRESULT STDMETHODCALLTYPE get_DocTTNOM(int* Value/*[out,retval]*/) = 0; // [46]
  virtual HRESULT STDMETHODCALLTYPE set_DocTTNOM(int Value/*[in]*/) = 0; // [46]
  virtual HRESULT STDMETHODCALLTYPE get_PrefiksDoc(BSTR* Value/*[out,retval]*/) = 0; // [47]
  virtual HRESULT STDMETHODCALLTYPE set_PrefiksDoc(BSTR Value/*[in]*/) = 0; // [47]
  virtual HRESULT STDMETHODCALLTYPE get_NameBase(BSTR* Value/*[out,retval]*/) = 0; // [48]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/) = 0; // [201]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  int __fastcall get_TableEOF(void)
  {
    int Value;
    OLECHECK(this->get_TableEOF((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDOCN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDOCN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocPRIMOSN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocPRIMOSN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDDOCOSN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDDOCOSN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllPOSDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllPOSDOC((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_DocAllPRDOC(void)
  {
    int Value;
    OLECHECK(this->get_DocAllPRDOC((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllTDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllTDOC((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_DocAllNUMDOC(void)
  {
    int Value;
    OLECHECK(this->get_DocAllNUMDOC((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDFIRMDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDFIRMDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDSKLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDSKLDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDKLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDKLDOC((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_DocAllSUMDOC(void)
  {
    double Value;
    OLECHECK(this->get_DocAllSUMDOC((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDUSERDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDUSERDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllFNAMEUSER(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllFNAMEUSER((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDTPRICEOSN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDTPRICEOSN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocNAME_TPRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocNAME_TPRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDOSNT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDOSNT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDDOCOSNT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDDOCOSNT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDNOMOSNT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDNOMOSNT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDEDOSNT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDEDOSNT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDPARTOSNT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDPARTOSNT((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_DocTKOLOSNT(void)
  {
    double Value;
    OLECHECK(this->get_DocTKOLOSNT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTKFOSNT(void)
  {
    double Value;
    OLECHECK(this->get_DocTKFOSNT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTPRICEOSNT(void)
  {
    double Value;
    OLECHECK(this->get_DocTPRICEOSNT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTSUMOSNT(void)
  {
    double Value;
    OLECHECK(this->get_DocTSUMOSNT((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTNAMENOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTNAMENOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTNAMEED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTNAMEED((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllGID_DOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllGID_DOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocGID_DOSN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocGID_DOSN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTGID_DOSNT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTGID_DOSNT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/)
  {
    BSTR id_doc = 0;
    OLECHECK(this->GetIdDocPoNomeruDoc(number_doc, date_doc, (BSTR*)&id_doc));
    return id_doc;
  }

  int __fastcall get_DocTTNOM(void)
  {
    int Value;
    OLECHECK(this->get_DocTTNOM((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_PrefiksDoc(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_PrefiksDoc((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_NameBase(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NameBase((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDBASE_GALLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value));
    return Value;
  }


  __property   BSTR            TextError = {read = get_TextError};
  __property   int             CodeError = {read = get_CodeError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            DocIDOCN = {read = get_DocIDOCN, write = set_DocIDOCN};
  __property   BSTR            DocPRIMOSN = {read = get_DocPRIMOSN, write = set_DocPRIMOSN};
  __property   BSTR            DocIDDOCOSN = {read = get_DocIDDOCOSN, write = set_DocIDDOCOSN};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocAllIDUSERDOC = {read = get_DocAllIDUSERDOC, write = set_DocAllIDUSERDOC};
  __property   BSTR            DocAllFNAMEUSER = {read = get_DocAllFNAMEUSER};
  __property   BSTR            DocIDTPRICEOSN = {read = get_DocIDTPRICEOSN, write = set_DocIDTPRICEOSN};
  __property   BSTR            DocNAME_TPRICE = {read = get_DocNAME_TPRICE};
  __property   BSTR            DocTIDOSNT = {read = get_DocTIDOSNT, write = set_DocTIDOSNT};
  __property   BSTR            DocTIDDOCOSNT = {read = get_DocTIDDOCOSNT, write = set_DocTIDDOCOSNT};
  __property   BSTR            DocTIDNOMOSNT = {read = get_DocTIDNOMOSNT, write = set_DocTIDNOMOSNT};
  __property   BSTR            DocTIDEDOSNT = {read = get_DocTIDEDOSNT, write = set_DocTIDEDOSNT};
  __property   BSTR            DocTIDPARTOSNT = {read = get_DocTIDPARTOSNT, write = set_DocTIDPARTOSNT};
  __property   double          DocTKOLOSNT = {read = get_DocTKOLOSNT, write = set_DocTKOLOSNT};
  __property   double          DocTKFOSNT = {read = get_DocTKFOSNT, write = set_DocTKFOSNT};
  __property   double          DocTPRICEOSNT = {read = get_DocTPRICEOSNT, write = set_DocTPRICEOSNT};
  __property   double          DocTSUMOSNT = {read = get_DocTSUMOSNT, write = set_DocTSUMOSNT};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocGID_DOSN = {read = get_DocGID_DOSN, write = set_DocGID_DOSN};
  __property   BSTR            DocTGID_DOSNT = {read = get_DocTGID_DOSNT, write = set_DocTGID_DOSNT};
  __property   int             DocTTNOM = {read = get_DocTTNOM, write = set_DocTTNOM};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMSprInfBase
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D8FD7D0D-A464-40C9-8530-852FB721E035}
// *********************************************************************//
interface IOleDMSprInfBase  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_NameBase(BSTR* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_PrefiksBase(BSTR* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_TableEOF(int* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(void) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE GetIdPoName(BSTR name/*[in]*/, BSTR* Id/*[out,retval]*/) = 0; // [201]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_NameBase(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NameBase((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_PrefiksBase(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_PrefiksBase((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_TableEOF(void)
  {
    int Value;
    OLECHECK(this->get_TableEOF((int*)&Value));
    return Value;
  }

  BSTR __fastcall GetIdPoName(BSTR name/*[in]*/)
  {
    BSTR Id = 0;
    OLECHECK(this->GetIdPoName(name, (BSTR*)&Id));
    return Id;
  }


  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            PrefiksBase = {read = get_PrefiksBase};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIOleDMGurAllDoc
// Interface: IOleDMGurAllDoc
// *********************************************************************//
template <class T /* IOleDMGurAllDoc */ >
class TCOMIOleDMGurAllDocT : public TComInterface<IOleDMGurAllDoc>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMGurAllDocT() {}
  TCOMIOleDMGurAllDocT(IOleDMGurAllDoc *intf, bool addRef = false) : TComInterface<IOleDMGurAllDoc>(intf, addRef) {}
  TCOMIOleDMGurAllDocT(const TCOMIOleDMGurAllDocT& src) : TComInterface<IOleDMGurAllDoc>(src) {}
  TCOMIOleDMGurAllDocT& operator=(const TCOMIOleDMGurAllDocT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_IdDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdDoc(void);
  HRESULT         __fastcall set_IdDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_PosDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PosDoc(void);
  HRESULT         __fastcall set_PosDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_PrDoc(int* Value/*[out,retval]*/);
  int             __fastcall get_PrDoc(void);
  HRESULT         __fastcall set_PrDoc(int Value/*[in]*/);
  HRESULT         __fastcall get_NumDoc(int* Value/*[out,retval]*/);
  int             __fastcall get_NumDoc(void);
  HRESULT         __fastcall set_NumDoc(int Value/*[in]*/);
  HRESULT         __fastcall get_IdFirmDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdFirmDoc(void);
  HRESULT         __fastcall set_IdFirmDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdSklDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdSklDoc(void);
  HRESULT         __fastcall set_IdSklDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdKlDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdKlDoc(void);
  HRESULT         __fastcall set_IdKlDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_SumDoc(double* Value/*[out,retval]*/);
  double          __fastcall get_SumDoc(void);
  HRESULT         __fastcall set_SumDoc(double Value/*[in]*/);
  HRESULT         __fastcall get_NameFirm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameFirm(void);
  HRESULT         __fastcall set_NameFirm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameSklad(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameSklad(void);
  HRESULT         __fastcall set_NameSklad(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameKlient(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameKlient(void);
  HRESULT         __fastcall set_NameKlient(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameUser(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameUser(void);
  HRESULT         __fastcall set_NameUser(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdUserDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdUserDoc(void);
  HRESULT         __fastcall set_IdUserDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_TDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TDoc(void);
  HRESULT         __fastcall set_TDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall OpenTable(void);
  HRESULT         __fastcall UpdateTable(void);
  HRESULT         __fastcall FindDocPoIdDog(int iddogovor/*[in]*/);
  HRESULT         __fastcall get_StringTypeDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_StringTypeDoc(void);
  HRESULT         __fastcall set_StringTypeDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_OtborVkl(int* Value/*[out,retval]*/);
  int             __fastcall get_OtborVkl(void);
  HRESULT         __fastcall set_OtborVkl(int Value/*[in]*/);
  HRESULT         __fastcall get_PosNach(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PosNach(void);
  HRESULT         __fastcall set_PosNach(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_PosCon(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PosCon(void);
  HRESULT         __fastcall set_PosCon(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);

  __property   BSTR            IdDoc = {read = get_IdDoc, write = set_IdDoc};
  __property   BSTR            PosDoc = {read = get_PosDoc, write = set_PosDoc};
  __property   int             PrDoc = {read = get_PrDoc, write = set_PrDoc};
  __property   int             NumDoc = {read = get_NumDoc, write = set_NumDoc};
  __property   BSTR            IdFirmDoc = {read = get_IdFirmDoc, write = set_IdFirmDoc};
  __property   BSTR            IdSklDoc = {read = get_IdSklDoc, write = set_IdSklDoc};
  __property   BSTR            IdKlDoc = {read = get_IdKlDoc, write = set_IdKlDoc};
  __property   double          SumDoc = {read = get_SumDoc, write = set_SumDoc};
  __property   BSTR            NameFirm = {read = get_NameFirm, write = set_NameFirm};
  __property   BSTR            NameSklad = {read = get_NameSklad, write = set_NameSklad};
  __property   BSTR            NameKlient = {read = get_NameKlient, write = set_NameKlient};
  __property   BSTR            NameUser = {read = get_NameUser, write = set_NameUser};
  __property   BSTR            IdUserDoc = {read = get_IdUserDoc, write = set_IdUserDoc};
  __property   BSTR            TDoc = {read = get_TDoc, write = set_TDoc};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            StringTypeDoc = {read = get_StringTypeDoc, write = set_StringTypeDoc};
  __property   int             OtborVkl = {read = get_OtborVkl, write = set_OtborVkl};
  __property   BSTR            PosNach = {read = get_PosNach, write = set_PosNach};
  __property   BSTR            PosCon = {read = get_PosCon, write = set_PosCon};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
};
typedef TCOMIOleDMGurAllDocT<IOleDMGurAllDoc> TCOMIOleDMGurAllDoc;

// *********************************************************************//
// DispIntf:  IOleDMGurAllDoc
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A02C7199-FA6C-428C-9023-6A07FC678FB3}
// *********************************************************************//
template<class T>
class IOleDMGurAllDocDispT : public TAutoDriver<IOleDMGurAllDoc>
{
public:
  IOleDMGurAllDocDispT(){}

  IOleDMGurAllDocDispT(IOleDMGurAllDoc *pintf)
  {
    TAutoDriver<IOleDMGurAllDoc>::Bind(pintf, false);
  }

  IOleDMGurAllDocDispT(IOleDMGurAllDocPtr pintf)
  {
    TAutoDriver<IOleDMGurAllDoc>::Bind(pintf, true);
  }

  IOleDMGurAllDocDispT& operator=(IOleDMGurAllDoc *pintf)
  {
    TAutoDriver<IOleDMGurAllDoc>::Bind(pintf, false);
    return *this;
  }

  IOleDMGurAllDocDispT& operator=(IOleDMGurAllDocPtr pintf)
  {
    TAutoDriver<IOleDMGurAllDoc>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMGurAllDoc));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMGurAllDoc);
  }

  HRESULT         __fastcall get_IdDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdDoc(void);
  HRESULT         __fastcall set_IdDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_PosDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PosDoc(void);
  HRESULT         __fastcall set_PosDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_PrDoc(int* Value/*[out,retval]*/);
  int             __fastcall get_PrDoc(void);
  HRESULT         __fastcall set_PrDoc(int Value/*[in]*/);
  HRESULT         __fastcall get_NumDoc(int* Value/*[out,retval]*/);
  int             __fastcall get_NumDoc(void);
  HRESULT         __fastcall set_NumDoc(int Value/*[in]*/);
  HRESULT         __fastcall get_IdFirmDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdFirmDoc(void);
  HRESULT         __fastcall set_IdFirmDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdSklDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdSklDoc(void);
  HRESULT         __fastcall set_IdSklDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdKlDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdKlDoc(void);
  HRESULT         __fastcall set_IdKlDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_SumDoc(double* Value/*[out,retval]*/);
  double          __fastcall get_SumDoc(void);
  HRESULT         __fastcall set_SumDoc(double Value/*[in]*/);
  HRESULT         __fastcall get_NameFirm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameFirm(void);
  HRESULT         __fastcall set_NameFirm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameSklad(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameSklad(void);
  HRESULT         __fastcall set_NameSklad(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameKlient(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameKlient(void);
  HRESULT         __fastcall set_NameKlient(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameUser(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameUser(void);
  HRESULT         __fastcall set_NameUser(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdUserDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdUserDoc(void);
  HRESULT         __fastcall set_IdUserDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_TDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TDoc(void);
  HRESULT         __fastcall set_TDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall OpenTable();
  HRESULT         __fastcall UpdateTable();
  HRESULT         __fastcall FindDocPoIdDog(int iddogovor/*[in]*/);
  HRESULT         __fastcall get_StringTypeDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_StringTypeDoc(void);
  HRESULT         __fastcall set_StringTypeDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_OtborVkl(int* Value/*[out,retval]*/);
  int             __fastcall get_OtborVkl(void);
  HRESULT         __fastcall set_OtborVkl(int Value/*[in]*/);
  HRESULT         __fastcall get_PosNach(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PosNach(void);
  HRESULT         __fastcall set_PosNach(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_PosCon(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PosCon(void);
  HRESULT         __fastcall set_PosCon(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);

  __property   BSTR            IdDoc = {read = get_IdDoc, write = set_IdDoc};
  __property   BSTR            PosDoc = {read = get_PosDoc, write = set_PosDoc};
  __property   int             PrDoc = {read = get_PrDoc, write = set_PrDoc};
  __property   int             NumDoc = {read = get_NumDoc, write = set_NumDoc};
  __property   BSTR            IdFirmDoc = {read = get_IdFirmDoc, write = set_IdFirmDoc};
  __property   BSTR            IdSklDoc = {read = get_IdSklDoc, write = set_IdSklDoc};
  __property   BSTR            IdKlDoc = {read = get_IdKlDoc, write = set_IdKlDoc};
  __property   double          SumDoc = {read = get_SumDoc, write = set_SumDoc};
  __property   BSTR            NameFirm = {read = get_NameFirm, write = set_NameFirm};
  __property   BSTR            NameSklad = {read = get_NameSklad, write = set_NameSklad};
  __property   BSTR            NameKlient = {read = get_NameKlient, write = set_NameKlient};
  __property   BSTR            NameUser = {read = get_NameUser, write = set_NameUser};
  __property   BSTR            IdUserDoc = {read = get_IdUserDoc, write = set_IdUserDoc};
  __property   BSTR            TDoc = {read = get_TDoc, write = set_TDoc};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            StringTypeDoc = {read = get_StringTypeDoc, write = set_StringTypeDoc};
  __property   int             OtborVkl = {read = get_OtborVkl, write = set_OtborVkl};
  __property   BSTR            PosNach = {read = get_PosNach, write = set_PosNach};
  __property   BSTR            PosCon = {read = get_PosCon, write = set_PosCon};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
};
typedef IOleDMGurAllDocDispT<IOleDMGurAllDoc> IOleDMGurAllDocDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDM
// Interface: IOleDM
// *********************************************************************//
template <class T /* IOleDM */ >
class TCOMIOleDMT : public TComInterface<IOleDM>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMT() {}
  TCOMIOleDMT(IOleDM *intf, bool addRef = false) : TComInterface<IOleDM>(intf, addRef) {}
  TCOMIOleDMT(const TCOMIOleDMT& src) : TComInterface<IOleDM>(src) {}
  TCOMIOleDMT& operator=(const TCOMIOleDMT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ConnectString(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ConnectString(void);
  HRESULT         __fastcall set_ConnectString(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameUser(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameUser(void);
  HRESULT         __fastcall set_NameUser(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_PasswordUser(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PasswordUser(void);
  HRESULT         __fastcall set_PasswordUser(BSTR Value/*[in]*/);
  HRESULT         __fastcall GlobConnect(void);
  HRESULT         __fastcall get_ConnectOK(int* Value/*[out,retval]*/);
  int             __fastcall get_ConnectOK(void);
  HRESULT         __fastcall get_OleTextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_OleTextError(void);
  HRESULT         __fastcall get_OleCodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_OleCodeError(void);

  __property   BSTR            ConnectString = {read = get_ConnectString, write = set_ConnectString};
  __property   BSTR            NameUser = {read = get_NameUser, write = set_NameUser};
  __property   BSTR            PasswordUser = {read = get_PasswordUser, write = set_PasswordUser};
  __property   int             ConnectOK = {read = get_ConnectOK};
  __property   BSTR            OleTextError = {read = get_OleTextError};
  __property   int             OleCodeError = {read = get_OleCodeError};
};
typedef TCOMIOleDMT<IOleDM> TCOMIOleDM;

// *********************************************************************//
// DispIntf:  IOleDM
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1A440201-6AC2-4B65-A0E7-1092675C2A3F}
// *********************************************************************//
template<class T>
class IOleDMDispT : public TAutoDriver<IOleDM>
{
public:
  IOleDMDispT(){}

  IOleDMDispT(IOleDM *pintf)
  {
    TAutoDriver<IOleDM>::Bind(pintf, false);
  }

  IOleDMDispT(IOleDMPtr pintf)
  {
    TAutoDriver<IOleDM>::Bind(pintf, true);
  }

  IOleDMDispT& operator=(IOleDM *pintf)
  {
    TAutoDriver<IOleDM>::Bind(pintf, false);
    return *this;
  }

  IOleDMDispT& operator=(IOleDMPtr pintf)
  {
    TAutoDriver<IOleDM>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDM));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDM);
  }

  HRESULT         __fastcall get_ConnectString(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ConnectString(void);
  HRESULT         __fastcall set_ConnectString(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameUser(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameUser(void);
  HRESULT         __fastcall set_NameUser(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_PasswordUser(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PasswordUser(void);
  HRESULT         __fastcall set_PasswordUser(BSTR Value/*[in]*/);
  HRESULT         __fastcall GlobConnect();
  HRESULT         __fastcall get_ConnectOK(int* Value/*[out,retval]*/);
  int             __fastcall get_ConnectOK(void);
  HRESULT         __fastcall get_OleTextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_OleTextError(void);
  HRESULT         __fastcall get_OleCodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_OleCodeError(void);

  __property   BSTR            ConnectString = {read = get_ConnectString, write = set_ConnectString};
  __property   BSTR            NameUser = {read = get_NameUser, write = set_NameUser};
  __property   BSTR            PasswordUser = {read = get_PasswordUser, write = set_PasswordUser};
  __property   int             ConnectOK = {read = get_ConnectOK};
  __property   BSTR            OleTextError = {read = get_OleTextError};
  __property   int             OleCodeError = {read = get_OleCodeError};
};
typedef IOleDMDispT<IOleDM> IOleDMDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprSklad
// Interface: IOleDMSprSklad
// *********************************************************************//
template <class T /* IOleDMSprSklad */ >
class TCOMIOleDMSprSkladT : public TComInterface<IOleDMSprSklad>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMSprSkladT() {}
  TCOMIOleDMSprSkladT(IOleDMSprSklad *intf, bool addRef = false) : TComInterface<IOleDMSprSklad>(intf, addRef) {}
  TCOMIOleDMSprSkladT(const TCOMIOleDMSprSkladT& src) : TComInterface<IOleDMSprSklad>(src) {}
  TCOMIOleDMSprSkladT& operator=(const TCOMIOleDMSprSkladT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_IdSklad(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdSklad(void);
  HRESULT         __fastcall set_IdSklad(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameSklad(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameSklad(void);
  HRESULT         __fastcall set_NameSklad(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_MolSklad(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_MolSklad(void);
  HRESULT         __fastcall set_MolSklad(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_AdrSklad(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_AdrSklad(void);
  HRESULT         __fastcall set_AdrSklad(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_TSklad(int* Value/*[out,retval]*/);
  int             __fastcall get_TSklad(void);
  HRESULT         __fastcall set_TSklad(int Value/*[in]*/);
  HRESULT         __fastcall get_GID_Sklad(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_GID_Sklad(void);
  HRESULT         __fastcall set_GID_Sklad(BSTR Value/*[in]*/);
  HRESULT         __fastcall OpenElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall NewElement(void);
  HRESULT         __fastcall SaveElement(void);
  HRESULT         __fastcall DeleteElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall CloseElement(void);

  __property   BSTR            IdSklad = {read = get_IdSklad, write = set_IdSklad};
  __property   BSTR            NameSklad = {read = get_NameSklad, write = set_NameSklad};
  __property   BSTR            MolSklad = {read = get_MolSklad, write = set_MolSklad};
  __property   BSTR            AdrSklad = {read = get_AdrSklad, write = set_AdrSklad};
  __property   int             TSklad = {read = get_TSklad, write = set_TSklad};
  __property   BSTR            GID_Sklad = {read = get_GID_Sklad, write = set_GID_Sklad};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
};
typedef TCOMIOleDMSprSkladT<IOleDMSprSklad> TCOMIOleDMSprSklad;

// *********************************************************************//
// DispIntf:  IOleDMSprSklad
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5B2971DD-B19A-4FC3-BEDC-3E05B157FE9A}
// *********************************************************************//
template<class T>
class IOleDMSprSkladDispT : public TAutoDriver<IOleDMSprSklad>
{
public:
  IOleDMSprSkladDispT(){}

  IOleDMSprSkladDispT(IOleDMSprSklad *pintf)
  {
    TAutoDriver<IOleDMSprSklad>::Bind(pintf, false);
  }

  IOleDMSprSkladDispT(IOleDMSprSkladPtr pintf)
  {
    TAutoDriver<IOleDMSprSklad>::Bind(pintf, true);
  }

  IOleDMSprSkladDispT& operator=(IOleDMSprSklad *pintf)
  {
    TAutoDriver<IOleDMSprSklad>::Bind(pintf, false);
    return *this;
  }

  IOleDMSprSkladDispT& operator=(IOleDMSprSkladPtr pintf)
  {
    TAutoDriver<IOleDMSprSklad>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMSprSklad));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMSprSklad);
  }

  HRESULT         __fastcall get_IdSklad(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdSklad(void);
  HRESULT         __fastcall set_IdSklad(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameSklad(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameSklad(void);
  HRESULT         __fastcall set_NameSklad(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_MolSklad(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_MolSklad(void);
  HRESULT         __fastcall set_MolSklad(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_AdrSklad(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_AdrSklad(void);
  HRESULT         __fastcall set_AdrSklad(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_TSklad(int* Value/*[out,retval]*/);
  int             __fastcall get_TSklad(void);
  HRESULT         __fastcall set_TSklad(int Value/*[in]*/);
  HRESULT         __fastcall get_GID_Sklad(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_GID_Sklad(void);
  HRESULT         __fastcall set_GID_Sklad(BSTR Value/*[in]*/);
  HRESULT         __fastcall OpenElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall NewElement();
  HRESULT         __fastcall SaveElement();
  HRESULT         __fastcall DeleteElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall CloseElement();

  __property   BSTR            IdSklad = {read = get_IdSklad, write = set_IdSklad};
  __property   BSTR            NameSklad = {read = get_NameSklad, write = set_NameSklad};
  __property   BSTR            MolSklad = {read = get_MolSklad, write = set_MolSklad};
  __property   BSTR            AdrSklad = {read = get_AdrSklad, write = set_AdrSklad};
  __property   int             TSklad = {read = get_TSklad, write = set_TSklad};
  __property   BSTR            GID_Sklad = {read = get_GID_Sklad, write = set_GID_Sklad};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
};
typedef IOleDMSprSkladDispT<IOleDMSprSklad> IOleDMSprSkladDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprFirm
// Interface: IOleDMSprFirm
// *********************************************************************//
template <class T /* IOleDMSprFirm */ >
class TCOMIOleDMSprFirmT : public TComInterface<IOleDMSprFirm>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMSprFirmT() {}
  TCOMIOleDMSprFirmT(IOleDMSprFirm *intf, bool addRef = false) : TComInterface<IOleDMSprFirm>(intf, addRef) {}
  TCOMIOleDMSprFirmT(const TCOMIOleDMSprFirmT& src) : TComInterface<IOleDMSprFirm>(src) {}
  TCOMIOleDMSprFirmT& operator=(const TCOMIOleDMSprFirmT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_IdFirm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdFirm(void);
  HRESULT         __fastcall set_IdFirm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameFirm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameFirm(void);
  HRESULT         __fastcall set_NameFirm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_FNameNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FNameNom(void);
  HRESULT         __fastcall set_FNameNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_PAdrFirm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PAdrFirm(void);
  HRESULT         __fastcall set_PAdrFirm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_UAdrFirm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_UAdrFirm(void);
  HRESULT         __fastcall set_UAdrFirm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_INNFirm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_INNFirm(void);
  HRESULT         __fastcall set_INNFirm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_KPPFirm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_KPPFirm(void);
  HRESULT         __fastcall set_KPPFirm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_GID_Firm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_GID_Firm(void);
  HRESULT         __fastcall set_GID_Firm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall OpenTable(void);
  HRESULT         __fastcall OpenElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall NewElement(void);
  HRESULT         __fastcall SaveElement(void);
  HRESULT         __fastcall DeleteElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall ElementEdit(void);
  HRESULT         __fastcall ElementPost(void);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);

  __property   BSTR            IdFirm = {read = get_IdFirm, write = set_IdFirm};
  __property   BSTR            NameFirm = {read = get_NameFirm, write = set_NameFirm};
  __property   BSTR            FNameNom = {read = get_FNameNom, write = set_FNameNom};
  __property   BSTR            PAdrFirm = {read = get_PAdrFirm, write = set_PAdrFirm};
  __property   BSTR            UAdrFirm = {read = get_UAdrFirm, write = set_UAdrFirm};
  __property   BSTR            INNFirm = {read = get_INNFirm, write = set_INNFirm};
  __property   BSTR            KPPFirm = {read = get_KPPFirm, write = set_KPPFirm};
  __property   BSTR            GID_Firm = {read = get_GID_Firm, write = set_GID_Firm};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
};
typedef TCOMIOleDMSprFirmT<IOleDMSprFirm> TCOMIOleDMSprFirm;

// *********************************************************************//
// DispIntf:  IOleDMSprFirm
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C22EF17E-FDD9-48D0-9FE4-59AE225450D2}
// *********************************************************************//
template<class T>
class IOleDMSprFirmDispT : public TAutoDriver<IOleDMSprFirm>
{
public:
  IOleDMSprFirmDispT(){}

  IOleDMSprFirmDispT(IOleDMSprFirm *pintf)
  {
    TAutoDriver<IOleDMSprFirm>::Bind(pintf, false);
  }

  IOleDMSprFirmDispT(IOleDMSprFirmPtr pintf)
  {
    TAutoDriver<IOleDMSprFirm>::Bind(pintf, true);
  }

  IOleDMSprFirmDispT& operator=(IOleDMSprFirm *pintf)
  {
    TAutoDriver<IOleDMSprFirm>::Bind(pintf, false);
    return *this;
  }

  IOleDMSprFirmDispT& operator=(IOleDMSprFirmPtr pintf)
  {
    TAutoDriver<IOleDMSprFirm>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMSprFirm));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMSprFirm);
  }

  HRESULT         __fastcall get_IdFirm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdFirm(void);
  HRESULT         __fastcall set_IdFirm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameFirm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameFirm(void);
  HRESULT         __fastcall set_NameFirm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_FNameNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FNameNom(void);
  HRESULT         __fastcall set_FNameNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_PAdrFirm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PAdrFirm(void);
  HRESULT         __fastcall set_PAdrFirm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_UAdrFirm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_UAdrFirm(void);
  HRESULT         __fastcall set_UAdrFirm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_INNFirm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_INNFirm(void);
  HRESULT         __fastcall set_INNFirm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_KPPFirm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_KPPFirm(void);
  HRESULT         __fastcall set_KPPFirm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_GID_Firm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_GID_Firm(void);
  HRESULT         __fastcall set_GID_Firm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall OpenTable();
  HRESULT         __fastcall OpenElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall NewElement();
  HRESULT         __fastcall SaveElement();
  HRESULT         __fastcall DeleteElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall ElementEdit();
  HRESULT         __fastcall ElementPost();
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();

  __property   BSTR            IdFirm = {read = get_IdFirm, write = set_IdFirm};
  __property   BSTR            NameFirm = {read = get_NameFirm, write = set_NameFirm};
  __property   BSTR            FNameNom = {read = get_FNameNom, write = set_FNameNom};
  __property   BSTR            PAdrFirm = {read = get_PAdrFirm, write = set_PAdrFirm};
  __property   BSTR            UAdrFirm = {read = get_UAdrFirm, write = set_UAdrFirm};
  __property   BSTR            INNFirm = {read = get_INNFirm, write = set_INNFirm};
  __property   BSTR            KPPFirm = {read = get_KPPFirm, write = set_KPPFirm};
  __property   BSTR            GID_Firm = {read = get_GID_Firm, write = set_GID_Firm};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
};
typedef IOleDMSprFirmDispT<IOleDMSprFirm> IOleDMSprFirmDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprNom
// Interface: IOleDMSprNom
// *********************************************************************//
template <class T /* IOleDMSprNom */ >
class TCOMIOleDMSprNomT : public TComInterface<IOleDMSprNom>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMSprNomT() {}
  TCOMIOleDMSprNomT(IOleDMSprNom *intf, bool addRef = false) : TComInterface<IOleDMSprNom>(intf, addRef) {}
  TCOMIOleDMSprNomT(const TCOMIOleDMSprNomT& src) : TComInterface<IOleDMSprNom>(src) {}
  TCOMIOleDMSprNomT& operator=(const TCOMIOleDMSprNomT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_IdNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdNom(void);
  HRESULT         __fastcall set_IdNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_TNom(int* Value/*[out,retval]*/);
  int             __fastcall get_TNom(void);
  HRESULT         __fastcall set_TNom(int Value/*[in]*/);
  HRESULT         __fastcall get_CodeNom(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeNom(void);
  HRESULT         __fastcall set_CodeNom(int Value/*[in]*/);
  HRESULT         __fastcall get_NameNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameNom(void);
  HRESULT         __fastcall set_NameNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_FNameNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FNameNom(void);
  HRESULT         __fastcall set_FNameNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_KrNameNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_KrNameNom(void);
  HRESULT         __fastcall set_KrNameNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdBasEdNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdBasEdNom(void);
  HRESULT         __fastcall set_IdBasEdNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdOsnEdNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdOsnEdNom(void);
  HRESULT         __fastcall set_IdOsnEdNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdGrpNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdGrpNom(void);
  HRESULT         __fastcall set_IdGrpNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ArtNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ArtNom(void);
  HRESULT         __fastcall set_ArtNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_GID_SNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_GID_SNom(void);
  HRESULT         __fastcall set_GID_SNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_AllElement(int* Value/*[out,retval]*/);
  int             __fastcall get_AllElement(void);
  HRESULT         __fastcall set_AllElement(int Value/*[in]*/);
  HRESULT         __fastcall get_IdTypePrice(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdTypePrice(void);
  HRESULT         __fastcall set_IdTypePrice(BSTR Value/*[in]*/);
  HRESULT         __fastcall OpenTable(BSTR Grp/*[in]*/, int All/*[in]*/);
  HRESULT         __fastcall OpenElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall NewElement(BSTR IdGrp/*[in]*/);
  HRESULT         __fastcall SaveElement(void);
  HRESULT         __fastcall DeleteElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall ChancheGrp(BSTR NewGrp/*[in]*/);
  HRESULT         __fastcall FindPoCodu(int Code/*[in]*/);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);

  __property   BSTR            IdNom = {read = get_IdNom, write = set_IdNom};
  __property   int             TNom = {read = get_TNom, write = set_TNom};
  __property   int             CodeNom = {read = get_CodeNom, write = set_CodeNom};
  __property   BSTR            NameNom = {read = get_NameNom, write = set_NameNom};
  __property   BSTR            FNameNom = {read = get_FNameNom, write = set_FNameNom};
  __property   BSTR            KrNameNom = {read = get_KrNameNom, write = set_KrNameNom};
  __property   BSTR            IdBasEdNom = {read = get_IdBasEdNom, write = set_IdBasEdNom};
  __property   BSTR            IdOsnEdNom = {read = get_IdOsnEdNom, write = set_IdOsnEdNom};
  __property   BSTR            IdGrpNom = {read = get_IdGrpNom, write = set_IdGrpNom};
  __property   BSTR            ArtNom = {read = get_ArtNom, write = set_ArtNom};
  __property   BSTR            GID_SNom = {read = get_GID_SNom, write = set_GID_SNom};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             AllElement = {read = get_AllElement, write = set_AllElement};
  __property   BSTR            IdTypePrice = {read = get_IdTypePrice, write = set_IdTypePrice};
  __property   int             TableEOF = {read = get_TableEOF};
};
typedef TCOMIOleDMSprNomT<IOleDMSprNom> TCOMIOleDMSprNom;

// *********************************************************************//
// DispIntf:  IOleDMSprNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB727574-CFC8-449E-AB6B-FC507E173833}
// *********************************************************************//
template<class T>
class IOleDMSprNomDispT : public TAutoDriver<IOleDMSprNom>
{
public:
  IOleDMSprNomDispT(){}

  IOleDMSprNomDispT(IOleDMSprNom *pintf)
  {
    TAutoDriver<IOleDMSprNom>::Bind(pintf, false);
  }

  IOleDMSprNomDispT(IOleDMSprNomPtr pintf)
  {
    TAutoDriver<IOleDMSprNom>::Bind(pintf, true);
  }

  IOleDMSprNomDispT& operator=(IOleDMSprNom *pintf)
  {
    TAutoDriver<IOleDMSprNom>::Bind(pintf, false);
    return *this;
  }

  IOleDMSprNomDispT& operator=(IOleDMSprNomPtr pintf)
  {
    TAutoDriver<IOleDMSprNom>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMSprNom));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMSprNom);
  }

  HRESULT         __fastcall get_IdNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdNom(void);
  HRESULT         __fastcall set_IdNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_TNom(int* Value/*[out,retval]*/);
  int             __fastcall get_TNom(void);
  HRESULT         __fastcall set_TNom(int Value/*[in]*/);
  HRESULT         __fastcall get_CodeNom(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeNom(void);
  HRESULT         __fastcall set_CodeNom(int Value/*[in]*/);
  HRESULT         __fastcall get_NameNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameNom(void);
  HRESULT         __fastcall set_NameNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_FNameNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FNameNom(void);
  HRESULT         __fastcall set_FNameNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_KrNameNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_KrNameNom(void);
  HRESULT         __fastcall set_KrNameNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdBasEdNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdBasEdNom(void);
  HRESULT         __fastcall set_IdBasEdNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdOsnEdNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdOsnEdNom(void);
  HRESULT         __fastcall set_IdOsnEdNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdGrpNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdGrpNom(void);
  HRESULT         __fastcall set_IdGrpNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ArtNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ArtNom(void);
  HRESULT         __fastcall set_ArtNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_GID_SNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_GID_SNom(void);
  HRESULT         __fastcall set_GID_SNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_AllElement(int* Value/*[out,retval]*/);
  int             __fastcall get_AllElement(void);
  HRESULT         __fastcall set_AllElement(int Value/*[in]*/);
  HRESULT         __fastcall get_IdTypePrice(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdTypePrice(void);
  HRESULT         __fastcall set_IdTypePrice(BSTR Value/*[in]*/);
  HRESULT         __fastcall OpenTable(BSTR Grp/*[in]*/, int All/*[in]*/);
  HRESULT         __fastcall OpenElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall NewElement(BSTR IdGrp/*[in]*/);
  HRESULT         __fastcall SaveElement();
  HRESULT         __fastcall DeleteElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall ChancheGrp(BSTR NewGrp/*[in]*/);
  HRESULT         __fastcall FindPoCodu(int Code/*[in]*/);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();

  __property   BSTR            IdNom = {read = get_IdNom, write = set_IdNom};
  __property   int             TNom = {read = get_TNom, write = set_TNom};
  __property   int             CodeNom = {read = get_CodeNom, write = set_CodeNom};
  __property   BSTR            NameNom = {read = get_NameNom, write = set_NameNom};
  __property   BSTR            FNameNom = {read = get_FNameNom, write = set_FNameNom};
  __property   BSTR            KrNameNom = {read = get_KrNameNom, write = set_KrNameNom};
  __property   BSTR            IdBasEdNom = {read = get_IdBasEdNom, write = set_IdBasEdNom};
  __property   BSTR            IdOsnEdNom = {read = get_IdOsnEdNom, write = set_IdOsnEdNom};
  __property   BSTR            IdGrpNom = {read = get_IdGrpNom, write = set_IdGrpNom};
  __property   BSTR            ArtNom = {read = get_ArtNom, write = set_ArtNom};
  __property   BSTR            GID_SNom = {read = get_GID_SNom, write = set_GID_SNom};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             AllElement = {read = get_AllElement, write = set_AllElement};
  __property   BSTR            IdTypePrice = {read = get_IdTypePrice, write = set_IdTypePrice};
  __property   int             TableEOF = {read = get_TableEOF};
};
typedef IOleDMSprNomDispT<IOleDMSprNom> IOleDMSprNomDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprEd
// Interface: IOleDMSprEd
// *********************************************************************//
template <class T /* IOleDMSprEd */ >
class TCOMIOleDMSprEdT : public TComInterface<IOleDMSprEd>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMSprEdT() {}
  TCOMIOleDMSprEdT(IOleDMSprEd *intf, bool addRef = false) : TComInterface<IOleDMSprEd>(intf, addRef) {}
  TCOMIOleDMSprEdT(const TCOMIOleDMSprEdT& src) : TComInterface<IOleDMSprEd>(src) {}
  TCOMIOleDMSprEdT& operator=(const TCOMIOleDMSprEdT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_IdEd(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdEd(void);
  HRESULT         __fastcall set_IdEd(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameEd(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameEd(void);
  HRESULT         __fastcall set_NameEd(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_KFEd(double* Value/*[out,retval]*/);
  double          __fastcall get_KFEd(void);
  HRESULT         __fastcall set_KFEd(double Value/*[in]*/);
  HRESULT         __fastcall get_TShEd(int* Value/*[out,retval]*/);
  int             __fastcall get_TShEd(void);
  HRESULT         __fastcall set_TShEd(int Value/*[in]*/);
  HRESULT         __fastcall get_ShEd(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ShEd(void);
  HRESULT         __fastcall set_ShEd(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdNomEd(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdNomEd(void);
  HRESULT         __fastcall set_IdNomEd(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdOKEIEd(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdOKEIEd(void);
  HRESULT         __fastcall set_IdOKEIEd(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NeIspEd(int* Value/*[out,retval]*/);
  int             __fastcall get_NeIspEd(void);
  HRESULT         __fastcall set_NeIspEd(int Value/*[in]*/);
  HRESULT         __fastcall get_GID_SEd(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_GID_SEd(void);
  HRESULT         __fastcall set_GID_SEd(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall OpenTable(BSTR IdNom/*[in]*/);
  HRESULT         __fastcall OpenElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall NewElement(BSTR IdNom/*[in]*/);
  HRESULT         __fastcall SaveElement(void);
  HRESULT         __fastcall DeleteElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall NewShtrihCod(void);
  HRESULT         __fastcall FindEdPoSh(BSTR ShtrihCod/*[in]*/);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR Id/*[in]*/);

  __property   BSTR            IdEd = {read = get_IdEd, write = set_IdEd};
  __property   BSTR            NameEd = {read = get_NameEd, write = set_NameEd};
  __property   double          KFEd = {read = get_KFEd, write = set_KFEd};
  __property   int             TShEd = {read = get_TShEd, write = set_TShEd};
  __property   BSTR            ShEd = {read = get_ShEd, write = set_ShEd};
  __property   BSTR            IdNomEd = {read = get_IdNomEd, write = set_IdNomEd};
  __property   BSTR            IdOKEIEd = {read = get_IdOKEIEd, write = set_IdOKEIEd};
  __property   int             NeIspEd = {read = get_NeIspEd, write = set_NeIspEd};
  __property   BSTR            GID_SEd = {read = get_GID_SEd, write = set_GID_SEd};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
};
typedef TCOMIOleDMSprEdT<IOleDMSprEd> TCOMIOleDMSprEd;

// *********************************************************************//
// DispIntf:  IOleDMSprEd
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A7FF2337-C284-4BDC-84C5-5EB62FD8058C}
// *********************************************************************//
template<class T>
class IOleDMSprEdDispT : public TAutoDriver<IOleDMSprEd>
{
public:
  IOleDMSprEdDispT(){}

  IOleDMSprEdDispT(IOleDMSprEd *pintf)
  {
    TAutoDriver<IOleDMSprEd>::Bind(pintf, false);
  }

  IOleDMSprEdDispT(IOleDMSprEdPtr pintf)
  {
    TAutoDriver<IOleDMSprEd>::Bind(pintf, true);
  }

  IOleDMSprEdDispT& operator=(IOleDMSprEd *pintf)
  {
    TAutoDriver<IOleDMSprEd>::Bind(pintf, false);
    return *this;
  }

  IOleDMSprEdDispT& operator=(IOleDMSprEdPtr pintf)
  {
    TAutoDriver<IOleDMSprEd>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMSprEd));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMSprEd);
  }

  HRESULT         __fastcall get_IdEd(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdEd(void);
  HRESULT         __fastcall set_IdEd(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameEd(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameEd(void);
  HRESULT         __fastcall set_NameEd(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_KFEd(double* Value/*[out,retval]*/);
  double          __fastcall get_KFEd(void);
  HRESULT         __fastcall set_KFEd(double Value/*[in]*/);
  HRESULT         __fastcall get_TShEd(int* Value/*[out,retval]*/);
  int             __fastcall get_TShEd(void);
  HRESULT         __fastcall set_TShEd(int Value/*[in]*/);
  HRESULT         __fastcall get_ShEd(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ShEd(void);
  HRESULT         __fastcall set_ShEd(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdNomEd(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdNomEd(void);
  HRESULT         __fastcall set_IdNomEd(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdOKEIEd(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdOKEIEd(void);
  HRESULT         __fastcall set_IdOKEIEd(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NeIspEd(int* Value/*[out,retval]*/);
  int             __fastcall get_NeIspEd(void);
  HRESULT         __fastcall set_NeIspEd(int Value/*[in]*/);
  HRESULT         __fastcall get_GID_SEd(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_GID_SEd(void);
  HRESULT         __fastcall set_GID_SEd(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall OpenTable(BSTR IdNom/*[in]*/);
  HRESULT         __fastcall OpenElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall NewElement(BSTR IdNom/*[in]*/);
  HRESULT         __fastcall SaveElement();
  HRESULT         __fastcall DeleteElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall NewShtrihCod();
  HRESULT         __fastcall FindEdPoSh(BSTR ShtrihCod/*[in]*/);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR Id/*[in]*/);

  __property   BSTR            IdEd = {read = get_IdEd, write = set_IdEd};
  __property   BSTR            NameEd = {read = get_NameEd, write = set_NameEd};
  __property   double          KFEd = {read = get_KFEd, write = set_KFEd};
  __property   int             TShEd = {read = get_TShEd, write = set_TShEd};
  __property   BSTR            ShEd = {read = get_ShEd, write = set_ShEd};
  __property   BSTR            IdNomEd = {read = get_IdNomEd, write = set_IdNomEd};
  __property   BSTR            IdOKEIEd = {read = get_IdOKEIEd, write = set_IdOKEIEd};
  __property   int             NeIspEd = {read = get_NeIspEd, write = set_NeIspEd};
  __property   BSTR            GID_SEd = {read = get_GID_SEd, write = set_GID_SEd};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
};
typedef IOleDMSprEdDispT<IOleDMSprEd> IOleDMSprEdDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMDocRepKKM
// Interface: IOleDMDocRepKKM
// *********************************************************************//
template <class T /* IOleDMDocRepKKM */ >
class TCOMIOleDMDocRepKKMT : public TComInterface<IOleDMDocRepKKM>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMDocRepKKMT() {}
  TCOMIOleDMDocRepKKMT(IOleDMDocRepKKM *intf, bool addRef = false) : TComInterface<IOleDMDocRepKKM>(intf, addRef) {}
  TCOMIOleDMDocRepKKMT(const TCOMIOleDMDocRepKKMT& src) : TComInterface<IOleDMDocRepKKM>(src) {}
  TCOMIOleDMDocRepKKMT& operator=(const TCOMIOleDMDocRepKKMT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_DocAllIDDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDDOC(void);
  HRESULT         __fastcall set_DocAllIDDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllPOSDOC(void);
  HRESULT         __fastcall set_DocAllPOSDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPRDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllPRDOC(void);
  HRESULT         __fastcall set_DocAllPRDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllNUMDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllNUMDOC(void);
  HRESULT         __fastcall set_DocAllNUMDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDFIRMDOC(void);
  HRESULT         __fastcall set_DocAllIDFIRMDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDSKLDOC(void);
  HRESULT         __fastcall set_DocAllIDSKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDKLDOC(void);
  HRESULT         __fastcall set_DocAllIDKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllSUMDOC(double* Value/*[out,retval]*/);
  double          __fastcall get_DocAllSUMDOC(void);
  HRESULT         __fastcall set_DocAllSUMDOC(double Value/*[in]*/);
  HRESULT         __fastcall get_DocAllFNAME_USER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllFNAME_USER(void);
  HRESULT         __fastcall get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDUSERDOC(void);
  HRESULT         __fastcall set_DocAllIDUSERDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDDOGDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDDOGDOC(void);
  HRESULT         __fastcall set_DocAllIDDOGDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllNAME_SDOG(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllNAME_SDOG(void);
  HRESULT         __fastcall get_DocAllNAMEKLIENT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllNAMEKLIENT(void);
  HRESULT         __fastcall get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllGID_DOC(void);
  HRESULT         __fastcall set_DocAllGID_DOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocID_DREPKKM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocID_DREPKKM(void);
  HRESULT         __fastcall set_DocID_DREPKKM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocGID_DREPKKM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocGID_DREPKKM(void);
  HRESULT         __fastcall set_DocGID_DREPKKM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDDOC_DREPKKM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDDOC_DREPKKM(void);
  HRESULT         __fastcall set_DocIDDOC_DREPKKM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDKKM_DREPKKM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDKKM_DREPKKM(void);
  HRESULT         __fastcall set_DocIDKKM_DREPKKM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocPRIM_DREPKKM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocPRIM_DREPKKM(void);
  HRESULT         __fastcall set_DocPRIM_DREPKKM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocOPLNAL_DREPKKM(double* Value/*[out,retval]*/);
  double          __fastcall get_DocOPLNAL_DREPKKM(void);
  HRESULT         __fastcall set_DocOPLNAL_DREPKKM(double Value/*[in]*/);
  HRESULT         __fastcall get_DocOPLPC_DREPKKM(double* Value/*[out,retval]*/);
  double          __fastcall get_DocOPLPC_DREPKKM(void);
  HRESULT         __fastcall set_DocOPLPC_DREPKKM(double Value/*[in]*/);
  HRESULT         __fastcall get_DocNKL_DREPKKM(int* Value/*[out,retval]*/);
  int             __fastcall get_DocNKL_DREPKKM(void);
  HRESULT         __fastcall set_DocNKL_DREPKKM(int Value/*[in]*/);
  HRESULT         __fastcall get_DocSK_DREPKKM(double* Value/*[out,retval]*/);
  double          __fastcall get_DocSK_DREPKKM(void);
  HRESULT         __fastcall set_DocSK_DREPKKM(double Value/*[in]*/);
  HRESULT         __fastcall get_DocNAD_DREPKKM(double* Value/*[out,retval]*/);
  double          __fastcall get_DocNAD_DREPKKM(void);
  HRESULT         __fastcall set_DocNAD_DREPKKM(double Value/*[in]*/);
  HRESULT         __fastcall get_DocDVREG_DREPKKM(int* Value/*[out,retval]*/);
  int             __fastcall get_DocDVREG_DREPKKM(void);
  HRESULT         __fastcall set_DocDVREG_DREPKKM(int Value/*[in]*/);
  HRESULT         __fastcall get_DocNAMEKKM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocNAMEKKM(void);
  HRESULT         __fastcall get_DocAllNAMEFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllNAMEFIRM(void);
  HRESULT         __fastcall get_DocAllNAMESKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllNAMESKLAD(void);
  HRESULT         __fastcall get_DocTID_DREPKKMT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTID_DREPKKMT(void);
  HRESULT         __fastcall set_DocTID_DREPKKMT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTGID_DREPKKMT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTGID_DREPKKMT(void);
  HRESULT         __fastcall set_DocTGID_DREPKKMT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDDOC_DREPKKMT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDDOC_DREPKKMT(void);
  HRESULT         __fastcall set_DocTIDDOC_DREPKKMT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDNOM_DREPKKMT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDNOM_DREPKKMT(void);
  HRESULT         __fastcall set_DocTIDNOM_DREPKKMT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDED_DREPKKMT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDED_DREPKKMT(void);
  HRESULT         __fastcall set_DocTIDED_DREPKKMT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTKOL_DREPKKMT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKOL_DREPKKMT(void);
  HRESULT         __fastcall set_DocTKOL_DREPKKMT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTKF_DREPKKMT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKF_DREPKKMT(void);
  HRESULT         __fastcall set_DocTKF_DREPKKMT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTSUM_DREPKKMT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTSUM_DREPKKMT(void);
  HRESULT         __fastcall set_DocTSUM_DREPKKMT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTSK_DREPKKMT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTSK_DREPKKMT(void);
  HRESULT         __fastcall set_DocTSK_DREPKKMT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTNAD_REPKKMT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTNAD_REPKKMT(void);
  HRESULT         __fastcall set_DocTNAD_REPKKMT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTPRICEFULL_DREPKKMT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTPRICEFULL_DREPKKMT(void);
  HRESULT         __fastcall set_DocTPRICEFULL_DREPKKMT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMENOM(void);
  HRESULT         __fastcall get_DocTNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMEED(void);
  HRESULT         __fastcall get_DocTTNOM(int* Value/*[out,retval]*/);
  int             __fastcall get_DocTTNOM(void);
  HRESULT         __fastcall get_DocTPRICE_DREPKKMT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTPRICE_DREPKKMT(void);
  HRESULT         __fastcall set_DocTPRICE_DREPKKMT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocAllTDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllTDOC(void);
  HRESULT         __fastcall set_DocAllTDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall NewDoc(void);
  HRESULT         __fastcall OpenDoc(BSTR Id/*[in]*/);
  HRESULT         __fastcall SaveDoc(void);
  HRESULT         __fastcall DvRegDoc(void);
  HRESULT         __fastcall CancelDvRegDoc(void);
  HRESULT         __fastcall DeleteDoc(BSTR Id/*[in]*/);
  HRESULT         __fastcall AddDocNewString(void);
  HRESULT         __fastcall DeleteStringDoc(void);
  HRESULT         __fastcall CloseDoc(void);
  HRESULT         __fastcall get_PrefiksDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PrefiksDoc(void);
  HRESULT         __fastcall set_PrefiksDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameBase(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameBase(void);
  HRESULT         __fastcall get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDBASE_GALLDOC(void);
  HRESULT         __fastcall set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocAllFNAME_USER = {read = get_DocAllFNAME_USER};
  __property   BSTR            DocAllIDUSERDOC = {read = get_DocAllIDUSERDOC, write = set_DocAllIDUSERDOC};
  __property   BSTR            DocAllIDDOGDOC = {read = get_DocAllIDDOGDOC, write = set_DocAllIDDOGDOC};
  __property   BSTR            DocAllNAME_SDOG = {read = get_DocAllNAME_SDOG};
  __property   BSTR            DocAllNAMEKLIENT = {read = get_DocAllNAMEKLIENT};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocID_DREPKKM = {read = get_DocID_DREPKKM, write = set_DocID_DREPKKM};
  __property   BSTR            DocGID_DREPKKM = {read = get_DocGID_DREPKKM, write = set_DocGID_DREPKKM};
  __property   BSTR            DocIDDOC_DREPKKM = {read = get_DocIDDOC_DREPKKM, write = set_DocIDDOC_DREPKKM};
  __property   BSTR            DocIDKKM_DREPKKM = {read = get_DocIDKKM_DREPKKM, write = set_DocIDKKM_DREPKKM};
  __property   BSTR            DocPRIM_DREPKKM = {read = get_DocPRIM_DREPKKM, write = set_DocPRIM_DREPKKM};
  __property   double          DocOPLNAL_DREPKKM = {read = get_DocOPLNAL_DREPKKM, write = set_DocOPLNAL_DREPKKM};
  __property   double          DocOPLPC_DREPKKM = {read = get_DocOPLPC_DREPKKM, write = set_DocOPLPC_DREPKKM};
  __property   int             DocNKL_DREPKKM = {read = get_DocNKL_DREPKKM, write = set_DocNKL_DREPKKM};
  __property   double          DocSK_DREPKKM = {read = get_DocSK_DREPKKM, write = set_DocSK_DREPKKM};
  __property   double          DocNAD_DREPKKM = {read = get_DocNAD_DREPKKM, write = set_DocNAD_DREPKKM};
  __property   int             DocDVREG_DREPKKM = {read = get_DocDVREG_DREPKKM, write = set_DocDVREG_DREPKKM};
  __property   BSTR            DocNAMEKKM = {read = get_DocNAMEKKM};
  __property   BSTR            DocAllNAMEFIRM = {read = get_DocAllNAMEFIRM};
  __property   BSTR            DocAllNAMESKLAD = {read = get_DocAllNAMESKLAD};
  __property   BSTR            DocTID_DREPKKMT = {read = get_DocTID_DREPKKMT, write = set_DocTID_DREPKKMT};
  __property   BSTR            DocTGID_DREPKKMT = {read = get_DocTGID_DREPKKMT, write = set_DocTGID_DREPKKMT};
  __property   BSTR            DocTIDDOC_DREPKKMT = {read = get_DocTIDDOC_DREPKKMT, write = set_DocTIDDOC_DREPKKMT};
  __property   BSTR            DocTIDNOM_DREPKKMT = {read = get_DocTIDNOM_DREPKKMT, write = set_DocTIDNOM_DREPKKMT};
  __property   BSTR            DocTIDED_DREPKKMT = {read = get_DocTIDED_DREPKKMT, write = set_DocTIDED_DREPKKMT};
  __property   double          DocTKOL_DREPKKMT = {read = get_DocTKOL_DREPKKMT, write = set_DocTKOL_DREPKKMT};
  __property   double          DocTKF_DREPKKMT = {read = get_DocTKF_DREPKKMT, write = set_DocTKF_DREPKKMT};
  __property   double          DocTSUM_DREPKKMT = {read = get_DocTSUM_DREPKKMT, write = set_DocTSUM_DREPKKMT};
  __property   double          DocTSK_DREPKKMT = {read = get_DocTSK_DREPKKMT, write = set_DocTSK_DREPKKMT};
  __property   double          DocTNAD_REPKKMT = {read = get_DocTNAD_REPKKMT, write = set_DocTNAD_REPKKMT};
  __property   double          DocTPRICEFULL_DREPKKMT = {read = get_DocTPRICEFULL_DREPKKMT, write = set_DocTPRICEFULL_DREPKKMT};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   int             DocTTNOM = {read = get_DocTTNOM};
  __property   double          DocTPRICE_DREPKKMT = {read = get_DocTPRICE_DREPKKMT, write = set_DocTPRICE_DREPKKMT};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};
};
typedef TCOMIOleDMDocRepKKMT<IOleDMDocRepKKM> TCOMIOleDMDocRepKKM;

// *********************************************************************//
// DispIntf:  IOleDMDocRepKKM
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {500BC744-0B7A-4DB5-AF7C-6B6B296C3B8B}
// *********************************************************************//
template<class T>
class IOleDMDocRepKKMDispT : public TAutoDriver<IOleDMDocRepKKM>
{
public:
  IOleDMDocRepKKMDispT(){}

  IOleDMDocRepKKMDispT(IOleDMDocRepKKM *pintf)
  {
    TAutoDriver<IOleDMDocRepKKM>::Bind(pintf, false);
  }

  IOleDMDocRepKKMDispT(IOleDMDocRepKKMPtr pintf)
  {
    TAutoDriver<IOleDMDocRepKKM>::Bind(pintf, true);
  }

  IOleDMDocRepKKMDispT& operator=(IOleDMDocRepKKM *pintf)
  {
    TAutoDriver<IOleDMDocRepKKM>::Bind(pintf, false);
    return *this;
  }

  IOleDMDocRepKKMDispT& operator=(IOleDMDocRepKKMPtr pintf)
  {
    TAutoDriver<IOleDMDocRepKKM>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMDocRepKKM));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMDocRepKKM);
  }

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_DocAllIDDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDDOC(void);
  HRESULT         __fastcall set_DocAllIDDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllPOSDOC(void);
  HRESULT         __fastcall set_DocAllPOSDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPRDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllPRDOC(void);
  HRESULT         __fastcall set_DocAllPRDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllNUMDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllNUMDOC(void);
  HRESULT         __fastcall set_DocAllNUMDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDFIRMDOC(void);
  HRESULT         __fastcall set_DocAllIDFIRMDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDSKLDOC(void);
  HRESULT         __fastcall set_DocAllIDSKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDKLDOC(void);
  HRESULT         __fastcall set_DocAllIDKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllSUMDOC(double* Value/*[out,retval]*/);
  double          __fastcall get_DocAllSUMDOC(void);
  HRESULT         __fastcall set_DocAllSUMDOC(double Value/*[in]*/);
  HRESULT         __fastcall get_DocAllFNAME_USER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllFNAME_USER(void);
  HRESULT         __fastcall get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDUSERDOC(void);
  HRESULT         __fastcall set_DocAllIDUSERDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDDOGDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDDOGDOC(void);
  HRESULT         __fastcall set_DocAllIDDOGDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllNAME_SDOG(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllNAME_SDOG(void);
  HRESULT         __fastcall get_DocAllNAMEKLIENT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllNAMEKLIENT(void);
  HRESULT         __fastcall get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllGID_DOC(void);
  HRESULT         __fastcall set_DocAllGID_DOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocID_DREPKKM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocID_DREPKKM(void);
  HRESULT         __fastcall set_DocID_DREPKKM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocGID_DREPKKM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocGID_DREPKKM(void);
  HRESULT         __fastcall set_DocGID_DREPKKM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDDOC_DREPKKM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDDOC_DREPKKM(void);
  HRESULT         __fastcall set_DocIDDOC_DREPKKM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDKKM_DREPKKM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDKKM_DREPKKM(void);
  HRESULT         __fastcall set_DocIDKKM_DREPKKM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocPRIM_DREPKKM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocPRIM_DREPKKM(void);
  HRESULT         __fastcall set_DocPRIM_DREPKKM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocOPLNAL_DREPKKM(double* Value/*[out,retval]*/);
  double          __fastcall get_DocOPLNAL_DREPKKM(void);
  HRESULT         __fastcall set_DocOPLNAL_DREPKKM(double Value/*[in]*/);
  HRESULT         __fastcall get_DocOPLPC_DREPKKM(double* Value/*[out,retval]*/);
  double          __fastcall get_DocOPLPC_DREPKKM(void);
  HRESULT         __fastcall set_DocOPLPC_DREPKKM(double Value/*[in]*/);
  HRESULT         __fastcall get_DocNKL_DREPKKM(int* Value/*[out,retval]*/);
  int             __fastcall get_DocNKL_DREPKKM(void);
  HRESULT         __fastcall set_DocNKL_DREPKKM(int Value/*[in]*/);
  HRESULT         __fastcall get_DocSK_DREPKKM(double* Value/*[out,retval]*/);
  double          __fastcall get_DocSK_DREPKKM(void);
  HRESULT         __fastcall set_DocSK_DREPKKM(double Value/*[in]*/);
  HRESULT         __fastcall get_DocNAD_DREPKKM(double* Value/*[out,retval]*/);
  double          __fastcall get_DocNAD_DREPKKM(void);
  HRESULT         __fastcall set_DocNAD_DREPKKM(double Value/*[in]*/);
  HRESULT         __fastcall get_DocDVREG_DREPKKM(int* Value/*[out,retval]*/);
  int             __fastcall get_DocDVREG_DREPKKM(void);
  HRESULT         __fastcall set_DocDVREG_DREPKKM(int Value/*[in]*/);
  HRESULT         __fastcall get_DocNAMEKKM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocNAMEKKM(void);
  HRESULT         __fastcall get_DocAllNAMEFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllNAMEFIRM(void);
  HRESULT         __fastcall get_DocAllNAMESKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllNAMESKLAD(void);
  HRESULT         __fastcall get_DocTID_DREPKKMT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTID_DREPKKMT(void);
  HRESULT         __fastcall set_DocTID_DREPKKMT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTGID_DREPKKMT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTGID_DREPKKMT(void);
  HRESULT         __fastcall set_DocTGID_DREPKKMT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDDOC_DREPKKMT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDDOC_DREPKKMT(void);
  HRESULT         __fastcall set_DocTIDDOC_DREPKKMT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDNOM_DREPKKMT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDNOM_DREPKKMT(void);
  HRESULT         __fastcall set_DocTIDNOM_DREPKKMT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDED_DREPKKMT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDED_DREPKKMT(void);
  HRESULT         __fastcall set_DocTIDED_DREPKKMT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTKOL_DREPKKMT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKOL_DREPKKMT(void);
  HRESULT         __fastcall set_DocTKOL_DREPKKMT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTKF_DREPKKMT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKF_DREPKKMT(void);
  HRESULT         __fastcall set_DocTKF_DREPKKMT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTSUM_DREPKKMT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTSUM_DREPKKMT(void);
  HRESULT         __fastcall set_DocTSUM_DREPKKMT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTSK_DREPKKMT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTSK_DREPKKMT(void);
  HRESULT         __fastcall set_DocTSK_DREPKKMT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTNAD_REPKKMT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTNAD_REPKKMT(void);
  HRESULT         __fastcall set_DocTNAD_REPKKMT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTPRICEFULL_DREPKKMT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTPRICEFULL_DREPKKMT(void);
  HRESULT         __fastcall set_DocTPRICEFULL_DREPKKMT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMENOM(void);
  HRESULT         __fastcall get_DocTNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMEED(void);
  HRESULT         __fastcall get_DocTTNOM(int* Value/*[out,retval]*/);
  int             __fastcall get_DocTTNOM(void);
  HRESULT         __fastcall get_DocTPRICE_DREPKKMT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTPRICE_DREPKKMT(void);
  HRESULT         __fastcall set_DocTPRICE_DREPKKMT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocAllTDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllTDOC(void);
  HRESULT         __fastcall set_DocAllTDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall NewDoc();
  HRESULT         __fastcall OpenDoc(BSTR Id/*[in]*/);
  HRESULT         __fastcall SaveDoc();
  HRESULT         __fastcall DvRegDoc();
  HRESULT         __fastcall CancelDvRegDoc();
  HRESULT         __fastcall DeleteDoc(BSTR Id/*[in]*/);
  HRESULT         __fastcall AddDocNewString();
  HRESULT         __fastcall DeleteStringDoc();
  HRESULT         __fastcall CloseDoc();
  HRESULT         __fastcall get_PrefiksDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PrefiksDoc(void);
  HRESULT         __fastcall set_PrefiksDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameBase(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameBase(void);
  HRESULT         __fastcall get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDBASE_GALLDOC(void);
  HRESULT         __fastcall set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocAllFNAME_USER = {read = get_DocAllFNAME_USER};
  __property   BSTR            DocAllIDUSERDOC = {read = get_DocAllIDUSERDOC, write = set_DocAllIDUSERDOC};
  __property   BSTR            DocAllIDDOGDOC = {read = get_DocAllIDDOGDOC, write = set_DocAllIDDOGDOC};
  __property   BSTR            DocAllNAME_SDOG = {read = get_DocAllNAME_SDOG};
  __property   BSTR            DocAllNAMEKLIENT = {read = get_DocAllNAMEKLIENT};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocID_DREPKKM = {read = get_DocID_DREPKKM, write = set_DocID_DREPKKM};
  __property   BSTR            DocGID_DREPKKM = {read = get_DocGID_DREPKKM, write = set_DocGID_DREPKKM};
  __property   BSTR            DocIDDOC_DREPKKM = {read = get_DocIDDOC_DREPKKM, write = set_DocIDDOC_DREPKKM};
  __property   BSTR            DocIDKKM_DREPKKM = {read = get_DocIDKKM_DREPKKM, write = set_DocIDKKM_DREPKKM};
  __property   BSTR            DocPRIM_DREPKKM = {read = get_DocPRIM_DREPKKM, write = set_DocPRIM_DREPKKM};
  __property   double          DocOPLNAL_DREPKKM = {read = get_DocOPLNAL_DREPKKM, write = set_DocOPLNAL_DREPKKM};
  __property   double          DocOPLPC_DREPKKM = {read = get_DocOPLPC_DREPKKM, write = set_DocOPLPC_DREPKKM};
  __property   int             DocNKL_DREPKKM = {read = get_DocNKL_DREPKKM, write = set_DocNKL_DREPKKM};
  __property   double          DocSK_DREPKKM = {read = get_DocSK_DREPKKM, write = set_DocSK_DREPKKM};
  __property   double          DocNAD_DREPKKM = {read = get_DocNAD_DREPKKM, write = set_DocNAD_DREPKKM};
  __property   int             DocDVREG_DREPKKM = {read = get_DocDVREG_DREPKKM, write = set_DocDVREG_DREPKKM};
  __property   BSTR            DocNAMEKKM = {read = get_DocNAMEKKM};
  __property   BSTR            DocAllNAMEFIRM = {read = get_DocAllNAMEFIRM};
  __property   BSTR            DocAllNAMESKLAD = {read = get_DocAllNAMESKLAD};
  __property   BSTR            DocTID_DREPKKMT = {read = get_DocTID_DREPKKMT, write = set_DocTID_DREPKKMT};
  __property   BSTR            DocTGID_DREPKKMT = {read = get_DocTGID_DREPKKMT, write = set_DocTGID_DREPKKMT};
  __property   BSTR            DocTIDDOC_DREPKKMT = {read = get_DocTIDDOC_DREPKKMT, write = set_DocTIDDOC_DREPKKMT};
  __property   BSTR            DocTIDNOM_DREPKKMT = {read = get_DocTIDNOM_DREPKKMT, write = set_DocTIDNOM_DREPKKMT};
  __property   BSTR            DocTIDED_DREPKKMT = {read = get_DocTIDED_DREPKKMT, write = set_DocTIDED_DREPKKMT};
  __property   double          DocTKOL_DREPKKMT = {read = get_DocTKOL_DREPKKMT, write = set_DocTKOL_DREPKKMT};
  __property   double          DocTKF_DREPKKMT = {read = get_DocTKF_DREPKKMT, write = set_DocTKF_DREPKKMT};
  __property   double          DocTSUM_DREPKKMT = {read = get_DocTSUM_DREPKKMT, write = set_DocTSUM_DREPKKMT};
  __property   double          DocTSK_DREPKKMT = {read = get_DocTSK_DREPKKMT, write = set_DocTSK_DREPKKMT};
  __property   double          DocTNAD_REPKKMT = {read = get_DocTNAD_REPKKMT, write = set_DocTNAD_REPKKMT};
  __property   double          DocTPRICEFULL_DREPKKMT = {read = get_DocTPRICEFULL_DREPKKMT, write = set_DocTPRICEFULL_DREPKKMT};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   int             DocTTNOM = {read = get_DocTTNOM};
  __property   double          DocTPRICE_DREPKKMT = {read = get_DocTPRICE_DREPKKMT, write = set_DocTPRICE_DREPKKMT};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};
};
typedef IOleDMDocRepKKMDispT<IOleDMDocRepKKM> IOleDMDocRepKKMDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprGrpNom
// Interface: IOleDMSprGrpNom
// *********************************************************************//
template <class T /* IOleDMSprGrpNom */ >
class TCOMIOleDMSprGrpNomT : public TComInterface<IOleDMSprGrpNom>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMSprGrpNomT() {}
  TCOMIOleDMSprGrpNomT(IOleDMSprGrpNom *intf, bool addRef = false) : TComInterface<IOleDMSprGrpNom>(intf, addRef) {}
  TCOMIOleDMSprGrpNomT(const TCOMIOleDMSprGrpNomT& src) : TComInterface<IOleDMSprGrpNom>(src) {}
  TCOMIOleDMSprGrpNomT& operator=(const TCOMIOleDMSprGrpNomT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ElIDGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElIDGN(void);
  HRESULT         __fastcall set_ElIDGN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElNAMEGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElNAMEGN(void);
  HRESULT         __fastcall set_ElNAMEGN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElIDGRPGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElIDGRPGN(void);
  HRESULT         __fastcall set_ElIDGRPGN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElGID_SGRPNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElGID_SGRPNOM(void);
  HRESULT         __fastcall set_ElGID_SGRPNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall OpenTable(void);
  HRESULT         __fastcall OpenElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall NewElement(BSTR IdGrp/*[in]*/);
  HRESULT         __fastcall SaveElement(void);
  HRESULT         __fastcall DeleteElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);

  __property   BSTR            ElIDGN = {read = get_ElIDGN, write = set_ElIDGN};
  __property   BSTR            ElNAMEGN = {read = get_ElNAMEGN, write = set_ElNAMEGN};
  __property   BSTR            ElIDGRPGN = {read = get_ElIDGRPGN, write = set_ElIDGRPGN};
  __property   BSTR            ElGID_SGRPNOM = {read = get_ElGID_SGRPNOM, write = set_ElGID_SGRPNOM};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
};
typedef TCOMIOleDMSprGrpNomT<IOleDMSprGrpNom> TCOMIOleDMSprGrpNom;

// *********************************************************************//
// DispIntf:  IOleDMSprGrpNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {122A380E-AADA-46E5-AE13-7BC1C518942C}
// *********************************************************************//
template<class T>
class IOleDMSprGrpNomDispT : public TAutoDriver<IOleDMSprGrpNom>
{
public:
  IOleDMSprGrpNomDispT(){}

  IOleDMSprGrpNomDispT(IOleDMSprGrpNom *pintf)
  {
    TAutoDriver<IOleDMSprGrpNom>::Bind(pintf, false);
  }

  IOleDMSprGrpNomDispT(IOleDMSprGrpNomPtr pintf)
  {
    TAutoDriver<IOleDMSprGrpNom>::Bind(pintf, true);
  }

  IOleDMSprGrpNomDispT& operator=(IOleDMSprGrpNom *pintf)
  {
    TAutoDriver<IOleDMSprGrpNom>::Bind(pintf, false);
    return *this;
  }

  IOleDMSprGrpNomDispT& operator=(IOleDMSprGrpNomPtr pintf)
  {
    TAutoDriver<IOleDMSprGrpNom>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMSprGrpNom));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMSprGrpNom);
  }

  HRESULT         __fastcall get_ElIDGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElIDGN(void);
  HRESULT         __fastcall set_ElIDGN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElNAMEGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElNAMEGN(void);
  HRESULT         __fastcall set_ElNAMEGN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElIDGRPGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElIDGRPGN(void);
  HRESULT         __fastcall set_ElIDGRPGN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElGID_SGRPNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElGID_SGRPNOM(void);
  HRESULT         __fastcall set_ElGID_SGRPNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall OpenTable();
  HRESULT         __fastcall OpenElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall NewElement(BSTR IdGrp/*[in]*/);
  HRESULT         __fastcall SaveElement();
  HRESULT         __fastcall DeleteElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();

  __property   BSTR            ElIDGN = {read = get_ElIDGN, write = set_ElIDGN};
  __property   BSTR            ElNAMEGN = {read = get_ElNAMEGN, write = set_ElNAMEGN};
  __property   BSTR            ElIDGRPGN = {read = get_ElIDGRPGN, write = set_ElIDGRPGN};
  __property   BSTR            ElGID_SGRPNOM = {read = get_ElGID_SGRPNOM, write = set_ElGID_SGRPNOM};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
};
typedef IOleDMSprGrpNomDispT<IOleDMSprGrpNom> IOleDMSprGrpNomDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprTypePrice
// Interface: IOleDMSprTypePrice
// *********************************************************************//
template <class T /* IOleDMSprTypePrice */ >
class TCOMIOleDMSprTypePriceT : public TComInterface<IOleDMSprTypePrice>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMSprTypePriceT() {}
  TCOMIOleDMSprTypePriceT(IOleDMSprTypePrice *intf, bool addRef = false) : TComInterface<IOleDMSprTypePrice>(intf, addRef) {}
  TCOMIOleDMSprTypePriceT(const TCOMIOleDMSprTypePriceT& src) : TComInterface<IOleDMSprTypePrice>(src) {}
  TCOMIOleDMSprTypePriceT& operator=(const TCOMIOleDMSprTypePriceT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall get_ElID_TPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElID_TPRICE(void);
  HRESULT         __fastcall set_ElID_TPRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElNAME_TPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElNAME_TPRICE(void);
  HRESULT         __fastcall set_ElNAME_TPRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElGID_STPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElGID_STPRICE(void);
  HRESULT         __fastcall set_ElGID_STPRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall OpenTable(void);
  HRESULT         __fastcall OpenElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall NewElement(void);
  HRESULT         __fastcall SaveElement(void);
  HRESULT         __fastcall DeleteElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall GetIDTypePrice(BSTR name/*[in]*/, BSTR* Id/*[out,retval]*/);
  BSTR            __fastcall GetIDTypePrice(BSTR name/*[in]*/);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall CloseElement(void);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            ElID_TPRICE = {read = get_ElID_TPRICE, write = set_ElID_TPRICE};
  __property   BSTR            ElNAME_TPRICE = {read = get_ElNAME_TPRICE, write = set_ElNAME_TPRICE};
  __property   BSTR            ElGID_STPRICE = {read = get_ElGID_STPRICE, write = set_ElGID_STPRICE};
};
typedef TCOMIOleDMSprTypePriceT<IOleDMSprTypePrice> TCOMIOleDMSprTypePrice;

// *********************************************************************//
// DispIntf:  IOleDMSprTypePrice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {03AE0B1D-6050-471A-AFA2-2F5E0B1ADDED}
// *********************************************************************//
template<class T>
class IOleDMSprTypePriceDispT : public TAutoDriver<IOleDMSprTypePrice>
{
public:
  IOleDMSprTypePriceDispT(){}

  IOleDMSprTypePriceDispT(IOleDMSprTypePrice *pintf)
  {
    TAutoDriver<IOleDMSprTypePrice>::Bind(pintf, false);
  }

  IOleDMSprTypePriceDispT(IOleDMSprTypePricePtr pintf)
  {
    TAutoDriver<IOleDMSprTypePrice>::Bind(pintf, true);
  }

  IOleDMSprTypePriceDispT& operator=(IOleDMSprTypePrice *pintf)
  {
    TAutoDriver<IOleDMSprTypePrice>::Bind(pintf, false);
    return *this;
  }

  IOleDMSprTypePriceDispT& operator=(IOleDMSprTypePricePtr pintf)
  {
    TAutoDriver<IOleDMSprTypePrice>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMSprTypePrice));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMSprTypePrice);
  }

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall get_ElID_TPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElID_TPRICE(void);
  HRESULT         __fastcall set_ElID_TPRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElNAME_TPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElNAME_TPRICE(void);
  HRESULT         __fastcall set_ElNAME_TPRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElGID_STPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElGID_STPRICE(void);
  HRESULT         __fastcall set_ElGID_STPRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall OpenTable();
  HRESULT         __fastcall OpenElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall NewElement();
  HRESULT         __fastcall SaveElement();
  HRESULT         __fastcall DeleteElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall GetIDTypePrice(BSTR name/*[in]*/, BSTR* Id/*[out,retval]*/);
  BSTR            __fastcall GetIDTypePrice(BSTR name/*[in]*/);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall CloseElement();

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            ElID_TPRICE = {read = get_ElID_TPRICE, write = set_ElID_TPRICE};
  __property   BSTR            ElNAME_TPRICE = {read = get_ElNAME_TPRICE, write = set_ElNAME_TPRICE};
  __property   BSTR            ElGID_STPRICE = {read = get_ElGID_STPRICE, write = set_ElGID_STPRICE};
};
typedef IOleDMSprTypePriceDispT<IOleDMSprTypePrice> IOleDMSprTypePriceDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprPrice
// Interface: IOleDMSprPrice
// *********************************************************************//
template <class T /* IOleDMSprPrice */ >
class TCOMIOleDMSprPriceT : public TComInterface<IOleDMSprPrice>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMSprPriceT() {}
  TCOMIOleDMSprPriceT(IOleDMSprPrice *intf, bool addRef = false) : TComInterface<IOleDMSprPrice>(intf, addRef) {}
  TCOMIOleDMSprPriceT(const TCOMIOleDMSprPriceT& src) : TComInterface<IOleDMSprPrice>(src) {}
  TCOMIOleDMSprPriceT& operator=(const TCOMIOleDMSprPriceT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall get_ElID_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElID_PRICE(void);
  HRESULT         __fastcall set_ElID_PRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElIDNOM_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElIDNOM_PRICE(void);
  HRESULT         __fastcall set_ElIDNOM_PRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElIDTYPE_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElIDTYPE_PRICE(void);
  HRESULT         __fastcall set_ElIDTYPE_PRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElZNACH_PRICE(double* Value/*[out,retval]*/);
  double          __fastcall get_ElZNACH_PRICE(void);
  HRESULT         __fastcall set_ElZNACH_PRICE(double Value/*[in]*/);
  HRESULT         __fastcall get_ElGID_SPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElGID_SPRICE(void);
  HRESULT         __fastcall set_ElGID_SPRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall OpenTable(BSTR IdNom/*[in]*/);
  HRESULT         __fastcall NewElement(void);
  HRESULT         __fastcall SaveElement(void);
  HRESULT         __fastcall DeleteElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall FindElement(BSTR IdTypePrice/*[in]*/, BSTR IdNom/*[in]*/, 
                                         int* kol_record/*[out,retval]*/);
  int             __fastcall FindElement(BSTR IdTypePrice/*[in]*/, BSTR IdNom/*[in]*/);
  HRESULT         __fastcall get_IdNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdNom(void);
  HRESULT         __fastcall set_IdNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdTypePrice(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdTypePrice(void);
  HRESULT         __fastcall set_IdTypePrice(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            ElID_PRICE = {read = get_ElID_PRICE, write = set_ElID_PRICE};
  __property   BSTR            ElIDNOM_PRICE = {read = get_ElIDNOM_PRICE, write = set_ElIDNOM_PRICE};
  __property   BSTR            ElIDTYPE_PRICE = {read = get_ElIDTYPE_PRICE, write = set_ElIDTYPE_PRICE};
  __property   double          ElZNACH_PRICE = {read = get_ElZNACH_PRICE, write = set_ElZNACH_PRICE};
  __property   BSTR            ElGID_SPRICE = {read = get_ElGID_SPRICE, write = set_ElGID_SPRICE};
  __property   BSTR            IdNom = {read = get_IdNom, write = set_IdNom};
  __property   BSTR            IdTypePrice = {read = get_IdTypePrice, write = set_IdTypePrice};
};
typedef TCOMIOleDMSprPriceT<IOleDMSprPrice> TCOMIOleDMSprPrice;

// *********************************************************************//
// DispIntf:  IOleDMSprPrice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {81AAC7FF-6A90-4E54-B3FE-AF265465B0EB}
// *********************************************************************//
template<class T>
class IOleDMSprPriceDispT : public TAutoDriver<IOleDMSprPrice>
{
public:
  IOleDMSprPriceDispT(){}

  IOleDMSprPriceDispT(IOleDMSprPrice *pintf)
  {
    TAutoDriver<IOleDMSprPrice>::Bind(pintf, false);
  }

  IOleDMSprPriceDispT(IOleDMSprPricePtr pintf)
  {
    TAutoDriver<IOleDMSprPrice>::Bind(pintf, true);
  }

  IOleDMSprPriceDispT& operator=(IOleDMSprPrice *pintf)
  {
    TAutoDriver<IOleDMSprPrice>::Bind(pintf, false);
    return *this;
  }

  IOleDMSprPriceDispT& operator=(IOleDMSprPricePtr pintf)
  {
    TAutoDriver<IOleDMSprPrice>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMSprPrice));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMSprPrice);
  }

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall get_ElID_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElID_PRICE(void);
  HRESULT         __fastcall set_ElID_PRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElIDNOM_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElIDNOM_PRICE(void);
  HRESULT         __fastcall set_ElIDNOM_PRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElIDTYPE_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElIDTYPE_PRICE(void);
  HRESULT         __fastcall set_ElIDTYPE_PRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElZNACH_PRICE(double* Value/*[out,retval]*/);
  double          __fastcall get_ElZNACH_PRICE(void);
  HRESULT         __fastcall set_ElZNACH_PRICE(double Value/*[in]*/);
  HRESULT         __fastcall get_ElGID_SPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElGID_SPRICE(void);
  HRESULT         __fastcall set_ElGID_SPRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall OpenTable(BSTR IdNom/*[in]*/);
  HRESULT         __fastcall NewElement();
  HRESULT         __fastcall SaveElement();
  HRESULT         __fastcall DeleteElement(BSTR Id/*[in]*/);
  HRESULT         __fastcall FindElement(BSTR IdTypePrice/*[in]*/, BSTR IdNom/*[in]*/, 
                                         int* kol_record/*[out,retval]*/);
  int             __fastcall FindElement(BSTR IdTypePrice/*[in]*/, BSTR IdNom/*[in]*/);
  HRESULT         __fastcall get_IdNom(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdNom(void);
  HRESULT         __fastcall set_IdNom(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdTypePrice(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdTypePrice(void);
  HRESULT         __fastcall set_IdTypePrice(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            ElID_PRICE = {read = get_ElID_PRICE, write = set_ElID_PRICE};
  __property   BSTR            ElIDNOM_PRICE = {read = get_ElIDNOM_PRICE, write = set_ElIDNOM_PRICE};
  __property   BSTR            ElIDTYPE_PRICE = {read = get_ElIDTYPE_PRICE, write = set_ElIDTYPE_PRICE};
  __property   double          ElZNACH_PRICE = {read = get_ElZNACH_PRICE, write = set_ElZNACH_PRICE};
  __property   BSTR            ElGID_SPRICE = {read = get_ElGID_SPRICE, write = set_ElGID_SPRICE};
  __property   BSTR            IdNom = {read = get_IdNom, write = set_IdNom};
  __property   BSTR            IdTypePrice = {read = get_IdTypePrice, write = set_IdTypePrice};
};
typedef IOleDMSprPriceDispT<IOleDMSprPrice> IOleDMSprPriceDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMDocPer
// Interface: IOleDMDocPer
// *********************************************************************//
template <class T /* IOleDMDocPer */ >
class TCOMIOleDMDocPerT : public TComInterface<IOleDMDocPer>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMDocPerT() {}
  TCOMIOleDMDocPerT(IOleDMDocPer *intf, bool addRef = false) : TComInterface<IOleDMDocPer>(intf, addRef) {}
  TCOMIOleDMDocPerT(const TCOMIOleDMDocPerT& src) : TComInterface<IOleDMDocPer>(src) {}
  TCOMIOleDMDocPerT& operator=(const TCOMIOleDMDocPerT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall get_DocAllIDDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDDOC(void);
  HRESULT         __fastcall set_DocAllIDDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllPOSDOC(void);
  HRESULT         __fastcall set_DocAllPOSDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPRDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllPRDOC(void);
  HRESULT         __fastcall set_DocAllPRDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllTDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllTDOC(void);
  HRESULT         __fastcall set_DocAllTDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllNUMDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllNUMDOC(void);
  HRESULT         __fastcall set_DocAllNUMDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDFIRMDOC(void);
  HRESULT         __fastcall set_DocAllIDFIRMDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDSKLDOC(void);
  HRESULT         __fastcall set_DocAllIDSKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDKLDOC(void);
  HRESULT         __fastcall set_DocAllIDKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllSUMDOC(double* Value/*[out,retval]*/);
  double          __fastcall get_DocAllSUMDOC(void);
  HRESULT         __fastcall set_DocAllSUMDOC(double Value/*[in]*/);
  HRESULT         __fastcall get_DocIDPER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDPER(void);
  HRESULT         __fastcall set_DocIDPER(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDDOCPER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDDOCPER(void);
  HRESULT         __fastcall set_DocIDDOCPER(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDSKLPOLPER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDSKLPOLPER(void);
  HRESULT         __fastcall set_DocIDSKLPOLPER(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocPRIMPER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocPRIMPER(void);
  HRESULT         __fastcall set_DocPRIMPER(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDPERT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDPERT(void);
  HRESULT         __fastcall set_DocTIDPERT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDDOCPERT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDDOCPERT(void);
  HRESULT         __fastcall set_DocTIDDOCPERT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDNOMPERT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDNOMPERT(void);
  HRESULT         __fastcall set_DocTIDNOMPERT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDEDPERT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDEDPERT(void);
  HRESULT         __fastcall set_DocTIDEDPERT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTKOLPERT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKOLPERT(void);
  HRESULT         __fastcall set_DocTKOLPERT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTKFPERT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKFPERT(void);
  HRESULT         __fastcall set_DocTKFPERT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTPRICEPERT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTPRICEPERT(void);
  HRESULT         __fastcall set_DocTPRICEPERT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTSUMPERT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTSUMPERT(void);
  HRESULT         __fastcall set_DocTSUMPERT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMENOM(void);
  HRESULT         __fastcall get_DocTNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMEED(void);
  HRESULT         __fastcall get_DocTTNOM(int* Value/*[out,retval]*/);
  int             __fastcall get_DocTTNOM(void);
  HRESULT         __fastcall get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDUSERDOC(void);
  HRESULT         __fastcall set_DocAllIDUSERDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllGID_DOC(void);
  HRESULT         __fastcall set_DocAllGID_DOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocGID_DPER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocGID_DPER(void);
  HRESULT         __fastcall set_DocGID_DPER(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTGID_DPERT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTGID_DPERT(void);
  HRESULT         __fastcall set_DocTGID_DPERT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllFNAMEUSER(void);
  HRESULT         __fastcall NewDoc(void);
  HRESULT         __fastcall OpenDoc(BSTR IdDoc/*[in]*/);
  HRESULT         __fastcall SaveDoc(void);
  HRESULT         __fastcall DvRegDoc(void);
  HRESULT         __fastcall CancelDvRegDoc(void);
  HRESULT         __fastcall AddDocNewString(void);
  HRESULT         __fastcall DeleteStringDoc(void);
  HRESULT         __fastcall DeleteDoc(BSTR Id/*[in]*/);
  HRESULT         __fastcall CloseDoc(void);
  HRESULT         __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/, 
                                                 BSTR* IdDoc/*[out,retval]*/);
  BSTR            __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall get_PrefiksDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PrefiksDoc(void);
  HRESULT         __fastcall set_PrefiksDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameBase(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameBase(void);
  HRESULT         __fastcall get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDBASE_GALLDOC(void);
  HRESULT         __fastcall set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocIDPER = {read = get_DocIDPER, write = set_DocIDPER};
  __property   BSTR            DocIDDOCPER = {read = get_DocIDDOCPER, write = set_DocIDDOCPER};
  __property   BSTR            DocIDSKLPOLPER = {read = get_DocIDSKLPOLPER, write = set_DocIDSKLPOLPER};
  __property   BSTR            DocPRIMPER = {read = get_DocPRIMPER, write = set_DocPRIMPER};
  __property   BSTR            DocTIDPERT = {read = get_DocTIDPERT, write = set_DocTIDPERT};
  __property   BSTR            DocTIDDOCPERT = {read = get_DocTIDDOCPERT, write = set_DocTIDDOCPERT};
  __property   BSTR            DocTIDNOMPERT = {read = get_DocTIDNOMPERT, write = set_DocTIDNOMPERT};
  __property   BSTR            DocTIDEDPERT = {read = get_DocTIDEDPERT, write = set_DocTIDEDPERT};
  __property   double          DocTKOLPERT = {read = get_DocTKOLPERT, write = set_DocTKOLPERT};
  __property   double          DocTKFPERT = {read = get_DocTKFPERT, write = set_DocTKFPERT};
  __property   double          DocTPRICEPERT = {read = get_DocTPRICEPERT, write = set_DocTPRICEPERT};
  __property   double          DocTSUMPERT = {read = get_DocTSUMPERT, write = set_DocTSUMPERT};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   int             DocTTNOM = {read = get_DocTTNOM};
  __property   BSTR            DocAllIDUSERDOC = {read = get_DocAllIDUSERDOC, write = set_DocAllIDUSERDOC};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocGID_DPER = {read = get_DocGID_DPER, write = set_DocGID_DPER};
  __property   BSTR            DocTGID_DPERT = {read = get_DocTGID_DPERT, write = set_DocTGID_DPERT};
  __property   BSTR            DocAllFNAMEUSER = {read = get_DocAllFNAMEUSER};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};
};
typedef TCOMIOleDMDocPerT<IOleDMDocPer> TCOMIOleDMDocPer;

// *********************************************************************//
// DispIntf:  IOleDMDocPer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {906D0C92-DE95-4FA2-9DE4-4E4DCA7242A1}
// *********************************************************************//
template<class T>
class IOleDMDocPerDispT : public TAutoDriver<IOleDMDocPer>
{
public:
  IOleDMDocPerDispT(){}

  IOleDMDocPerDispT(IOleDMDocPer *pintf)
  {
    TAutoDriver<IOleDMDocPer>::Bind(pintf, false);
  }

  IOleDMDocPerDispT(IOleDMDocPerPtr pintf)
  {
    TAutoDriver<IOleDMDocPer>::Bind(pintf, true);
  }

  IOleDMDocPerDispT& operator=(IOleDMDocPer *pintf)
  {
    TAutoDriver<IOleDMDocPer>::Bind(pintf, false);
    return *this;
  }

  IOleDMDocPerDispT& operator=(IOleDMDocPerPtr pintf)
  {
    TAutoDriver<IOleDMDocPer>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMDocPer));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMDocPer);
  }

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall get_DocAllIDDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDDOC(void);
  HRESULT         __fastcall set_DocAllIDDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllPOSDOC(void);
  HRESULT         __fastcall set_DocAllPOSDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPRDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllPRDOC(void);
  HRESULT         __fastcall set_DocAllPRDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllTDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllTDOC(void);
  HRESULT         __fastcall set_DocAllTDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllNUMDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllNUMDOC(void);
  HRESULT         __fastcall set_DocAllNUMDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDFIRMDOC(void);
  HRESULT         __fastcall set_DocAllIDFIRMDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDSKLDOC(void);
  HRESULT         __fastcall set_DocAllIDSKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDKLDOC(void);
  HRESULT         __fastcall set_DocAllIDKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllSUMDOC(double* Value/*[out,retval]*/);
  double          __fastcall get_DocAllSUMDOC(void);
  HRESULT         __fastcall set_DocAllSUMDOC(double Value/*[in]*/);
  HRESULT         __fastcall get_DocIDPER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDPER(void);
  HRESULT         __fastcall set_DocIDPER(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDDOCPER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDDOCPER(void);
  HRESULT         __fastcall set_DocIDDOCPER(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDSKLPOLPER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDSKLPOLPER(void);
  HRESULT         __fastcall set_DocIDSKLPOLPER(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocPRIMPER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocPRIMPER(void);
  HRESULT         __fastcall set_DocPRIMPER(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDPERT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDPERT(void);
  HRESULT         __fastcall set_DocTIDPERT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDDOCPERT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDDOCPERT(void);
  HRESULT         __fastcall set_DocTIDDOCPERT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDNOMPERT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDNOMPERT(void);
  HRESULT         __fastcall set_DocTIDNOMPERT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDEDPERT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDEDPERT(void);
  HRESULT         __fastcall set_DocTIDEDPERT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTKOLPERT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKOLPERT(void);
  HRESULT         __fastcall set_DocTKOLPERT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTKFPERT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKFPERT(void);
  HRESULT         __fastcall set_DocTKFPERT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTPRICEPERT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTPRICEPERT(void);
  HRESULT         __fastcall set_DocTPRICEPERT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTSUMPERT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTSUMPERT(void);
  HRESULT         __fastcall set_DocTSUMPERT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMENOM(void);
  HRESULT         __fastcall get_DocTNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMEED(void);
  HRESULT         __fastcall get_DocTTNOM(int* Value/*[out,retval]*/);
  int             __fastcall get_DocTTNOM(void);
  HRESULT         __fastcall get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDUSERDOC(void);
  HRESULT         __fastcall set_DocAllIDUSERDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllGID_DOC(void);
  HRESULT         __fastcall set_DocAllGID_DOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocGID_DPER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocGID_DPER(void);
  HRESULT         __fastcall set_DocGID_DPER(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTGID_DPERT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTGID_DPERT(void);
  HRESULT         __fastcall set_DocTGID_DPERT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllFNAMEUSER(void);
  HRESULT         __fastcall NewDoc();
  HRESULT         __fastcall OpenDoc(BSTR IdDoc/*[in]*/);
  HRESULT         __fastcall SaveDoc();
  HRESULT         __fastcall DvRegDoc();
  HRESULT         __fastcall CancelDvRegDoc();
  HRESULT         __fastcall AddDocNewString();
  HRESULT         __fastcall DeleteStringDoc();
  HRESULT         __fastcall DeleteDoc(BSTR Id/*[in]*/);
  HRESULT         __fastcall CloseDoc();
  HRESULT         __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/, 
                                                 BSTR* IdDoc/*[out,retval]*/);
  BSTR            __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/);
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall get_PrefiksDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PrefiksDoc(void);
  HRESULT         __fastcall set_PrefiksDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameBase(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameBase(void);
  HRESULT         __fastcall get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDBASE_GALLDOC(void);
  HRESULT         __fastcall set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocIDPER = {read = get_DocIDPER, write = set_DocIDPER};
  __property   BSTR            DocIDDOCPER = {read = get_DocIDDOCPER, write = set_DocIDDOCPER};
  __property   BSTR            DocIDSKLPOLPER = {read = get_DocIDSKLPOLPER, write = set_DocIDSKLPOLPER};
  __property   BSTR            DocPRIMPER = {read = get_DocPRIMPER, write = set_DocPRIMPER};
  __property   BSTR            DocTIDPERT = {read = get_DocTIDPERT, write = set_DocTIDPERT};
  __property   BSTR            DocTIDDOCPERT = {read = get_DocTIDDOCPERT, write = set_DocTIDDOCPERT};
  __property   BSTR            DocTIDNOMPERT = {read = get_DocTIDNOMPERT, write = set_DocTIDNOMPERT};
  __property   BSTR            DocTIDEDPERT = {read = get_DocTIDEDPERT, write = set_DocTIDEDPERT};
  __property   double          DocTKOLPERT = {read = get_DocTKOLPERT, write = set_DocTKOLPERT};
  __property   double          DocTKFPERT = {read = get_DocTKFPERT, write = set_DocTKFPERT};
  __property   double          DocTPRICEPERT = {read = get_DocTPRICEPERT, write = set_DocTPRICEPERT};
  __property   double          DocTSUMPERT = {read = get_DocTSUMPERT, write = set_DocTSUMPERT};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   int             DocTTNOM = {read = get_DocTTNOM};
  __property   BSTR            DocAllIDUSERDOC = {read = get_DocAllIDUSERDOC, write = set_DocAllIDUSERDOC};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocGID_DPER = {read = get_DocGID_DPER, write = set_DocGID_DPER};
  __property   BSTR            DocTGID_DPERT = {read = get_DocTGID_DPERT, write = set_DocTGID_DPERT};
  __property   BSTR            DocAllFNAMEUSER = {read = get_DocAllFNAMEUSER};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};
};
typedef IOleDMDocPerDispT<IOleDMDocPer> IOleDMDocPerDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMDocPrihNakl
// Interface: IOleDMDocPrihNakl
// *********************************************************************//
template <class T /* IOleDMDocPrihNakl */ >
class TCOMIOleDMDocPrihNaklT : public TComInterface<IOleDMDocPrihNakl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMDocPrihNaklT() {}
  TCOMIOleDMDocPrihNaklT(IOleDMDocPrihNakl *intf, bool addRef = false) : TComInterface<IOleDMDocPrihNakl>(intf, addRef) {}
  TCOMIOleDMDocPrihNaklT(const TCOMIOleDMDocPrihNaklT& src) : TComInterface<IOleDMDocPrihNakl>(src) {}
  TCOMIOleDMDocPrihNaklT& operator=(const TCOMIOleDMDocPrihNaklT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall get_DocTIDPRNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDPRNT(void);
  HRESULT         __fastcall set_DocTIDPRNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDDOCPRNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDDOCPRNT(void);
  HRESULT         __fastcall set_DocTIDDOCPRNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDNOMPRNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDNOMPRNT(void);
  HRESULT         __fastcall set_DocTIDNOMPRNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDEDPRNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDEDPRNT(void);
  HRESULT         __fastcall set_DocTIDEDPRNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDPARTPRNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDPARTPRNT(void);
  HRESULT         __fastcall set_DocTIDPARTPRNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTKOLPRNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKOLPRNT(void);
  HRESULT         __fastcall set_DocTKOLPRNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTKFPRNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKFPRNT(void);
  HRESULT         __fastcall set_DocTKFPRNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTPRICEPRNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTPRICEPRNT(void);
  HRESULT         __fastcall set_DocTPRICEPRNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTSUMPRNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTSUMPRNT(void);
  HRESULT         __fastcall set_DocTSUMPRNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocIDPRN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDPRN(void);
  HRESULT         __fastcall set_DocIDPRN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMENOM(void);
  HRESULT         __fastcall get_DocTNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMEED(void);
  HRESULT         __fastcall get_DocIDDOCPRN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDDOCPRN(void);
  HRESULT         __fastcall set_DocIDDOCPRN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocPRIMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocPRIMDOC(void);
  HRESULT         __fastcall set_DocPRIMDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDDOC(void);
  HRESULT         __fastcall set_DocAllIDDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllPOSDOC(void);
  HRESULT         __fastcall set_DocAllPOSDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPRDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllPRDOC(void);
  HRESULT         __fastcall set_DocAllPRDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllTDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllTDOC(void);
  HRESULT         __fastcall set_DocAllTDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllNUMDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllNUMDOC(void);
  HRESULT         __fastcall set_DocAllNUMDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDFIRMDOC(void);
  HRESULT         __fastcall set_DocAllIDFIRMDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDSKLDOC(void);
  HRESULT         __fastcall set_DocAllIDSKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDKLDOC(void);
  HRESULT         __fastcall set_DocAllIDKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllSUMDOC(double* Value/*[out,retval]*/);
  double          __fastcall get_DocAllSUMDOC(void);
  HRESULT         __fastcall set_DocAllSUMDOC(double Value/*[in]*/);
  HRESULT         __fastcall get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllFNAMEUSER(void);
  HRESULT         __fastcall set_DocAllFNAMEUSER(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDTPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDTPRICE(void);
  HRESULT         __fastcall set_DocIDTPRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDUSERDOC(void);
  HRESULT         __fastcall set_DocAllIDUSERDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllGID_DOC(void);
  HRESULT         __fastcall set_DocAllGID_DOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocGID_DPRN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocGID_DPRN(void);
  HRESULT         __fastcall set_DocGID_DPRN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTGID_DPRNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTGID_DPRNT(void);
  HRESULT         __fastcall set_DocTGID_DPRNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall NewDoc(void);
  HRESULT         __fastcall OpenDoc(BSTR IdDoc/*[in]*/);
  HRESULT         __fastcall SaveDoc(void);
  HRESULT         __fastcall DvRegDoc(void);
  HRESULT         __fastcall CancelDvRegDoc(void);
  HRESULT         __fastcall AddDocNewString(void);
  HRESULT         __fastcall DeleteStringDoc(void);
  HRESULT         __fastcall DeleteDoc(BSTR Id/*[in]*/);
  HRESULT         __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/, 
                                                 BSTR* id_doc/*[out,retval]*/);
  BSTR            __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall get_PrefiksDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PrefiksDoc(void);
  HRESULT         __fastcall set_PrefiksDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameBase(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameBase(void);
  HRESULT         __fastcall get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDBASE_GALLDOC(void);
  HRESULT         __fastcall set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            DocTIDPRNT = {read = get_DocTIDPRNT, write = set_DocTIDPRNT};
  __property   BSTR            DocTIDDOCPRNT = {read = get_DocTIDDOCPRNT, write = set_DocTIDDOCPRNT};
  __property   BSTR            DocTIDNOMPRNT = {read = get_DocTIDNOMPRNT, write = set_DocTIDNOMPRNT};
  __property   BSTR            DocTIDEDPRNT = {read = get_DocTIDEDPRNT, write = set_DocTIDEDPRNT};
  __property   BSTR            DocTIDPARTPRNT = {read = get_DocTIDPARTPRNT, write = set_DocTIDPARTPRNT};
  __property   double          DocTKOLPRNT = {read = get_DocTKOLPRNT, write = set_DocTKOLPRNT};
  __property   double          DocTKFPRNT = {read = get_DocTKFPRNT, write = set_DocTKFPRNT};
  __property   double          DocTPRICEPRNT = {read = get_DocTPRICEPRNT, write = set_DocTPRICEPRNT};
  __property   double          DocTSUMPRNT = {read = get_DocTSUMPRNT, write = set_DocTSUMPRNT};
  __property   BSTR            DocIDPRN = {read = get_DocIDPRN, write = set_DocIDPRN};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   BSTR            DocIDDOCPRN = {read = get_DocIDDOCPRN, write = set_DocIDDOCPRN};
  __property   BSTR            DocPRIMDOC = {read = get_DocPRIMDOC, write = set_DocPRIMDOC};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocAllFNAMEUSER = {read = get_DocAllFNAMEUSER, write = set_DocAllFNAMEUSER};
  __property   BSTR            DocIDTPRICE = {read = get_DocIDTPRICE, write = set_DocIDTPRICE};
  __property   BSTR            DocAllIDUSERDOC = {read = get_DocAllIDUSERDOC, write = set_DocAllIDUSERDOC};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocGID_DPRN = {read = get_DocGID_DPRN, write = set_DocGID_DPRN};
  __property   BSTR            DocTGID_DPRNT = {read = get_DocTGID_DPRNT, write = set_DocTGID_DPRNT};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};
};
typedef TCOMIOleDMDocPrihNaklT<IOleDMDocPrihNakl> TCOMIOleDMDocPrihNakl;

// *********************************************************************//
// DispIntf:  IOleDMDocPrihNakl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {68D9AE11-D691-410E-8E27-AD1CF6A3CA54}
// *********************************************************************//
template<class T>
class IOleDMDocPrihNaklDispT : public TAutoDriver<IOleDMDocPrihNakl>
{
public:
  IOleDMDocPrihNaklDispT(){}

  IOleDMDocPrihNaklDispT(IOleDMDocPrihNakl *pintf)
  {
    TAutoDriver<IOleDMDocPrihNakl>::Bind(pintf, false);
  }

  IOleDMDocPrihNaklDispT(IOleDMDocPrihNaklPtr pintf)
  {
    TAutoDriver<IOleDMDocPrihNakl>::Bind(pintf, true);
  }

  IOleDMDocPrihNaklDispT& operator=(IOleDMDocPrihNakl *pintf)
  {
    TAutoDriver<IOleDMDocPrihNakl>::Bind(pintf, false);
    return *this;
  }

  IOleDMDocPrihNaklDispT& operator=(IOleDMDocPrihNaklPtr pintf)
  {
    TAutoDriver<IOleDMDocPrihNakl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMDocPrihNakl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMDocPrihNakl);
  }

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall get_DocTIDPRNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDPRNT(void);
  HRESULT         __fastcall set_DocTIDPRNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDDOCPRNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDDOCPRNT(void);
  HRESULT         __fastcall set_DocTIDDOCPRNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDNOMPRNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDNOMPRNT(void);
  HRESULT         __fastcall set_DocTIDNOMPRNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDEDPRNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDEDPRNT(void);
  HRESULT         __fastcall set_DocTIDEDPRNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDPARTPRNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDPARTPRNT(void);
  HRESULT         __fastcall set_DocTIDPARTPRNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTKOLPRNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKOLPRNT(void);
  HRESULT         __fastcall set_DocTKOLPRNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTKFPRNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKFPRNT(void);
  HRESULT         __fastcall set_DocTKFPRNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTPRICEPRNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTPRICEPRNT(void);
  HRESULT         __fastcall set_DocTPRICEPRNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTSUMPRNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTSUMPRNT(void);
  HRESULT         __fastcall set_DocTSUMPRNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocIDPRN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDPRN(void);
  HRESULT         __fastcall set_DocIDPRN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMENOM(void);
  HRESULT         __fastcall get_DocTNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMEED(void);
  HRESULT         __fastcall get_DocIDDOCPRN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDDOCPRN(void);
  HRESULT         __fastcall set_DocIDDOCPRN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocPRIMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocPRIMDOC(void);
  HRESULT         __fastcall set_DocPRIMDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDDOC(void);
  HRESULT         __fastcall set_DocAllIDDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllPOSDOC(void);
  HRESULT         __fastcall set_DocAllPOSDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPRDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllPRDOC(void);
  HRESULT         __fastcall set_DocAllPRDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllTDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllTDOC(void);
  HRESULT         __fastcall set_DocAllTDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllNUMDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllNUMDOC(void);
  HRESULT         __fastcall set_DocAllNUMDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDFIRMDOC(void);
  HRESULT         __fastcall set_DocAllIDFIRMDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDSKLDOC(void);
  HRESULT         __fastcall set_DocAllIDSKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDKLDOC(void);
  HRESULT         __fastcall set_DocAllIDKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllSUMDOC(double* Value/*[out,retval]*/);
  double          __fastcall get_DocAllSUMDOC(void);
  HRESULT         __fastcall set_DocAllSUMDOC(double Value/*[in]*/);
  HRESULT         __fastcall get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllFNAMEUSER(void);
  HRESULT         __fastcall set_DocAllFNAMEUSER(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDTPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDTPRICE(void);
  HRESULT         __fastcall set_DocIDTPRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDUSERDOC(void);
  HRESULT         __fastcall set_DocAllIDUSERDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllGID_DOC(void);
  HRESULT         __fastcall set_DocAllGID_DOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocGID_DPRN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocGID_DPRN(void);
  HRESULT         __fastcall set_DocGID_DPRN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTGID_DPRNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTGID_DPRNT(void);
  HRESULT         __fastcall set_DocTGID_DPRNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall NewDoc();
  HRESULT         __fastcall OpenDoc(BSTR IdDoc/*[in]*/);
  HRESULT         __fastcall SaveDoc();
  HRESULT         __fastcall DvRegDoc();
  HRESULT         __fastcall CancelDvRegDoc();
  HRESULT         __fastcall AddDocNewString();
  HRESULT         __fastcall DeleteStringDoc();
  HRESULT         __fastcall DeleteDoc(BSTR Id/*[in]*/);
  HRESULT         __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/, 
                                                 BSTR* id_doc/*[out,retval]*/);
  BSTR            __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/);
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall get_PrefiksDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PrefiksDoc(void);
  HRESULT         __fastcall set_PrefiksDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameBase(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameBase(void);
  HRESULT         __fastcall get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDBASE_GALLDOC(void);
  HRESULT         __fastcall set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            DocTIDPRNT = {read = get_DocTIDPRNT, write = set_DocTIDPRNT};
  __property   BSTR            DocTIDDOCPRNT = {read = get_DocTIDDOCPRNT, write = set_DocTIDDOCPRNT};
  __property   BSTR            DocTIDNOMPRNT = {read = get_DocTIDNOMPRNT, write = set_DocTIDNOMPRNT};
  __property   BSTR            DocTIDEDPRNT = {read = get_DocTIDEDPRNT, write = set_DocTIDEDPRNT};
  __property   BSTR            DocTIDPARTPRNT = {read = get_DocTIDPARTPRNT, write = set_DocTIDPARTPRNT};
  __property   double          DocTKOLPRNT = {read = get_DocTKOLPRNT, write = set_DocTKOLPRNT};
  __property   double          DocTKFPRNT = {read = get_DocTKFPRNT, write = set_DocTKFPRNT};
  __property   double          DocTPRICEPRNT = {read = get_DocTPRICEPRNT, write = set_DocTPRICEPRNT};
  __property   double          DocTSUMPRNT = {read = get_DocTSUMPRNT, write = set_DocTSUMPRNT};
  __property   BSTR            DocIDPRN = {read = get_DocIDPRN, write = set_DocIDPRN};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   BSTR            DocIDDOCPRN = {read = get_DocIDDOCPRN, write = set_DocIDDOCPRN};
  __property   BSTR            DocPRIMDOC = {read = get_DocPRIMDOC, write = set_DocPRIMDOC};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocAllFNAMEUSER = {read = get_DocAllFNAMEUSER, write = set_DocAllFNAMEUSER};
  __property   BSTR            DocIDTPRICE = {read = get_DocIDTPRICE, write = set_DocIDTPRICE};
  __property   BSTR            DocAllIDUSERDOC = {read = get_DocAllIDUSERDOC, write = set_DocAllIDUSERDOC};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocGID_DPRN = {read = get_DocGID_DPRN, write = set_DocGID_DPRN};
  __property   BSTR            DocTGID_DPRNT = {read = get_DocTGID_DPRNT, write = set_DocTGID_DPRNT};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};
};
typedef IOleDMDocPrihNaklDispT<IOleDMDocPrihNakl> IOleDMDocPrihNaklDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMDocReal
// Interface: IOleDMDocReal
// *********************************************************************//
template <class T /* IOleDMDocReal */ >
class TCOMIOleDMDocRealT : public TComInterface<IOleDMDocReal>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMDocRealT() {}
  TCOMIOleDMDocRealT(IOleDMDocReal *intf, bool addRef = false) : TComInterface<IOleDMDocReal>(intf, addRef) {}
  TCOMIOleDMDocRealT(const TCOMIOleDMDocRealT& src) : TComInterface<IOleDMDocReal>(src) {}
  TCOMIOleDMDocRealT& operator=(const TCOMIOleDMDocRealT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall get_DocAllIDDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDDOC(void);
  HRESULT         __fastcall set_DocAllIDDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllPOSDOC(void);
  HRESULT         __fastcall set_DocAllPOSDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPRDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllPRDOC(void);
  HRESULT         __fastcall set_DocAllPRDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllTDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllTDOC(void);
  HRESULT         __fastcall set_DocAllTDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllNUMDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllNUMDOC(void);
  HRESULT         __fastcall set_DocAllNUMDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDFIRMDOC(void);
  HRESULT         __fastcall set_DocAllIDFIRMDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDSKLDOC(void);
  HRESULT         __fastcall set_DocAllIDSKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllSUMDOC(double* Value/*[out,retval]*/);
  double          __fastcall get_DocAllSUMDOC(void);
  HRESULT         __fastcall set_DocAllSUMDOC(double Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDUSERDOC(void);
  HRESULT         __fastcall set_DocAllIDUSERDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllFNAMEUSER(void);
  HRESULT         __fastcall get_DocID_INV(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocID_INV(void);
  HRESULT         __fastcall set_DocID_INV(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDDOC_INV(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDDOC_INV(void);
  HRESULT         __fastcall set_DocIDDOC_INV(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocPRIM_INV(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocPRIM_INV(void);
  HRESULT         __fastcall set_DocPRIM_INV(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTID_INVT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTID_INVT(void);
  HRESULT         __fastcall set_DocTID_INVT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDDOC_INVT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDDOC_INVT(void);
  HRESULT         __fastcall set_DocTIDDOC_INVT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDNOM_INVT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDNOM_INVT(void);
  HRESULT         __fastcall set_DocTIDNOM_INVT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDED_INVT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDED_INVT(void);
  HRESULT         __fastcall set_DocTIDED_INVT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTKF_INVT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKF_INVT(void);
  HRESULT         __fastcall set_DocTKF_INVT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTKOLUCH_INVT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKOLUCH_INVT(void);
  HRESULT         __fastcall set_DocTKOLUCH_INVT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMENOM(void);
  HRESULT         __fastcall get_DocTNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMEED(void);
  HRESULT         __fastcall get_DocTKOLFAKT_INVT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKOLFAKT_INVT(void);
  HRESULT         __fastcall set_DocTKOLFAKT_INVT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllGID_DOC(void);
  HRESULT         __fastcall set_DocAllGID_DOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocGID_INV(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocGID_INV(void);
  HRESULT         __fastcall set_DocGID_INV(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTGID_INVT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTGID_INVT(void);
  HRESULT         __fastcall set_DocTGID_INVT(BSTR Value/*[in]*/);
  HRESULT         __fastcall NewDoc(void);
  HRESULT         __fastcall OpenDoc(BSTR IdDoc/*[in]*/);
  HRESULT         __fastcall SaveDoc(void);
  HRESULT         __fastcall DvRegDoc(void);
  HRESULT         __fastcall CancelDvRegDoc(void);
  HRESULT         __fastcall AddDocNewString(void);
  HRESULT         __fastcall DeleteStringDoc(void);
  HRESULT         __fastcall DeleteDoc(BSTR Id/*[in]*/);
  HRESULT         __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/, 
                                                 BSTR* id_doc/*[out,retval]*/);
  BSTR            __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall get_PrefiksDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PrefiksDoc(void);
  HRESULT         __fastcall set_PrefiksDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameBase(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameBase(void);
  HRESULT         __fastcall get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDBASE_GALLDOC(void);
  HRESULT         __fastcall set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/);

  __property   BSTR            TextError = {read = get_TextError};
  __property   int             CodeError = {read = get_CodeError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocAllIDUSERDOC = {read = get_DocAllIDUSERDOC, write = set_DocAllIDUSERDOC};
  __property   BSTR            DocAllFNAMEUSER = {read = get_DocAllFNAMEUSER};
  __property   BSTR            DocID_INV = {read = get_DocID_INV, write = set_DocID_INV};
  __property   BSTR            DocIDDOC_INV = {read = get_DocIDDOC_INV, write = set_DocIDDOC_INV};
  __property   BSTR            DocPRIM_INV = {read = get_DocPRIM_INV, write = set_DocPRIM_INV};
  __property   BSTR            DocTID_INVT = {read = get_DocTID_INVT, write = set_DocTID_INVT};
  __property   BSTR            DocTIDDOC_INVT = {read = get_DocTIDDOC_INVT, write = set_DocTIDDOC_INVT};
  __property   BSTR            DocTIDNOM_INVT = {read = get_DocTIDNOM_INVT, write = set_DocTIDNOM_INVT};
  __property   BSTR            DocTIDED_INVT = {read = get_DocTIDED_INVT, write = set_DocTIDED_INVT};
  __property   double          DocTKF_INVT = {read = get_DocTKF_INVT, write = set_DocTKF_INVT};
  __property   double          DocTKOLUCH_INVT = {read = get_DocTKOLUCH_INVT, write = set_DocTKOLUCH_INVT};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   double          DocTKOLFAKT_INVT = {read = get_DocTKOLFAKT_INVT, write = set_DocTKOLFAKT_INVT};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocGID_INV = {read = get_DocGID_INV, write = set_DocGID_INV};
  __property   BSTR            DocTGID_INVT = {read = get_DocTGID_INVT, write = set_DocTGID_INVT};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};
};
typedef TCOMIOleDMDocRealT<IOleDMDocReal> TCOMIOleDMDocReal;

// *********************************************************************//
// DispIntf:  IOleDMDocReal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A9B32F6B-0BBA-4CFA-AEF1-312AA488A02F}
// *********************************************************************//
template<class T>
class IOleDMDocRealDispT : public TAutoDriver<IOleDMDocReal>
{
public:
  IOleDMDocRealDispT(){}

  IOleDMDocRealDispT(IOleDMDocReal *pintf)
  {
    TAutoDriver<IOleDMDocReal>::Bind(pintf, false);
  }

  IOleDMDocRealDispT(IOleDMDocRealPtr pintf)
  {
    TAutoDriver<IOleDMDocReal>::Bind(pintf, true);
  }

  IOleDMDocRealDispT& operator=(IOleDMDocReal *pintf)
  {
    TAutoDriver<IOleDMDocReal>::Bind(pintf, false);
    return *this;
  }

  IOleDMDocRealDispT& operator=(IOleDMDocRealPtr pintf)
  {
    TAutoDriver<IOleDMDocReal>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMDocReal));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMDocReal);
  }

  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall get_DocAllIDDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDDOC(void);
  HRESULT         __fastcall set_DocAllIDDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllPOSDOC(void);
  HRESULT         __fastcall set_DocAllPOSDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPRDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllPRDOC(void);
  HRESULT         __fastcall set_DocAllPRDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllTDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllTDOC(void);
  HRESULT         __fastcall set_DocAllTDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllNUMDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllNUMDOC(void);
  HRESULT         __fastcall set_DocAllNUMDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDFIRMDOC(void);
  HRESULT         __fastcall set_DocAllIDFIRMDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDSKLDOC(void);
  HRESULT         __fastcall set_DocAllIDSKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllSUMDOC(double* Value/*[out,retval]*/);
  double          __fastcall get_DocAllSUMDOC(void);
  HRESULT         __fastcall set_DocAllSUMDOC(double Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDUSERDOC(void);
  HRESULT         __fastcall set_DocAllIDUSERDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllFNAMEUSER(void);
  HRESULT         __fastcall get_DocID_INV(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocID_INV(void);
  HRESULT         __fastcall set_DocID_INV(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDDOC_INV(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDDOC_INV(void);
  HRESULT         __fastcall set_DocIDDOC_INV(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocPRIM_INV(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocPRIM_INV(void);
  HRESULT         __fastcall set_DocPRIM_INV(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTID_INVT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTID_INVT(void);
  HRESULT         __fastcall set_DocTID_INVT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDDOC_INVT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDDOC_INVT(void);
  HRESULT         __fastcall set_DocTIDDOC_INVT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDNOM_INVT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDNOM_INVT(void);
  HRESULT         __fastcall set_DocTIDNOM_INVT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDED_INVT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDED_INVT(void);
  HRESULT         __fastcall set_DocTIDED_INVT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTKF_INVT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKF_INVT(void);
  HRESULT         __fastcall set_DocTKF_INVT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTKOLUCH_INVT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKOLUCH_INVT(void);
  HRESULT         __fastcall set_DocTKOLUCH_INVT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMENOM(void);
  HRESULT         __fastcall get_DocTNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMEED(void);
  HRESULT         __fastcall get_DocTKOLFAKT_INVT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKOLFAKT_INVT(void);
  HRESULT         __fastcall set_DocTKOLFAKT_INVT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllGID_DOC(void);
  HRESULT         __fastcall set_DocAllGID_DOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocGID_INV(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocGID_INV(void);
  HRESULT         __fastcall set_DocGID_INV(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTGID_INVT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTGID_INVT(void);
  HRESULT         __fastcall set_DocTGID_INVT(BSTR Value/*[in]*/);
  HRESULT         __fastcall NewDoc();
  HRESULT         __fastcall OpenDoc(BSTR IdDoc/*[in]*/);
  HRESULT         __fastcall SaveDoc();
  HRESULT         __fastcall DvRegDoc();
  HRESULT         __fastcall CancelDvRegDoc();
  HRESULT         __fastcall AddDocNewString();
  HRESULT         __fastcall DeleteStringDoc();
  HRESULT         __fastcall DeleteDoc(BSTR Id/*[in]*/);
  HRESULT         __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/, 
                                                 BSTR* id_doc/*[out,retval]*/);
  BSTR            __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/);
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall get_PrefiksDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PrefiksDoc(void);
  HRESULT         __fastcall set_PrefiksDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameBase(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameBase(void);
  HRESULT         __fastcall get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDBASE_GALLDOC(void);
  HRESULT         __fastcall set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/);

  __property   BSTR            TextError = {read = get_TextError};
  __property   int             CodeError = {read = get_CodeError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocAllIDUSERDOC = {read = get_DocAllIDUSERDOC, write = set_DocAllIDUSERDOC};
  __property   BSTR            DocAllFNAMEUSER = {read = get_DocAllFNAMEUSER};
  __property   BSTR            DocID_INV = {read = get_DocID_INV, write = set_DocID_INV};
  __property   BSTR            DocIDDOC_INV = {read = get_DocIDDOC_INV, write = set_DocIDDOC_INV};
  __property   BSTR            DocPRIM_INV = {read = get_DocPRIM_INV, write = set_DocPRIM_INV};
  __property   BSTR            DocTID_INVT = {read = get_DocTID_INVT, write = set_DocTID_INVT};
  __property   BSTR            DocTIDDOC_INVT = {read = get_DocTIDDOC_INVT, write = set_DocTIDDOC_INVT};
  __property   BSTR            DocTIDNOM_INVT = {read = get_DocTIDNOM_INVT, write = set_DocTIDNOM_INVT};
  __property   BSTR            DocTIDED_INVT = {read = get_DocTIDED_INVT, write = set_DocTIDED_INVT};
  __property   double          DocTKF_INVT = {read = get_DocTKF_INVT, write = set_DocTKF_INVT};
  __property   double          DocTKOLUCH_INVT = {read = get_DocTKOLUCH_INVT, write = set_DocTKOLUCH_INVT};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   double          DocTKOLFAKT_INVT = {read = get_DocTKOLFAKT_INVT, write = set_DocTKOLFAKT_INVT};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocGID_INV = {read = get_DocGID_INV, write = set_DocGID_INV};
  __property   BSTR            DocTGID_INVT = {read = get_DocTGID_INVT, write = set_DocTGID_INVT};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};
};
typedef IOleDMDocRealDispT<IOleDMDocReal> IOleDMDocRealDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMDocSpisNom
// Interface: IOleDMDocSpisNom
// *********************************************************************//
template <class T /* IOleDMDocSpisNom */ >
class TCOMIOleDMDocSpisNomT : public TComInterface<IOleDMDocSpisNom>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMDocSpisNomT() {}
  TCOMIOleDMDocSpisNomT(IOleDMDocSpisNom *intf, bool addRef = false) : TComInterface<IOleDMDocSpisNom>(intf, addRef) {}
  TCOMIOleDMDocSpisNomT(const TCOMIOleDMDocSpisNomT& src) : TComInterface<IOleDMDocSpisNom>(src) {}
  TCOMIOleDMDocSpisNomT& operator=(const TCOMIOleDMDocSpisNomT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall get_DocAllIDDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDDOC(void);
  HRESULT         __fastcall set_DocAllIDDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllPOSDOC(void);
  HRESULT         __fastcall set_DocAllPOSDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPRDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllPRDOC(void);
  HRESULT         __fastcall set_DocAllPRDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllTDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllTDOC(void);
  HRESULT         __fastcall set_DocAllTDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllNUMDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllNUMDOC(void);
  HRESULT         __fastcall set_DocAllNUMDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDFIRMDOC(void);
  HRESULT         __fastcall set_DocAllIDFIRMDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDSKLDOC(void);
  HRESULT         __fastcall set_DocAllIDSKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDKLDOC(void);
  HRESULT         __fastcall set_DocAllIDKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllSUMDOC(double* Value/*[out,retval]*/);
  double          __fastcall get_DocAllSUMDOC(void);
  HRESULT         __fastcall set_DocAllSUMDOC(double Value/*[in]*/);
  HRESULT         __fastcall get_DocIDSPN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDSPN(void);
  HRESULT         __fastcall set_DocIDSPN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDDOCSPN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDDOCSPN(void);
  HRESULT         __fastcall set_DocIDDOCSPN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocPRIMSPN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocPRIMSPN(void);
  HRESULT         __fastcall set_DocPRIMSPN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDSPNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDSPNT(void);
  HRESULT         __fastcall set_DocTIDSPNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDDOCSPNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDDOCSPNT(void);
  HRESULT         __fastcall set_DocTIDDOCSPNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDNOMSPNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDNOMSPNT(void);
  HRESULT         __fastcall set_DocTIDNOMSPNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDEDSPNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDEDSPNT(void);
  HRESULT         __fastcall set_DocTIDEDSPNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTKOLSPNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKOLSPNT(void);
  HRESULT         __fastcall set_DocTKOLSPNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTKFSPNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKFSPNT(void);
  HRESULT         __fastcall set_DocTKFSPNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTPRICESPNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTPRICESPNT(void);
  HRESULT         __fastcall set_DocTPRICESPNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTSUMSPNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTSUMSPNT(void);
  HRESULT         __fastcall set_DocTSUMSPNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMENOM(void);
  HRESULT         __fastcall get_DocTNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMEED(void);
  HRESULT         __fastcall get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllGID_DOC(void);
  HRESULT         __fastcall set_DocAllGID_DOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocGID_DSPN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocGID_DSPN(void);
  HRESULT         __fastcall set_DocGID_DSPN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTGID_DSPNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTGID_DSPNT(void);
  HRESULT         __fastcall set_DocTGID_DSPNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall NewDoc(void);
  HRESULT         __fastcall OpenDoc(BSTR IdDoc/*[in]*/);
  HRESULT         __fastcall SaveDoc(void);
  HRESULT         __fastcall DvRegDoc(void);
  HRESULT         __fastcall CancelDvRegDoc(void);
  HRESULT         __fastcall AddDocNewString(void);
  HRESULT         __fastcall DeleteStringDoc(void);
  HRESULT         __fastcall CloseDoc(void);
  HRESULT         __fastcall DeleteDoc(BSTR Id/*[in]*/);
  HRESULT         __fastcall get_PrefiksDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PrefiksDoc(void);
  HRESULT         __fastcall set_PrefiksDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameBase(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameBase(void);
  HRESULT         __fastcall get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDBASE_GALLDOC(void);
  HRESULT         __fastcall set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocIDSPN = {read = get_DocIDSPN, write = set_DocIDSPN};
  __property   BSTR            DocIDDOCSPN = {read = get_DocIDDOCSPN, write = set_DocIDDOCSPN};
  __property   BSTR            DocPRIMSPN = {read = get_DocPRIMSPN, write = set_DocPRIMSPN};
  __property   BSTR            DocTIDSPNT = {read = get_DocTIDSPNT, write = set_DocTIDSPNT};
  __property   BSTR            DocTIDDOCSPNT = {read = get_DocTIDDOCSPNT, write = set_DocTIDDOCSPNT};
  __property   BSTR            DocTIDNOMSPNT = {read = get_DocTIDNOMSPNT, write = set_DocTIDNOMSPNT};
  __property   BSTR            DocTIDEDSPNT = {read = get_DocTIDEDSPNT, write = set_DocTIDEDSPNT};
  __property   double          DocTKOLSPNT = {read = get_DocTKOLSPNT, write = set_DocTKOLSPNT};
  __property   double          DocTKFSPNT = {read = get_DocTKFSPNT, write = set_DocTKFSPNT};
  __property   double          DocTPRICESPNT = {read = get_DocTPRICESPNT, write = set_DocTPRICESPNT};
  __property   double          DocTSUMSPNT = {read = get_DocTSUMSPNT, write = set_DocTSUMSPNT};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocGID_DSPN = {read = get_DocGID_DSPN, write = set_DocGID_DSPN};
  __property   BSTR            DocTGID_DSPNT = {read = get_DocTGID_DSPNT, write = set_DocTGID_DSPNT};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};
};
typedef TCOMIOleDMDocSpisNomT<IOleDMDocSpisNom> TCOMIOleDMDocSpisNom;

// *********************************************************************//
// DispIntf:  IOleDMDocSpisNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8B080649-063C-46B7-AB4B-F1555658555E}
// *********************************************************************//
template<class T>
class IOleDMDocSpisNomDispT : public TAutoDriver<IOleDMDocSpisNom>
{
public:
  IOleDMDocSpisNomDispT(){}

  IOleDMDocSpisNomDispT(IOleDMDocSpisNom *pintf)
  {
    TAutoDriver<IOleDMDocSpisNom>::Bind(pintf, false);
  }

  IOleDMDocSpisNomDispT(IOleDMDocSpisNomPtr pintf)
  {
    TAutoDriver<IOleDMDocSpisNom>::Bind(pintf, true);
  }

  IOleDMDocSpisNomDispT& operator=(IOleDMDocSpisNom *pintf)
  {
    TAutoDriver<IOleDMDocSpisNom>::Bind(pintf, false);
    return *this;
  }

  IOleDMDocSpisNomDispT& operator=(IOleDMDocSpisNomPtr pintf)
  {
    TAutoDriver<IOleDMDocSpisNom>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMDocSpisNom));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMDocSpisNom);
  }

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall get_DocAllIDDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDDOC(void);
  HRESULT         __fastcall set_DocAllIDDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllPOSDOC(void);
  HRESULT         __fastcall set_DocAllPOSDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPRDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllPRDOC(void);
  HRESULT         __fastcall set_DocAllPRDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllTDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllTDOC(void);
  HRESULT         __fastcall set_DocAllTDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllNUMDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllNUMDOC(void);
  HRESULT         __fastcall set_DocAllNUMDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDFIRMDOC(void);
  HRESULT         __fastcall set_DocAllIDFIRMDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDSKLDOC(void);
  HRESULT         __fastcall set_DocAllIDSKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDKLDOC(void);
  HRESULT         __fastcall set_DocAllIDKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllSUMDOC(double* Value/*[out,retval]*/);
  double          __fastcall get_DocAllSUMDOC(void);
  HRESULT         __fastcall set_DocAllSUMDOC(double Value/*[in]*/);
  HRESULT         __fastcall get_DocIDSPN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDSPN(void);
  HRESULT         __fastcall set_DocIDSPN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDDOCSPN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDDOCSPN(void);
  HRESULT         __fastcall set_DocIDDOCSPN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocPRIMSPN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocPRIMSPN(void);
  HRESULT         __fastcall set_DocPRIMSPN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDSPNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDSPNT(void);
  HRESULT         __fastcall set_DocTIDSPNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDDOCSPNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDDOCSPNT(void);
  HRESULT         __fastcall set_DocTIDDOCSPNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDNOMSPNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDNOMSPNT(void);
  HRESULT         __fastcall set_DocTIDNOMSPNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDEDSPNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDEDSPNT(void);
  HRESULT         __fastcall set_DocTIDEDSPNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTKOLSPNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKOLSPNT(void);
  HRESULT         __fastcall set_DocTKOLSPNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTKFSPNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKFSPNT(void);
  HRESULT         __fastcall set_DocTKFSPNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTPRICESPNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTPRICESPNT(void);
  HRESULT         __fastcall set_DocTPRICESPNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTSUMSPNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTSUMSPNT(void);
  HRESULT         __fastcall set_DocTSUMSPNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMENOM(void);
  HRESULT         __fastcall get_DocTNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMEED(void);
  HRESULT         __fastcall get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllGID_DOC(void);
  HRESULT         __fastcall set_DocAllGID_DOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocGID_DSPN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocGID_DSPN(void);
  HRESULT         __fastcall set_DocGID_DSPN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTGID_DSPNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTGID_DSPNT(void);
  HRESULT         __fastcall set_DocTGID_DSPNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall NewDoc();
  HRESULT         __fastcall OpenDoc(BSTR IdDoc/*[in]*/);
  HRESULT         __fastcall SaveDoc();
  HRESULT         __fastcall DvRegDoc();
  HRESULT         __fastcall CancelDvRegDoc();
  HRESULT         __fastcall AddDocNewString();
  HRESULT         __fastcall DeleteStringDoc();
  HRESULT         __fastcall CloseDoc();
  HRESULT         __fastcall DeleteDoc(BSTR Id/*[in]*/);
  HRESULT         __fastcall get_PrefiksDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PrefiksDoc(void);
  HRESULT         __fastcall set_PrefiksDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameBase(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameBase(void);
  HRESULT         __fastcall get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDBASE_GALLDOC(void);
  HRESULT         __fastcall set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocIDSPN = {read = get_DocIDSPN, write = set_DocIDSPN};
  __property   BSTR            DocIDDOCSPN = {read = get_DocIDDOCSPN, write = set_DocIDDOCSPN};
  __property   BSTR            DocPRIMSPN = {read = get_DocPRIMSPN, write = set_DocPRIMSPN};
  __property   BSTR            DocTIDSPNT = {read = get_DocTIDSPNT, write = set_DocTIDSPNT};
  __property   BSTR            DocTIDDOCSPNT = {read = get_DocTIDDOCSPNT, write = set_DocTIDDOCSPNT};
  __property   BSTR            DocTIDNOMSPNT = {read = get_DocTIDNOMSPNT, write = set_DocTIDNOMSPNT};
  __property   BSTR            DocTIDEDSPNT = {read = get_DocTIDEDSPNT, write = set_DocTIDEDSPNT};
  __property   double          DocTKOLSPNT = {read = get_DocTKOLSPNT, write = set_DocTKOLSPNT};
  __property   double          DocTKFSPNT = {read = get_DocTKFSPNT, write = set_DocTKFSPNT};
  __property   double          DocTPRICESPNT = {read = get_DocTPRICESPNT, write = set_DocTPRICESPNT};
  __property   double          DocTSUMSPNT = {read = get_DocTSUMSPNT, write = set_DocTSUMSPNT};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocGID_DSPN = {read = get_DocGID_DSPN, write = set_DocGID_DSPN};
  __property   BSTR            DocTGID_DSPNT = {read = get_DocTGID_DSPNT, write = set_DocTGID_DSPNT};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};
};
typedef IOleDMDocSpisNomDispT<IOleDMDocSpisNom> IOleDMDocSpisNomDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMDocOstNom
// Interface: IOleDMDocOstNom
// *********************************************************************//
template <class T /* IOleDMDocOstNom */ >
class TCOMIOleDMDocOstNomT : public TComInterface<IOleDMDocOstNom>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMDocOstNomT() {}
  TCOMIOleDMDocOstNomT(IOleDMDocOstNom *intf, bool addRef = false) : TComInterface<IOleDMDocOstNom>(intf, addRef) {}
  TCOMIOleDMDocOstNomT(const TCOMIOleDMDocOstNomT& src) : TComInterface<IOleDMDocOstNom>(src) {}
  TCOMIOleDMDocOstNomT& operator=(const TCOMIOleDMDocOstNomT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall get_DocIDOCN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDOCN(void);
  HRESULT         __fastcall set_DocIDOCN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocPRIMOSN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocPRIMOSN(void);
  HRESULT         __fastcall set_DocPRIMOSN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDDOCOSN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDDOCOSN(void);
  HRESULT         __fastcall set_DocIDDOCOSN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDDOC(void);
  HRESULT         __fastcall set_DocAllIDDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllPOSDOC(void);
  HRESULT         __fastcall set_DocAllPOSDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPRDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllPRDOC(void);
  HRESULT         __fastcall set_DocAllPRDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllTDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllTDOC(void);
  HRESULT         __fastcall set_DocAllTDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllNUMDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllNUMDOC(void);
  HRESULT         __fastcall set_DocAllNUMDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDFIRMDOC(void);
  HRESULT         __fastcall set_DocAllIDFIRMDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDSKLDOC(void);
  HRESULT         __fastcall set_DocAllIDSKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDKLDOC(void);
  HRESULT         __fastcall set_DocAllIDKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllSUMDOC(double* Value/*[out,retval]*/);
  double          __fastcall get_DocAllSUMDOC(void);
  HRESULT         __fastcall set_DocAllSUMDOC(double Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDUSERDOC(void);
  HRESULT         __fastcall set_DocAllIDUSERDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllFNAMEUSER(void);
  HRESULT         __fastcall get_DocIDTPRICEOSN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDTPRICEOSN(void);
  HRESULT         __fastcall set_DocIDTPRICEOSN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocNAME_TPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocNAME_TPRICE(void);
  HRESULT         __fastcall get_DocTIDOSNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDOSNT(void);
  HRESULT         __fastcall set_DocTIDOSNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDDOCOSNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDDOCOSNT(void);
  HRESULT         __fastcall set_DocTIDDOCOSNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDNOMOSNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDNOMOSNT(void);
  HRESULT         __fastcall set_DocTIDNOMOSNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDEDOSNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDEDOSNT(void);
  HRESULT         __fastcall set_DocTIDEDOSNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDPARTOSNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDPARTOSNT(void);
  HRESULT         __fastcall set_DocTIDPARTOSNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTKOLOSNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKOLOSNT(void);
  HRESULT         __fastcall set_DocTKOLOSNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTKFOSNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKFOSNT(void);
  HRESULT         __fastcall set_DocTKFOSNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTPRICEOSNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTPRICEOSNT(void);
  HRESULT         __fastcall set_DocTPRICEOSNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTSUMOSNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTSUMOSNT(void);
  HRESULT         __fastcall set_DocTSUMOSNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMENOM(void);
  HRESULT         __fastcall get_DocTNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMEED(void);
  HRESULT         __fastcall get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllGID_DOC(void);
  HRESULT         __fastcall set_DocAllGID_DOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocGID_DOSN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocGID_DOSN(void);
  HRESULT         __fastcall set_DocGID_DOSN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTGID_DOSNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTGID_DOSNT(void);
  HRESULT         __fastcall set_DocTGID_DOSNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall NewDoc(void);
  HRESULT         __fastcall OpenDoc(BSTR IdDoc/*[in]*/);
  HRESULT         __fastcall SaveDoc(void);
  HRESULT         __fastcall CloseDoc(void);
  HRESULT         __fastcall DvRegDoc(void);
  HRESULT         __fastcall CancelDvRegDoc(void);
  HRESULT         __fastcall AddDocNewString(void);
  HRESULT         __fastcall DeleteStringDoc(void);
  HRESULT         __fastcall DeleteDoc(BSTR Id/*[in]*/);
  HRESULT         __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/, 
                                                 BSTR* id_doc/*[out,retval]*/);
  BSTR            __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall get_DocTTNOM(int* Value/*[out,retval]*/);
  int             __fastcall get_DocTTNOM(void);
  HRESULT         __fastcall set_DocTTNOM(int Value/*[in]*/);
  HRESULT         __fastcall get_PrefiksDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PrefiksDoc(void);
  HRESULT         __fastcall set_PrefiksDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameBase(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameBase(void);
  HRESULT         __fastcall get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDBASE_GALLDOC(void);
  HRESULT         __fastcall set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/);

  __property   BSTR            TextError = {read = get_TextError};
  __property   int             CodeError = {read = get_CodeError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            DocIDOCN = {read = get_DocIDOCN, write = set_DocIDOCN};
  __property   BSTR            DocPRIMOSN = {read = get_DocPRIMOSN, write = set_DocPRIMOSN};
  __property   BSTR            DocIDDOCOSN = {read = get_DocIDDOCOSN, write = set_DocIDDOCOSN};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocAllIDUSERDOC = {read = get_DocAllIDUSERDOC, write = set_DocAllIDUSERDOC};
  __property   BSTR            DocAllFNAMEUSER = {read = get_DocAllFNAMEUSER};
  __property   BSTR            DocIDTPRICEOSN = {read = get_DocIDTPRICEOSN, write = set_DocIDTPRICEOSN};
  __property   BSTR            DocNAME_TPRICE = {read = get_DocNAME_TPRICE};
  __property   BSTR            DocTIDOSNT = {read = get_DocTIDOSNT, write = set_DocTIDOSNT};
  __property   BSTR            DocTIDDOCOSNT = {read = get_DocTIDDOCOSNT, write = set_DocTIDDOCOSNT};
  __property   BSTR            DocTIDNOMOSNT = {read = get_DocTIDNOMOSNT, write = set_DocTIDNOMOSNT};
  __property   BSTR            DocTIDEDOSNT = {read = get_DocTIDEDOSNT, write = set_DocTIDEDOSNT};
  __property   BSTR            DocTIDPARTOSNT = {read = get_DocTIDPARTOSNT, write = set_DocTIDPARTOSNT};
  __property   double          DocTKOLOSNT = {read = get_DocTKOLOSNT, write = set_DocTKOLOSNT};
  __property   double          DocTKFOSNT = {read = get_DocTKFOSNT, write = set_DocTKFOSNT};
  __property   double          DocTPRICEOSNT = {read = get_DocTPRICEOSNT, write = set_DocTPRICEOSNT};
  __property   double          DocTSUMOSNT = {read = get_DocTSUMOSNT, write = set_DocTSUMOSNT};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocGID_DOSN = {read = get_DocGID_DOSN, write = set_DocGID_DOSN};
  __property   BSTR            DocTGID_DOSNT = {read = get_DocTGID_DOSNT, write = set_DocTGID_DOSNT};
  __property   int             DocTTNOM = {read = get_DocTTNOM, write = set_DocTTNOM};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};
};
typedef TCOMIOleDMDocOstNomT<IOleDMDocOstNom> TCOMIOleDMDocOstNom;

// *********************************************************************//
// DispIntf:  IOleDMDocOstNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {38DC6630-17D6-42FC-B528-A2C9A6047C38}
// *********************************************************************//
template<class T>
class IOleDMDocOstNomDispT : public TAutoDriver<IOleDMDocOstNom>
{
public:
  IOleDMDocOstNomDispT(){}

  IOleDMDocOstNomDispT(IOleDMDocOstNom *pintf)
  {
    TAutoDriver<IOleDMDocOstNom>::Bind(pintf, false);
  }

  IOleDMDocOstNomDispT(IOleDMDocOstNomPtr pintf)
  {
    TAutoDriver<IOleDMDocOstNom>::Bind(pintf, true);
  }

  IOleDMDocOstNomDispT& operator=(IOleDMDocOstNom *pintf)
  {
    TAutoDriver<IOleDMDocOstNom>::Bind(pintf, false);
    return *this;
  }

  IOleDMDocOstNomDispT& operator=(IOleDMDocOstNomPtr pintf)
  {
    TAutoDriver<IOleDMDocOstNom>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMDocOstNom));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMDocOstNom);
  }

  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall get_DocIDOCN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDOCN(void);
  HRESULT         __fastcall set_DocIDOCN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocPRIMOSN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocPRIMOSN(void);
  HRESULT         __fastcall set_DocPRIMOSN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDDOCOSN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDDOCOSN(void);
  HRESULT         __fastcall set_DocIDDOCOSN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDDOC(void);
  HRESULT         __fastcall set_DocAllIDDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllPOSDOC(void);
  HRESULT         __fastcall set_DocAllPOSDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllPRDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllPRDOC(void);
  HRESULT         __fastcall set_DocAllPRDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllTDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllTDOC(void);
  HRESULT         __fastcall set_DocAllTDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllNUMDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllNUMDOC(void);
  HRESULT         __fastcall set_DocAllNUMDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDFIRMDOC(void);
  HRESULT         __fastcall set_DocAllIDFIRMDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDSKLDOC(void);
  HRESULT         __fastcall set_DocAllIDSKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDKLDOC(void);
  HRESULT         __fastcall set_DocAllIDKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllSUMDOC(double* Value/*[out,retval]*/);
  double          __fastcall get_DocAllSUMDOC(void);
  HRESULT         __fastcall set_DocAllSUMDOC(double Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDUSERDOC(void);
  HRESULT         __fastcall set_DocAllIDUSERDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllFNAMEUSER(void);
  HRESULT         __fastcall get_DocIDTPRICEOSN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDTPRICEOSN(void);
  HRESULT         __fastcall set_DocIDTPRICEOSN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocNAME_TPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocNAME_TPRICE(void);
  HRESULT         __fastcall get_DocTIDOSNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDOSNT(void);
  HRESULT         __fastcall set_DocTIDOSNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDDOCOSNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDDOCOSNT(void);
  HRESULT         __fastcall set_DocTIDDOCOSNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDNOMOSNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDNOMOSNT(void);
  HRESULT         __fastcall set_DocTIDNOMOSNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDEDOSNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDEDOSNT(void);
  HRESULT         __fastcall set_DocTIDEDOSNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDPARTOSNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDPARTOSNT(void);
  HRESULT         __fastcall set_DocTIDPARTOSNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTKOLOSNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKOLOSNT(void);
  HRESULT         __fastcall set_DocTKOLOSNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTKFOSNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKFOSNT(void);
  HRESULT         __fastcall set_DocTKFOSNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTPRICEOSNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTPRICEOSNT(void);
  HRESULT         __fastcall set_DocTPRICEOSNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTSUMOSNT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTSUMOSNT(void);
  HRESULT         __fastcall set_DocTSUMOSNT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMENOM(void);
  HRESULT         __fastcall get_DocTNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTNAMEED(void);
  HRESULT         __fastcall get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllGID_DOC(void);
  HRESULT         __fastcall set_DocAllGID_DOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocGID_DOSN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocGID_DOSN(void);
  HRESULT         __fastcall set_DocGID_DOSN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTGID_DOSNT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTGID_DOSNT(void);
  HRESULT         __fastcall set_DocTGID_DOSNT(BSTR Value/*[in]*/);
  HRESULT         __fastcall NewDoc();
  HRESULT         __fastcall OpenDoc(BSTR IdDoc/*[in]*/);
  HRESULT         __fastcall SaveDoc();
  HRESULT         __fastcall CloseDoc();
  HRESULT         __fastcall DvRegDoc();
  HRESULT         __fastcall CancelDvRegDoc();
  HRESULT         __fastcall AddDocNewString();
  HRESULT         __fastcall DeleteStringDoc();
  HRESULT         __fastcall DeleteDoc(BSTR Id/*[in]*/);
  HRESULT         __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/, 
                                                 BSTR* id_doc/*[out,retval]*/);
  BSTR            __fastcall GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/);
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall get_DocTTNOM(int* Value/*[out,retval]*/);
  int             __fastcall get_DocTTNOM(void);
  HRESULT         __fastcall set_DocTTNOM(int Value/*[in]*/);
  HRESULT         __fastcall get_PrefiksDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PrefiksDoc(void);
  HRESULT         __fastcall set_PrefiksDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_NameBase(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameBase(void);
  HRESULT         __fastcall get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDBASE_GALLDOC(void);
  HRESULT         __fastcall set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/);

  __property   BSTR            TextError = {read = get_TextError};
  __property   int             CodeError = {read = get_CodeError};
  __property   int             TableEOF = {read = get_TableEOF};
  __property   BSTR            DocIDOCN = {read = get_DocIDOCN, write = set_DocIDOCN};
  __property   BSTR            DocPRIMOSN = {read = get_DocPRIMOSN, write = set_DocPRIMOSN};
  __property   BSTR            DocIDDOCOSN = {read = get_DocIDDOCOSN, write = set_DocIDDOCOSN};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC, write = set_DocAllIDDOC};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   int             DocAllPRDOC = {read = get_DocAllPRDOC, write = set_DocAllPRDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocAllIDUSERDOC = {read = get_DocAllIDUSERDOC, write = set_DocAllIDUSERDOC};
  __property   BSTR            DocAllFNAMEUSER = {read = get_DocAllFNAMEUSER};
  __property   BSTR            DocIDTPRICEOSN = {read = get_DocIDTPRICEOSN, write = set_DocIDTPRICEOSN};
  __property   BSTR            DocNAME_TPRICE = {read = get_DocNAME_TPRICE};
  __property   BSTR            DocTIDOSNT = {read = get_DocTIDOSNT, write = set_DocTIDOSNT};
  __property   BSTR            DocTIDDOCOSNT = {read = get_DocTIDDOCOSNT, write = set_DocTIDDOCOSNT};
  __property   BSTR            DocTIDNOMOSNT = {read = get_DocTIDNOMOSNT, write = set_DocTIDNOMOSNT};
  __property   BSTR            DocTIDEDOSNT = {read = get_DocTIDEDOSNT, write = set_DocTIDEDOSNT};
  __property   BSTR            DocTIDPARTOSNT = {read = get_DocTIDPARTOSNT, write = set_DocTIDPARTOSNT};
  __property   double          DocTKOLOSNT = {read = get_DocTKOLOSNT, write = set_DocTKOLOSNT};
  __property   double          DocTKFOSNT = {read = get_DocTKFOSNT, write = set_DocTKFOSNT};
  __property   double          DocTPRICEOSNT = {read = get_DocTPRICEOSNT, write = set_DocTPRICEOSNT};
  __property   double          DocTSUMOSNT = {read = get_DocTSUMOSNT, write = set_DocTSUMOSNT};
  __property   BSTR            DocTNAMENOM = {read = get_DocTNAMENOM};
  __property   BSTR            DocTNAMEED = {read = get_DocTNAMEED};
  __property   BSTR            DocAllGID_DOC = {read = get_DocAllGID_DOC, write = set_DocAllGID_DOC};
  __property   BSTR            DocGID_DOSN = {read = get_DocGID_DOSN, write = set_DocGID_DOSN};
  __property   BSTR            DocTGID_DOSNT = {read = get_DocTGID_DOSNT, write = set_DocTGID_DOSNT};
  __property   int             DocTTNOM = {read = get_DocTTNOM, write = set_DocTTNOM};
  __property   BSTR            PrefiksDoc = {read = get_PrefiksDoc, write = set_PrefiksDoc};
  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};
};
typedef IOleDMDocOstNomDispT<IOleDMDocOstNom> IOleDMDocOstNomDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprInfBase
// Interface: IOleDMSprInfBase
// *********************************************************************//
template <class T /* IOleDMSprInfBase */ >
class TCOMIOleDMSprInfBaseT : public TComInterface<IOleDMSprInfBase>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMSprInfBaseT() {}
  TCOMIOleDMSprInfBaseT(IOleDMSprInfBase *intf, bool addRef = false) : TComInterface<IOleDMSprInfBase>(intf, addRef) {}
  TCOMIOleDMSprInfBaseT(const TCOMIOleDMSprInfBaseT& src) : TComInterface<IOleDMSprInfBase>(src) {}
  TCOMIOleDMSprInfBaseT& operator=(const TCOMIOleDMSprInfBaseT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_NameBase(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameBase(void);
  HRESULT         __fastcall get_PrefiksBase(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PrefiksBase(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall OpenTable(void);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall GetIdPoName(BSTR name/*[in]*/, BSTR* Id/*[out,retval]*/);
  BSTR            __fastcall GetIdPoName(BSTR name/*[in]*/);

  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            PrefiksBase = {read = get_PrefiksBase};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
};
typedef TCOMIOleDMSprInfBaseT<IOleDMSprInfBase> TCOMIOleDMSprInfBase;

// *********************************************************************//
// DispIntf:  IOleDMSprInfBase
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D8FD7D0D-A464-40C9-8530-852FB721E035}
// *********************************************************************//
template<class T>
class IOleDMSprInfBaseDispT : public TAutoDriver<IOleDMSprInfBase>
{
public:
  IOleDMSprInfBaseDispT(){}

  IOleDMSprInfBaseDispT(IOleDMSprInfBase *pintf)
  {
    TAutoDriver<IOleDMSprInfBase>::Bind(pintf, false);
  }

  IOleDMSprInfBaseDispT(IOleDMSprInfBasePtr pintf)
  {
    TAutoDriver<IOleDMSprInfBase>::Bind(pintf, true);
  }

  IOleDMSprInfBaseDispT& operator=(IOleDMSprInfBase *pintf)
  {
    TAutoDriver<IOleDMSprInfBase>::Bind(pintf, false);
    return *this;
  }

  IOleDMSprInfBaseDispT& operator=(IOleDMSprInfBasePtr pintf)
  {
    TAutoDriver<IOleDMSprInfBase>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMSprInfBase));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMSprInfBase);
  }

  HRESULT         __fastcall get_NameBase(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameBase(void);
  HRESULT         __fastcall get_PrefiksBase(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PrefiksBase(void);
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_TableEOF(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEOF(void);
  HRESULT         __fastcall OpenTable();
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall GetIdPoName(BSTR name/*[in]*/, BSTR* Id/*[out,retval]*/);
  BSTR            __fastcall GetIdPoName(BSTR name/*[in]*/);

  __property   BSTR            NameBase = {read = get_NameBase};
  __property   BSTR            PrefiksBase = {read = get_PrefiksBase};
  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEOF = {read = get_TableEOF};
};
typedef IOleDMSprInfBaseDispT<IOleDMSprInfBase> IOleDMSprInfBaseDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMGurAllDoc
// Interface: IOleDMGurAllDoc
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdDoc(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdDoc(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdDoc(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdDoc((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_IdDoc(BSTR Value/*[in]*/)
{
  return (*this)->set_IdDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_PosDoc(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_PosDoc(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_PosDoc(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_PosDoc((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_PosDoc(BSTR Value/*[in]*/)
{
  return (*this)->set_PosDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_PrDoc(int* Value/*[out,retval]*/)
{
  return (*this)->get_PrDoc(Value);
}

template <class T> int __fastcall
TCOMIOleDMGurAllDocT<T>::get_PrDoc(void)
{
  int Value;
  OLECHECK(this->get_PrDoc((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_PrDoc(int Value/*[in]*/)
{
  return (*this)->set_PrDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_NumDoc(int* Value/*[out,retval]*/)
{
  return (*this)->get_NumDoc(Value);
}

template <class T> int __fastcall
TCOMIOleDMGurAllDocT<T>::get_NumDoc(void)
{
  int Value;
  OLECHECK(this->get_NumDoc((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_NumDoc(int Value/*[in]*/)
{
  return (*this)->set_NumDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdFirmDoc(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdFirmDoc(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdFirmDoc(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdFirmDoc((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_IdFirmDoc(BSTR Value/*[in]*/)
{
  return (*this)->set_IdFirmDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdSklDoc(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdSklDoc(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdSklDoc(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdSklDoc((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_IdSklDoc(BSTR Value/*[in]*/)
{
  return (*this)->set_IdSklDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdKlDoc(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdKlDoc(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdKlDoc(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdKlDoc((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_IdKlDoc(BSTR Value/*[in]*/)
{
  return (*this)->set_IdKlDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_SumDoc(double* Value/*[out,retval]*/)
{
  return (*this)->get_SumDoc(Value);
}

template <class T> double __fastcall
TCOMIOleDMGurAllDocT<T>::get_SumDoc(void)
{
  double Value;
  OLECHECK(this->get_SumDoc((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_SumDoc(double Value/*[in]*/)
{
  return (*this)->set_SumDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_NameFirm(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NameFirm(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_NameFirm(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NameFirm((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_NameFirm(BSTR Value/*[in]*/)
{
  return (*this)->set_NameFirm(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_NameSklad(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NameSklad(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_NameSklad(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NameSklad((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_NameSklad(BSTR Value/*[in]*/)
{
  return (*this)->set_NameSklad(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_NameKlient(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NameKlient(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_NameKlient(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NameKlient((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_NameKlient(BSTR Value/*[in]*/)
{
  return (*this)->set_NameKlient(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_NameUser(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NameUser(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_NameUser(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NameUser((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_NameUser(BSTR Value/*[in]*/)
{
  return (*this)->set_NameUser(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdUserDoc(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdUserDoc(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdUserDoc(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdUserDoc((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_IdUserDoc(BSTR Value/*[in]*/)
{
  return (*this)->set_IdUserDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TDoc(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TDoc(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_TDoc(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TDoc((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_TDoc(BSTR Value/*[in]*/)
{
  return (*this)->set_TDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEOF(Value);
}

template <class T> int __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableEOF(void)
{
  int Value;
  OLECHECK(this->get_TableEOF((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::OpenTable(void)
{
  return (*this)->OpenTable();
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::UpdateTable(void)
{
  return (*this)->UpdateTable();
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::FindDocPoIdDog(int iddogovor/*[in]*/)
{
  return (*this)->FindDocPoIdDog(iddogovor);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_StringTypeDoc(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_StringTypeDoc(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_StringTypeDoc(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_StringTypeDoc((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_StringTypeDoc(BSTR Value/*[in]*/)
{
  return (*this)->set_StringTypeDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_OtborVkl(int* Value/*[out,retval]*/)
{
  return (*this)->get_OtborVkl(Value);
}

template <class T> int __fastcall
TCOMIOleDMGurAllDocT<T>::get_OtborVkl(void)
{
  int Value;
  OLECHECK(this->get_OtborVkl((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_OtborVkl(int Value/*[in]*/)
{
  return (*this)->set_OtborVkl(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_PosNach(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_PosNach(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_PosNach(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_PosNach((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_PosNach(BSTR Value/*[in]*/)
{
  return (*this)->set_PosNach(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_PosCon(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_PosCon(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_PosCon(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_PosCon((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_PosCon(BSTR Value/*[in]*/)
{
  return (*this)->set_PosCon(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMGurAllDocT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IOleDMGurAllDoc
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A02C7199-FA6C-428C-9023-6A07FC678FB3}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_IdDoc(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdDoc"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_IdDoc(void)
{
  BSTR Value;
  this->get_IdDoc((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_IdDoc(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdDoc"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_PosDoc(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PosDoc"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_PosDoc(void)
{
  BSTR Value;
  this->get_PosDoc((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_PosDoc(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PosDoc"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_PrDoc(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrDoc"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMGurAllDocDispT<T>::get_PrDoc(void)
{
  int Value;
  this->get_PrDoc((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_PrDoc(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrDoc"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_NumDoc(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumDoc"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMGurAllDocDispT<T>::get_NumDoc(void)
{
  int Value;
  this->get_NumDoc((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_NumDoc(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumDoc"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_IdFirmDoc(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdFirmDoc"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_IdFirmDoc(void)
{
  BSTR Value;
  this->get_IdFirmDoc((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_IdFirmDoc(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdFirmDoc"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_IdSklDoc(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdSklDoc"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_IdSklDoc(void)
{
  BSTR Value;
  this->get_IdSklDoc((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_IdSklDoc(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdSklDoc"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_IdKlDoc(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdKlDoc"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_IdKlDoc(void)
{
  BSTR Value;
  this->get_IdKlDoc((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_IdKlDoc(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdKlDoc"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_SumDoc(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SumDoc"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMGurAllDocDispT<T>::get_SumDoc(void)
{
  double Value;
  this->get_SumDoc((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_SumDoc(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SumDoc"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_NameFirm(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameFirm"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_NameFirm(void)
{
  BSTR Value;
  this->get_NameFirm((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_NameFirm(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameFirm"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_NameSklad(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameSklad"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_NameSklad(void)
{
  BSTR Value;
  this->get_NameSklad((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_NameSklad(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameSklad"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_NameKlient(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameKlient"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_NameKlient(void)
{
  BSTR Value;
  this->get_NameKlient((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_NameKlient(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameKlient"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_NameUser(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameUser"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_NameUser(void)
{
  BSTR Value;
  this->get_NameUser((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_NameUser(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameUser"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_IdUserDoc(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdUserDoc"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_IdUserDoc(void)
{
  BSTR Value;
  this->get_IdUserDoc((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_IdUserDoc(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdUserDoc"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TDoc(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TDoc"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_TDoc(void)
{
  BSTR Value;
  this->get_TDoc((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_TDoc(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TDoc"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEOF"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMGurAllDocDispT<T>::get_TableEOF(void)
{
  int Value;
  this->get_TableEOF((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::OpenTable()
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::UpdateTable()
{
  _TDispID _dispid(*this, OLETEXT("UpdateTable"), DISPID(19));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::FindDocPoIdDog(int iddogovor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindDocPoIdDog"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = iddogovor /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_StringTypeDoc(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StringTypeDoc"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_StringTypeDoc(void)
{
  BSTR Value;
  this->get_StringTypeDoc((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_StringTypeDoc(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StringTypeDoc"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_OtborVkl(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OtborVkl"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMGurAllDocDispT<T>::get_OtborVkl(void)
{
  int Value;
  this->get_OtborVkl((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_OtborVkl(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OtborVkl"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_PosNach(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PosNach"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_PosNach(void)
{
  BSTR Value;
  this->get_PosNach((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_PosNach(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PosNach"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_PosCon(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PosCon"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_PosCon(void)
{
  BSTR Value;
  this->get_PosCon((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_PosCon(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PosCon"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMGurAllDocDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMIOleDM
// Interface: IOleDM
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::get_ConnectString(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ConnectString(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMT<T>::get_ConnectString(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ConnectString((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::set_ConnectString(BSTR Value/*[in]*/)
{
  return (*this)->set_ConnectString(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::get_NameUser(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NameUser(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMT<T>::get_NameUser(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NameUser((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::set_NameUser(BSTR Value/*[in]*/)
{
  return (*this)->set_NameUser(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::get_PasswordUser(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_PasswordUser(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMT<T>::get_PasswordUser(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_PasswordUser((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::set_PasswordUser(BSTR Value/*[in]*/)
{
  return (*this)->set_PasswordUser(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::GlobConnect(void)
{
  return (*this)->GlobConnect();
}

template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::get_ConnectOK(int* Value/*[out,retval]*/)
{
  return (*this)->get_ConnectOK(Value);
}

template <class T> int __fastcall
TCOMIOleDMT<T>::get_ConnectOK(void)
{
  int Value;
  OLECHECK(this->get_ConnectOK((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::get_OleTextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_OleTextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMT<T>::get_OleTextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_OleTextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::get_OleCodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_OleCodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMT<T>::get_OleCodeError(void)
{
  int Value;
  OLECHECK(this->get_OleCodeError((int*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IOleDM
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1A440201-6AC2-4B65-A0E7-1092675C2A3F}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMDispT<T>::get_ConnectString(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectString"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDispT<T>::get_ConnectString(void)
{
  BSTR Value;
  this->get_ConnectString((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDispT<T>::set_ConnectString(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectString"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDispT<T>::get_NameUser(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameUser"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDispT<T>::get_NameUser(void)
{
  BSTR Value;
  this->get_NameUser((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDispT<T>::set_NameUser(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameUser"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDispT<T>::get_PasswordUser(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PasswordUser"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDispT<T>::get_PasswordUser(void)
{
  BSTR Value;
  this->get_PasswordUser((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDispT<T>::set_PasswordUser(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PasswordUser"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDispT<T>::GlobConnect()
{
  _TDispID _dispid(*this, OLETEXT("GlobConnect"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDispT<T>::get_ConnectOK(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectOK"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDispT<T>::get_ConnectOK(void)
{
  int Value;
  this->get_ConnectOK((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDispT<T>::get_OleTextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OleTextError"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDispT<T>::get_OleTextError(void)
{
  BSTR Value;
  this->get_OleTextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDispT<T>::get_OleCodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OleCodeError"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDispT<T>::get_OleCodeError(void)
{
  int Value;
  this->get_OleCodeError((int*)&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprSklad
// Interface: IOleDMSprSklad
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_IdSklad(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdSklad(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::get_IdSklad(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdSklad((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::set_IdSklad(BSTR Value/*[in]*/)
{
  return (*this)->set_IdSklad(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_NameSklad(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NameSklad(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::get_NameSklad(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NameSklad((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::set_NameSklad(BSTR Value/*[in]*/)
{
  return (*this)->set_NameSklad(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_MolSklad(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_MolSklad(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::get_MolSklad(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_MolSklad((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::set_MolSklad(BSTR Value/*[in]*/)
{
  return (*this)->set_MolSklad(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_AdrSklad(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_AdrSklad(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::get_AdrSklad(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_AdrSklad((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::set_AdrSklad(BSTR Value/*[in]*/)
{
  return (*this)->set_AdrSklad(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_TSklad(int* Value/*[out,retval]*/)
{
  return (*this)->get_TSklad(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprSkladT<T>::get_TSklad(void)
{
  int Value;
  OLECHECK(this->get_TSklad((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::set_TSklad(int Value/*[in]*/)
{
  return (*this)->set_TSklad(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_GID_Sklad(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_GID_Sklad(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::get_GID_Sklad(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_GID_Sklad((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::set_GID_Sklad(BSTR Value/*[in]*/)
{
  return (*this)->set_GID_Sklad(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::OpenElement(BSTR Id/*[in]*/)
{
  return (*this)->OpenElement(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::NewElement(void)
{
  return (*this)->NewElement();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::SaveElement(void)
{
  return (*this)->SaveElement();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::DeleteElement(BSTR Id/*[in]*/)
{
  return (*this)->DeleteElement(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/)
{
  return (*this)->GetIdElement(gid, Id);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR Id = 0;
  OLECHECK(this->GetIdElement(gid/*[in]*/, (BSTR*)&Id));
  return Id;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  return (*this)->GetGidElement(Id, gid);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::GetGidElement(BSTR Id/*[in]*/)
{
  BSTR gid = 0;
  OLECHECK(this->GetGidElement(Id/*[in]*/, (BSTR*)&gid));
  return gid;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprSkladT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEOF(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprSkladT<T>::get_TableEOF(void)
{
  int Value;
  OLECHECK(this->get_TableEOF((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::CloseElement(void)
{
  return (*this)->CloseElement();
}

// *********************************************************************//
// DispIntf:  IOleDMSprSklad
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5B2971DD-B19A-4FC3-BEDC-3E05B157FE9A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_IdSklad(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdSklad"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::get_IdSklad(void)
{
  BSTR Value;
  this->get_IdSklad((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::set_IdSklad(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdSklad"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_NameSklad(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameSklad"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::get_NameSklad(void)
{
  BSTR Value;
  this->get_NameSklad((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::set_NameSklad(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameSklad"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_MolSklad(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MolSklad"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::get_MolSklad(void)
{
  BSTR Value;
  this->get_MolSklad((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::set_MolSklad(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MolSklad"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_AdrSklad(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdrSklad"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::get_AdrSklad(void)
{
  BSTR Value;
  this->get_AdrSklad((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::set_AdrSklad(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdrSklad"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_TSklad(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TSklad"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprSkladDispT<T>::get_TSklad(void)
{
  int Value;
  this->get_TSklad((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::set_TSklad(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TSklad"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_GID_Sklad(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GID_Sklad"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::get_GID_Sklad(void)
{
  BSTR Value;
  this->get_GID_Sklad((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::set_GID_Sklad(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GID_Sklad"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::OpenElement(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenElement"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::NewElement()
{
  _TDispID _dispid(*this, OLETEXT("NewElement"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::SaveElement()
{
  _TDispID _dispid(*this, OLETEXT("SaveElement"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::DeleteElement(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteElement"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdElement"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = gid /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Id /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR Id;
  this->GetIdElement(gid, (BSTR*)&Id);
  return Id;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetGidElement"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(gid /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::GetGidElement(BSTR Id/*[in]*/)
{
  BSTR gid;
  this->GetGidElement(Id, (BSTR*)&gid);
  return gid;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprSkladDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEOF"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprSkladDispT<T>::get_TableEOF(void)
{
  int Value;
  this->get_TableEOF((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::CloseElement()
{
  _TDispID _dispid(*this, OLETEXT("CloseElement"), DISPID(7));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprFirm
// Interface: IOleDMSprFirm
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_IdFirm(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdFirm(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_IdFirm(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdFirm((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::set_IdFirm(BSTR Value/*[in]*/)
{
  return (*this)->set_IdFirm(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_NameFirm(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NameFirm(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_NameFirm(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NameFirm((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::set_NameFirm(BSTR Value/*[in]*/)
{
  return (*this)->set_NameFirm(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_FNameNom(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_FNameNom(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_FNameNom(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_FNameNom((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::set_FNameNom(BSTR Value/*[in]*/)
{
  return (*this)->set_FNameNom(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_PAdrFirm(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_PAdrFirm(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_PAdrFirm(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_PAdrFirm((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::set_PAdrFirm(BSTR Value/*[in]*/)
{
  return (*this)->set_PAdrFirm(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_UAdrFirm(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_UAdrFirm(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_UAdrFirm(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_UAdrFirm((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::set_UAdrFirm(BSTR Value/*[in]*/)
{
  return (*this)->set_UAdrFirm(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_INNFirm(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_INNFirm(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_INNFirm(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_INNFirm((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::set_INNFirm(BSTR Value/*[in]*/)
{
  return (*this)->set_INNFirm(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_KPPFirm(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_KPPFirm(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_KPPFirm(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_KPPFirm((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::set_KPPFirm(BSTR Value/*[in]*/)
{
  return (*this)->set_KPPFirm(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_GID_Firm(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_GID_Firm(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_GID_Firm(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_GID_Firm((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::set_GID_Firm(BSTR Value/*[in]*/)
{
  return (*this)->set_GID_Firm(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprFirmT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::OpenTable(void)
{
  return (*this)->OpenTable();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::OpenElement(BSTR Id/*[in]*/)
{
  return (*this)->OpenElement(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::NewElement(void)
{
  return (*this)->NewElement();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::SaveElement(void)
{
  return (*this)->SaveElement();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::DeleteElement(BSTR Id/*[in]*/)
{
  return (*this)->DeleteElement(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  return (*this)->GetGidElement(Id, gid);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::GetGidElement(BSTR Id/*[in]*/)
{
  BSTR gid = 0;
  OLECHECK(this->GetGidElement(Id/*[in]*/, (BSTR*)&gid));
  return gid;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEOF(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprFirmT<T>::get_TableEOF(void)
{
  int Value;
  OLECHECK(this->get_TableEOF((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::ElementEdit(void)
{
  return (*this)->ElementEdit();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::ElementPost(void)
{
  return (*this)->ElementPost();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

// *********************************************************************//
// DispIntf:  IOleDMSprFirm
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C22EF17E-FDD9-48D0-9FE4-59AE225450D2}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_IdFirm(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdFirm"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_IdFirm(void)
{
  BSTR Value;
  this->get_IdFirm((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::set_IdFirm(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdFirm"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_NameFirm(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameFirm"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_NameFirm(void)
{
  BSTR Value;
  this->get_NameFirm((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::set_NameFirm(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameFirm"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_FNameNom(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FNameNom"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_FNameNom(void)
{
  BSTR Value;
  this->get_FNameNom((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::set_FNameNom(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FNameNom"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_PAdrFirm(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PAdrFirm"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_PAdrFirm(void)
{
  BSTR Value;
  this->get_PAdrFirm((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::set_PAdrFirm(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PAdrFirm"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_UAdrFirm(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UAdrFirm"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_UAdrFirm(void)
{
  BSTR Value;
  this->get_UAdrFirm((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::set_UAdrFirm(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UAdrFirm"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_INNFirm(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("INNFirm"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_INNFirm(void)
{
  BSTR Value;
  this->get_INNFirm((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::set_INNFirm(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("INNFirm"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_KPPFirm(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KPPFirm"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_KPPFirm(void)
{
  BSTR Value;
  this->get_KPPFirm((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::set_KPPFirm(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KPPFirm"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_GID_Firm(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GID_Firm"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_GID_Firm(void)
{
  BSTR Value;
  this->get_GID_Firm((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::set_GID_Firm(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GID_Firm"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprFirmDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::OpenTable()
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::OpenElement(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenElement"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::NewElement()
{
  _TDispID _dispid(*this, OLETEXT("NewElement"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::SaveElement()
{
  _TDispID _dispid(*this, OLETEXT("SaveElement"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::DeleteElement(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteElement"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetGidElement"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(gid /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::GetGidElement(BSTR Id/*[in]*/)
{
  BSTR gid;
  this->GetGidElement(Id, (BSTR*)&gid);
  return gid;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEOF"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprFirmDispT<T>::get_TableEOF(void)
{
  int Value;
  this->get_TableEOF((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::ElementEdit()
{
  _TDispID _dispid(*this, OLETEXT("ElementEdit"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::ElementPost()
{
  _TDispID _dispid(*this, OLETEXT("ElementPost"), DISPID(19));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(20));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(21));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprNom
// Interface: IOleDMSprNom
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_IdNom(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdNom(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_IdNom(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdNom((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_IdNom(BSTR Value/*[in]*/)
{
  return (*this)->set_IdNom(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_TNom(int* Value/*[out,retval]*/)
{
  return (*this)->get_TNom(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprNomT<T>::get_TNom(void)
{
  int Value;
  OLECHECK(this->get_TNom((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_TNom(int Value/*[in]*/)
{
  return (*this)->set_TNom(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_CodeNom(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeNom(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprNomT<T>::get_CodeNom(void)
{
  int Value;
  OLECHECK(this->get_CodeNom((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_CodeNom(int Value/*[in]*/)
{
  return (*this)->set_CodeNom(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_NameNom(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NameNom(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_NameNom(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NameNom((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_NameNom(BSTR Value/*[in]*/)
{
  return (*this)->set_NameNom(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_FNameNom(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_FNameNom(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_FNameNom(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_FNameNom((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_FNameNom(BSTR Value/*[in]*/)
{
  return (*this)->set_FNameNom(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_KrNameNom(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_KrNameNom(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_KrNameNom(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_KrNameNom((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_KrNameNom(BSTR Value/*[in]*/)
{
  return (*this)->set_KrNameNom(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_IdBasEdNom(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdBasEdNom(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_IdBasEdNom(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdBasEdNom((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_IdBasEdNom(BSTR Value/*[in]*/)
{
  return (*this)->set_IdBasEdNom(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_IdOsnEdNom(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdOsnEdNom(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_IdOsnEdNom(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdOsnEdNom((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_IdOsnEdNom(BSTR Value/*[in]*/)
{
  return (*this)->set_IdOsnEdNom(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_IdGrpNom(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdGrpNom(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_IdGrpNom(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdGrpNom((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_IdGrpNom(BSTR Value/*[in]*/)
{
  return (*this)->set_IdGrpNom(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_ArtNom(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ArtNom(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_ArtNom(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ArtNom((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_ArtNom(BSTR Value/*[in]*/)
{
  return (*this)->set_ArtNom(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_GID_SNom(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_GID_SNom(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_GID_SNom(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_GID_SNom((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_GID_SNom(BSTR Value/*[in]*/)
{
  return (*this)->set_GID_SNom(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprNomT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_AllElement(int* Value/*[out,retval]*/)
{
  return (*this)->get_AllElement(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprNomT<T>::get_AllElement(void)
{
  int Value;
  OLECHECK(this->get_AllElement((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_AllElement(int Value/*[in]*/)
{
  return (*this)->set_AllElement(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_IdTypePrice(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdTypePrice(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_IdTypePrice(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdTypePrice((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_IdTypePrice(BSTR Value/*[in]*/)
{
  return (*this)->set_IdTypePrice(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::OpenTable(BSTR Grp/*[in]*/, int All/*[in]*/)
{
  return (*this)->OpenTable(Grp, All);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::OpenElement(BSTR Id/*[in]*/)
{
  return (*this)->OpenElement(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::NewElement(BSTR IdGrp/*[in]*/)
{
  return (*this)->NewElement(IdGrp);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::SaveElement(void)
{
  return (*this)->SaveElement();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::DeleteElement(BSTR Id/*[in]*/)
{
  return (*this)->DeleteElement(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::ChancheGrp(BSTR NewGrp/*[in]*/)
{
  return (*this)->ChancheGrp(NewGrp);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::FindPoCodu(int Code/*[in]*/)
{
  return (*this)->FindPoCodu(Code);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/)
{
  return (*this)->GetIdElement(gid, Id);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR Id = 0;
  OLECHECK(this->GetIdElement(gid/*[in]*/, (BSTR*)&Id));
  return Id;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  return (*this)->GetGidElement(Id, gid);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::GetGidElement(BSTR Id/*[in]*/)
{
  BSTR gid = 0;
  OLECHECK(this->GetGidElement(Id/*[in]*/, (BSTR*)&gid));
  return gid;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEOF(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprNomT<T>::get_TableEOF(void)
{
  int Value;
  OLECHECK(this->get_TableEOF((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

// *********************************************************************//
// DispIntf:  IOleDMSprNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB727574-CFC8-449E-AB6B-FC507E173833}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_IdNom(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdNom"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_IdNom(void)
{
  BSTR Value;
  this->get_IdNom((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_IdNom(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdNom"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_TNom(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TNom"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprNomDispT<T>::get_TNom(void)
{
  int Value;
  this->get_TNom((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_TNom(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TNom"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_CodeNom(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeNom"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprNomDispT<T>::get_CodeNom(void)
{
  int Value;
  this->get_CodeNom((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_CodeNom(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeNom"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_NameNom(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameNom"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_NameNom(void)
{
  BSTR Value;
  this->get_NameNom((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_NameNom(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameNom"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_FNameNom(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FNameNom"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_FNameNom(void)
{
  BSTR Value;
  this->get_FNameNom((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_FNameNom(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FNameNom"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_KrNameNom(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KrNameNom"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_KrNameNom(void)
{
  BSTR Value;
  this->get_KrNameNom((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_KrNameNom(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KrNameNom"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_IdBasEdNom(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdBasEdNom"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_IdBasEdNom(void)
{
  BSTR Value;
  this->get_IdBasEdNom((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_IdBasEdNom(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdBasEdNom"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_IdOsnEdNom(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdOsnEdNom"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_IdOsnEdNom(void)
{
  BSTR Value;
  this->get_IdOsnEdNom((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_IdOsnEdNom(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdOsnEdNom"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_IdGrpNom(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdGrpNom"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_IdGrpNom(void)
{
  BSTR Value;
  this->get_IdGrpNom((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_IdGrpNom(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdGrpNom"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_ArtNom(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ArtNom"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_ArtNom(void)
{
  BSTR Value;
  this->get_ArtNom((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_ArtNom(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ArtNom"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_GID_SNom(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GID_SNom"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_GID_SNom(void)
{
  BSTR Value;
  this->get_GID_SNom((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_GID_SNom(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GID_SNom"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprNomDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_AllElement(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllElement"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprNomDispT<T>::get_AllElement(void)
{
  int Value;
  this->get_AllElement((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_AllElement(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllElement"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_IdTypePrice(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdTypePrice"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_IdTypePrice(void)
{
  BSTR Value;
  this->get_IdTypePrice((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_IdTypePrice(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdTypePrice"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::OpenTable(BSTR Grp/*[in]*/, int All/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(17));
  TAutoArgs<2> _args;
  _args[1] = Grp /*[VT_BSTR:0]*/;
  _args[2] = All /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::OpenElement(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenElement"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::NewElement(BSTR IdGrp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewElement"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = IdGrp /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::SaveElement()
{
  _TDispID _dispid(*this, OLETEXT("SaveElement"), DISPID(20));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::DeleteElement(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteElement"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::ChancheGrp(BSTR NewGrp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChancheGrp"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = NewGrp /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::FindPoCodu(int Code/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindPoCodu"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Code /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdElement"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = gid /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Id /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR Id;
  this->GetIdElement(gid, (BSTR*)&Id);
  return Id;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetGidElement"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(gid /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::GetGidElement(BSTR Id/*[in]*/)
{
  BSTR gid;
  this->GetGidElement(Id, (BSTR*)&gid);
  return gid;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEOF"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprNomDispT<T>::get_TableEOF(void)
{
  int Value;
  this->get_TableEOF((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(28));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(29));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprEd
// Interface: IOleDMSprEd
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_IdEd(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdEd(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_IdEd(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdEd((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_IdEd(BSTR Value/*[in]*/)
{
  return (*this)->set_IdEd(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_NameEd(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NameEd(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_NameEd(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NameEd((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_NameEd(BSTR Value/*[in]*/)
{
  return (*this)->set_NameEd(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_KFEd(double* Value/*[out,retval]*/)
{
  return (*this)->get_KFEd(Value);
}

template <class T> double __fastcall
TCOMIOleDMSprEdT<T>::get_KFEd(void)
{
  double Value;
  OLECHECK(this->get_KFEd((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_KFEd(double Value/*[in]*/)
{
  return (*this)->set_KFEd(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_TShEd(int* Value/*[out,retval]*/)
{
  return (*this)->get_TShEd(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprEdT<T>::get_TShEd(void)
{
  int Value;
  OLECHECK(this->get_TShEd((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_TShEd(int Value/*[in]*/)
{
  return (*this)->set_TShEd(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_ShEd(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ShEd(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_ShEd(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ShEd((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_ShEd(BSTR Value/*[in]*/)
{
  return (*this)->set_ShEd(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_IdNomEd(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdNomEd(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_IdNomEd(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdNomEd((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_IdNomEd(BSTR Value/*[in]*/)
{
  return (*this)->set_IdNomEd(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_IdOKEIEd(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdOKEIEd(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_IdOKEIEd(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdOKEIEd((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_IdOKEIEd(BSTR Value/*[in]*/)
{
  return (*this)->set_IdOKEIEd(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_NeIspEd(int* Value/*[out,retval]*/)
{
  return (*this)->get_NeIspEd(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprEdT<T>::get_NeIspEd(void)
{
  int Value;
  OLECHECK(this->get_NeIspEd((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_NeIspEd(int Value/*[in]*/)
{
  return (*this)->set_NeIspEd(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_GID_SEd(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_GID_SEd(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_GID_SEd(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_GID_SEd((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_GID_SEd(BSTR Value/*[in]*/)
{
  return (*this)->set_GID_SEd(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprEdT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEOF(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprEdT<T>::get_TableEOF(void)
{
  int Value;
  OLECHECK(this->get_TableEOF((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::OpenTable(BSTR IdNom/*[in]*/)
{
  return (*this)->OpenTable(IdNom);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::OpenElement(BSTR Id/*[in]*/)
{
  return (*this)->OpenElement(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::NewElement(BSTR IdNom/*[in]*/)
{
  return (*this)->NewElement(IdNom);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::SaveElement(void)
{
  return (*this)->SaveElement();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::DeleteElement(BSTR Id/*[in]*/)
{
  return (*this)->DeleteElement(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::NewShtrihCod(void)
{
  return (*this)->NewShtrihCod();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::FindEdPoSh(BSTR ShtrihCod/*[in]*/)
{
  return (*this)->FindEdPoSh(ShtrihCod);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/)
{
  return (*this)->GetIdElement(gid, Id);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR Id = 0;
  OLECHECK(this->GetIdElement(gid/*[in]*/, (BSTR*)&Id));
  return Id;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  return (*this)->GetGidElement(Id, gid);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::GetGidElement(BSTR Id/*[in]*/)
{
  BSTR gid = 0;
  OLECHECK(this->GetGidElement(Id/*[in]*/, (BSTR*)&gid));
  return gid;
}

// *********************************************************************//
// DispIntf:  IOleDMSprEd
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A7FF2337-C284-4BDC-84C5-5EB62FD8058C}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_IdEd(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdEd"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_IdEd(void)
{
  BSTR Value;
  this->get_IdEd((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_IdEd(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdEd"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_NameEd(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameEd"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_NameEd(void)
{
  BSTR Value;
  this->get_NameEd((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_NameEd(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameEd"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_KFEd(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KFEd"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMSprEdDispT<T>::get_KFEd(void)
{
  double Value;
  this->get_KFEd((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_KFEd(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KFEd"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_TShEd(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TShEd"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprEdDispT<T>::get_TShEd(void)
{
  int Value;
  this->get_TShEd((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_TShEd(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TShEd"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_ShEd(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShEd"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_ShEd(void)
{
  BSTR Value;
  this->get_ShEd((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_ShEd(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShEd"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_IdNomEd(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdNomEd"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_IdNomEd(void)
{
  BSTR Value;
  this->get_IdNomEd((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_IdNomEd(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdNomEd"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_IdOKEIEd(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdOKEIEd"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_IdOKEIEd(void)
{
  BSTR Value;
  this->get_IdOKEIEd((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_IdOKEIEd(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdOKEIEd"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_NeIspEd(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NeIspEd"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprEdDispT<T>::get_NeIspEd(void)
{
  int Value;
  this->get_NeIspEd((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_NeIspEd(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NeIspEd"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_GID_SEd(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GID_SEd"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_GID_SEd(void)
{
  BSTR Value;
  this->get_GID_SEd((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_GID_SEd(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GID_SEd"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprEdDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEOF"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprEdDispT<T>::get_TableEOF(void)
{
  int Value;
  this->get_TableEOF((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::OpenTable(BSTR IdNom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = IdNom /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::OpenElement(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenElement"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::NewElement(BSTR IdNom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewElement"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = IdNom /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::SaveElement()
{
  _TDispID _dispid(*this, OLETEXT("SaveElement"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::DeleteElement(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteElement"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::NewShtrihCod()
{
  _TDispID _dispid(*this, OLETEXT("NewShtrihCod"), DISPID(20));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::FindEdPoSh(BSTR ShtrihCod/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindEdPoSh"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = ShtrihCod /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdElement"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = gid /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Id /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR Id;
  this->GetIdElement(gid, (BSTR*)&Id);
  return Id;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::GetGidElement(BSTR Id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetGidElement"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(gid /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::GetGidElement(BSTR Id/*[in]*/)
{
  BSTR gid;
  this->GetGidElement(Id, (BSTR*)&gid);
  return gid;
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMDocRepKKM
// Interface: IOleDMDocRepKKM
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocRepKKMT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllIDDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllIDDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocAllIDDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllPOSDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllPOSDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllPOSDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocAllPOSDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllPOSDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllPRDOC(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllPRDOC(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllPRDOC(void)
{
  int Value;
  OLECHECK(this->get_DocAllPRDOC((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocAllPRDOC(int Value/*[in]*/)
{
  return (*this)->set_DocAllPRDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllNUMDOC(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllNUMDOC(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllNUMDOC(void)
{
  int Value;
  OLECHECK(this->get_DocAllNUMDOC((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocAllNUMDOC(int Value/*[in]*/)
{
  return (*this)->set_DocAllNUMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDFIRMDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllIDFIRMDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDFIRMDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocAllIDFIRMDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDFIRMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDSKLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllIDSKLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDSKLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocAllIDSKLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDSKLDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDKLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllIDKLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDKLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocAllIDKLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDKLDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllSUMDOC(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllSUMDOC(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllSUMDOC(void)
{
  double Value;
  OLECHECK(this->get_DocAllSUMDOC((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocAllSUMDOC(double Value/*[in]*/)
{
  return (*this)->set_DocAllSUMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllFNAME_USER(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllFNAME_USER(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllFNAME_USER(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllFNAME_USER((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDUSERDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllIDUSERDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDUSERDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocAllIDUSERDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDUSERDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllIDDOGDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDDOGDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllIDDOGDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDDOGDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocAllIDDOGDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDDOGDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllNAME_SDOG(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllNAME_SDOG(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllNAME_SDOG(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllNAME_SDOG((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllNAMEKLIENT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllNAMEKLIENT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllNAMEKLIENT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllNAMEKLIENT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllGID_DOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllGID_DOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllGID_DOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocAllGID_DOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllGID_DOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocID_DREPKKM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocID_DREPKKM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocID_DREPKKM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocID_DREPKKM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocID_DREPKKM(BSTR Value/*[in]*/)
{
  return (*this)->set_DocID_DREPKKM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocGID_DREPKKM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocGID_DREPKKM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocGID_DREPKKM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocGID_DREPKKM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocGID_DREPKKM(BSTR Value/*[in]*/)
{
  return (*this)->set_DocGID_DREPKKM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocIDDOC_DREPKKM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDDOC_DREPKKM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocIDDOC_DREPKKM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDDOC_DREPKKM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocIDDOC_DREPKKM(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDDOC_DREPKKM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocIDKKM_DREPKKM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDKKM_DREPKKM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocIDKKM_DREPKKM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDKKM_DREPKKM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocIDKKM_DREPKKM(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDKKM_DREPKKM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocPRIM_DREPKKM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocPRIM_DREPKKM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocPRIM_DREPKKM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocPRIM_DREPKKM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocPRIM_DREPKKM(BSTR Value/*[in]*/)
{
  return (*this)->set_DocPRIM_DREPKKM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocOPLNAL_DREPKKM(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocOPLNAL_DREPKKM(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocOPLNAL_DREPKKM(void)
{
  double Value;
  OLECHECK(this->get_DocOPLNAL_DREPKKM((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocOPLNAL_DREPKKM(double Value/*[in]*/)
{
  return (*this)->set_DocOPLNAL_DREPKKM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocOPLPC_DREPKKM(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocOPLPC_DREPKKM(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocOPLPC_DREPKKM(void)
{
  double Value;
  OLECHECK(this->get_DocOPLPC_DREPKKM((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocOPLPC_DREPKKM(double Value/*[in]*/)
{
  return (*this)->set_DocOPLPC_DREPKKM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocNKL_DREPKKM(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocNKL_DREPKKM(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocNKL_DREPKKM(void)
{
  int Value;
  OLECHECK(this->get_DocNKL_DREPKKM((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocNKL_DREPKKM(int Value/*[in]*/)
{
  return (*this)->set_DocNKL_DREPKKM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocSK_DREPKKM(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocSK_DREPKKM(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocSK_DREPKKM(void)
{
  double Value;
  OLECHECK(this->get_DocSK_DREPKKM((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocSK_DREPKKM(double Value/*[in]*/)
{
  return (*this)->set_DocSK_DREPKKM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocNAD_DREPKKM(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocNAD_DREPKKM(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocNAD_DREPKKM(void)
{
  double Value;
  OLECHECK(this->get_DocNAD_DREPKKM((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocNAD_DREPKKM(double Value/*[in]*/)
{
  return (*this)->set_DocNAD_DREPKKM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocDVREG_DREPKKM(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocDVREG_DREPKKM(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocDVREG_DREPKKM(void)
{
  int Value;
  OLECHECK(this->get_DocDVREG_DREPKKM((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocDVREG_DREPKKM(int Value/*[in]*/)
{
  return (*this)->set_DocDVREG_DREPKKM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocNAMEKKM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocNAMEKKM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocNAMEKKM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocNAMEKKM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllNAMEFIRM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllNAMEFIRM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllNAMEFIRM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllNAMEFIRM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllNAMESKLAD(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllNAMESKLAD(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllNAMESKLAD(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllNAMESKLAD((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTID_DREPKKMT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTID_DREPKKMT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTID_DREPKKMT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTID_DREPKKMT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocTID_DREPKKMT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTID_DREPKKMT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTGID_DREPKKMT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTGID_DREPKKMT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTGID_DREPKKMT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTGID_DREPKKMT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocTGID_DREPKKMT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTGID_DREPKKMT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTIDDOC_DREPKKMT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDDOC_DREPKKMT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTIDDOC_DREPKKMT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDDOC_DREPKKMT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocTIDDOC_DREPKKMT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDDOC_DREPKKMT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTIDNOM_DREPKKMT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDNOM_DREPKKMT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTIDNOM_DREPKKMT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDNOM_DREPKKMT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocTIDNOM_DREPKKMT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDNOM_DREPKKMT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTIDED_DREPKKMT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDED_DREPKKMT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTIDED_DREPKKMT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDED_DREPKKMT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocTIDED_DREPKKMT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDED_DREPKKMT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTKOL_DREPKKMT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTKOL_DREPKKMT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTKOL_DREPKKMT(void)
{
  double Value;
  OLECHECK(this->get_DocTKOL_DREPKKMT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocTKOL_DREPKKMT(double Value/*[in]*/)
{
  return (*this)->set_DocTKOL_DREPKKMT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTKF_DREPKKMT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTKF_DREPKKMT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTKF_DREPKKMT(void)
{
  double Value;
  OLECHECK(this->get_DocTKF_DREPKKMT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocTKF_DREPKKMT(double Value/*[in]*/)
{
  return (*this)->set_DocTKF_DREPKKMT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTSUM_DREPKKMT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTSUM_DREPKKMT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTSUM_DREPKKMT(void)
{
  double Value;
  OLECHECK(this->get_DocTSUM_DREPKKMT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocTSUM_DREPKKMT(double Value/*[in]*/)
{
  return (*this)->set_DocTSUM_DREPKKMT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTSK_DREPKKMT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTSK_DREPKKMT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTSK_DREPKKMT(void)
{
  double Value;
  OLECHECK(this->get_DocTSK_DREPKKMT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocTSK_DREPKKMT(double Value/*[in]*/)
{
  return (*this)->set_DocTSK_DREPKKMT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTNAD_REPKKMT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTNAD_REPKKMT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTNAD_REPKKMT(void)
{
  double Value;
  OLECHECK(this->get_DocTNAD_REPKKMT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocTNAD_REPKKMT(double Value/*[in]*/)
{
  return (*this)->set_DocTNAD_REPKKMT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTPRICEFULL_DREPKKMT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTPRICEFULL_DREPKKMT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTPRICEFULL_DREPKKMT(void)
{
  double Value;
  OLECHECK(this->get_DocTPRICEFULL_DREPKKMT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocTPRICEFULL_DREPKKMT(double Value/*[in]*/)
{
  return (*this)->set_DocTPRICEFULL_DREPKKMT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTNAMENOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTNAMENOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTNAMENOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTNAMENOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTNAMEED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTNAMEED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTNAMEED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTNAMEED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTTNOM(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocTTNOM(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTTNOM(void)
{
  int Value;
  OLECHECK(this->get_DocTTNOM((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTPRICE_DREPKKMT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTPRICE_DREPKKMT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocTPRICE_DREPKKMT(void)
{
  double Value;
  OLECHECK(this->get_DocTPRICE_DREPKKMT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocTPRICE_DREPKKMT(double Value/*[in]*/)
{
  return (*this)->set_DocTPRICE_DREPKKMT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllTDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllTDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllTDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllTDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocAllTDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllTDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEOF(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocRepKKMT<T>::get_TableEOF(void)
{
  int Value;
  OLECHECK(this->get_TableEOF((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::NewDoc(void)
{
  return (*this)->NewDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::OpenDoc(BSTR Id/*[in]*/)
{
  return (*this)->OpenDoc(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::SaveDoc(void)
{
  return (*this)->SaveDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::DvRegDoc(void)
{
  return (*this)->DvRegDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::CancelDvRegDoc(void)
{
  return (*this)->CancelDvRegDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::DeleteDoc(BSTR Id/*[in]*/)
{
  return (*this)->DeleteDoc(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::AddDocNewString(void)
{
  return (*this)->AddDocNewString();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::DeleteStringDoc(void)
{
  return (*this)->DeleteStringDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::CloseDoc(void)
{
  return (*this)->CloseDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_PrefiksDoc(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_PrefiksDoc(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_PrefiksDoc(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_PrefiksDoc((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_PrefiksDoc(BSTR Value/*[in]*/)
{
  return (*this)->set_PrefiksDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_NameBase(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NameBase(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_NameBase(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NameBase((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDBASE_GALLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRepKKMT<T>::get_DocAllIDBASE_GALLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRepKKMT<T>::set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDBASE_GALLDOC(Value);
}

// *********************************************************************//
// DispIntf:  IOleDMDocRepKKM
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {500BC744-0B7A-4DB5-AF7C-6B6B296C3B8B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocRepKKMDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllIDDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDDOC"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllIDDOC(void)
{
  BSTR Value;
  this->get_DocAllIDDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocAllIDDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDDOC"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPOSDOC"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllPOSDOC(void)
{
  BSTR Value;
  this->get_DocAllPOSDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocAllPOSDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPOSDOC"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllPRDOC(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPRDOC"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllPRDOC(void)
{
  int Value;
  this->get_DocAllPRDOC((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocAllPRDOC(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPRDOC"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllNUMDOC(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNUMDOC"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllNUMDOC(void)
{
  int Value;
  this->get_DocAllNUMDOC((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocAllNUMDOC(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNUMDOC"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDFIRMDOC"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllIDFIRMDOC(void)
{
  BSTR Value;
  this->get_DocAllIDFIRMDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocAllIDFIRMDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDFIRMDOC"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDSKLDOC"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllIDSKLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDSKLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocAllIDSKLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDSKLDOC"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDKLDOC"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllIDKLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDKLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocAllIDKLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDKLDOC"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllSUMDOC(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllSUMDOC"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllSUMDOC(void)
{
  double Value;
  this->get_DocAllSUMDOC((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocAllSUMDOC(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllSUMDOC"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllFNAME_USER(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllFNAME_USER"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllFNAME_USER(void)
{
  BSTR Value;
  this->get_DocAllFNAME_USER((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDUSERDOC"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllIDUSERDOC(void)
{
  BSTR Value;
  this->get_DocAllIDUSERDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocAllIDUSERDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDUSERDOC"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllIDDOGDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDDOGDOC"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllIDDOGDOC(void)
{
  BSTR Value;
  this->get_DocAllIDDOGDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocAllIDDOGDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDDOGDOC"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllNAME_SDOG(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNAME_SDOG"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllNAME_SDOG(void)
{
  BSTR Value;
  this->get_DocAllNAME_SDOG((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllNAMEKLIENT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNAMEKLIENT"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllNAMEKLIENT(void)
{
  BSTR Value;
  this->get_DocAllNAMEKLIENT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllGID_DOC"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllGID_DOC(void)
{
  BSTR Value;
  this->get_DocAllGID_DOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocAllGID_DOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllGID_DOC"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocID_DREPKKM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocID_DREPKKM"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocID_DREPKKM(void)
{
  BSTR Value;
  this->get_DocID_DREPKKM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocID_DREPKKM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocID_DREPKKM"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocGID_DREPKKM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocGID_DREPKKM"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocGID_DREPKKM(void)
{
  BSTR Value;
  this->get_DocGID_DREPKKM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocGID_DREPKKM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocGID_DREPKKM"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocIDDOC_DREPKKM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDDOC_DREPKKM"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocIDDOC_DREPKKM(void)
{
  BSTR Value;
  this->get_DocIDDOC_DREPKKM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocIDDOC_DREPKKM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDDOC_DREPKKM"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocIDKKM_DREPKKM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDKKM_DREPKKM"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocIDKKM_DREPKKM(void)
{
  BSTR Value;
  this->get_DocIDKKM_DREPKKM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocIDKKM_DREPKKM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDKKM_DREPKKM"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocPRIM_DREPKKM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocPRIM_DREPKKM"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocPRIM_DREPKKM(void)
{
  BSTR Value;
  this->get_DocPRIM_DREPKKM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocPRIM_DREPKKM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocPRIM_DREPKKM"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocOPLNAL_DREPKKM(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocOPLNAL_DREPKKM"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRepKKMDispT<T>::get_DocOPLNAL_DREPKKM(void)
{
  double Value;
  this->get_DocOPLNAL_DREPKKM((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocOPLNAL_DREPKKM(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocOPLNAL_DREPKKM"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocOPLPC_DREPKKM(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocOPLPC_DREPKKM"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRepKKMDispT<T>::get_DocOPLPC_DREPKKM(void)
{
  double Value;
  this->get_DocOPLPC_DREPKKM((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocOPLPC_DREPKKM(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocOPLPC_DREPKKM"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocNKL_DREPKKM(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocNKL_DREPKKM"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocRepKKMDispT<T>::get_DocNKL_DREPKKM(void)
{
  int Value;
  this->get_DocNKL_DREPKKM((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocNKL_DREPKKM(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocNKL_DREPKKM"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocSK_DREPKKM(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocSK_DREPKKM"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRepKKMDispT<T>::get_DocSK_DREPKKM(void)
{
  double Value;
  this->get_DocSK_DREPKKM((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocSK_DREPKKM(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocSK_DREPKKM"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocNAD_DREPKKM(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocNAD_DREPKKM"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRepKKMDispT<T>::get_DocNAD_DREPKKM(void)
{
  double Value;
  this->get_DocNAD_DREPKKM((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocNAD_DREPKKM(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocNAD_DREPKKM"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocDVREG_DREPKKM(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocDVREG_DREPKKM"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocRepKKMDispT<T>::get_DocDVREG_DREPKKM(void)
{
  int Value;
  this->get_DocDVREG_DREPKKM((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocDVREG_DREPKKM(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocDVREG_DREPKKM"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocNAMEKKM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocNAMEKKM"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocNAMEKKM(void)
{
  BSTR Value;
  this->get_DocNAMEKKM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllNAMEFIRM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNAMEFIRM"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllNAMEFIRM(void)
{
  BSTR Value;
  this->get_DocAllNAMEFIRM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllNAMESKLAD(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNAMESKLAD"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllNAMESKLAD(void)
{
  BSTR Value;
  this->get_DocAllNAMESKLAD((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTID_DREPKKMT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTID_DREPKKMT"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTID_DREPKKMT(void)
{
  BSTR Value;
  this->get_DocTID_DREPKKMT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocTID_DREPKKMT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTID_DREPKKMT"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTGID_DREPKKMT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTGID_DREPKKMT"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTGID_DREPKKMT(void)
{
  BSTR Value;
  this->get_DocTGID_DREPKKMT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocTGID_DREPKKMT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTGID_DREPKKMT"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTIDDOC_DREPKKMT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDDOC_DREPKKMT"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTIDDOC_DREPKKMT(void)
{
  BSTR Value;
  this->get_DocTIDDOC_DREPKKMT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocTIDDOC_DREPKKMT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDDOC_DREPKKMT"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTIDNOM_DREPKKMT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDNOM_DREPKKMT"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTIDNOM_DREPKKMT(void)
{
  BSTR Value;
  this->get_DocTIDNOM_DREPKKMT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocTIDNOM_DREPKKMT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDNOM_DREPKKMT"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTIDED_DREPKKMT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDED_DREPKKMT"), DISPID(35));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTIDED_DREPKKMT(void)
{
  BSTR Value;
  this->get_DocTIDED_DREPKKMT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocTIDED_DREPKKMT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDED_DREPKKMT"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTKOL_DREPKKMT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKOL_DREPKKMT"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTKOL_DREPKKMT(void)
{
  double Value;
  this->get_DocTKOL_DREPKKMT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocTKOL_DREPKKMT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKOL_DREPKKMT"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTKF_DREPKKMT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKF_DREPKKMT"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTKF_DREPKKMT(void)
{
  double Value;
  this->get_DocTKF_DREPKKMT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocTKF_DREPKKMT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKF_DREPKKMT"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTSUM_DREPKKMT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTSUM_DREPKKMT"), DISPID(38));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTSUM_DREPKKMT(void)
{
  double Value;
  this->get_DocTSUM_DREPKKMT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocTSUM_DREPKKMT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTSUM_DREPKKMT"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTSK_DREPKKMT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTSK_DREPKKMT"), DISPID(39));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTSK_DREPKKMT(void)
{
  double Value;
  this->get_DocTSK_DREPKKMT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocTSK_DREPKKMT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTSK_DREPKKMT"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTNAD_REPKKMT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTNAD_REPKKMT"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTNAD_REPKKMT(void)
{
  double Value;
  this->get_DocTNAD_REPKKMT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocTNAD_REPKKMT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTNAD_REPKKMT"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTPRICEFULL_DREPKKMT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTPRICEFULL_DREPKKMT"), DISPID(41));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTPRICEFULL_DREPKKMT(void)
{
  double Value;
  this->get_DocTPRICEFULL_DREPKKMT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocTPRICEFULL_DREPKKMT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTPRICEFULL_DREPKKMT"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTNAMENOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTNAMENOM"), DISPID(42));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTNAMENOM(void)
{
  BSTR Value;
  this->get_DocTNAMENOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTNAMEED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTNAMEED"), DISPID(43));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTNAMEED(void)
{
  BSTR Value;
  this->get_DocTNAMEED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTTNOM(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTTNOM"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTTNOM(void)
{
  int Value;
  this->get_DocTTNOM((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTPRICE_DREPKKMT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTPRICE_DREPKKMT"), DISPID(45));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRepKKMDispT<T>::get_DocTPRICE_DREPKKMT(void)
{
  double Value;
  this->get_DocTPRICE_DREPKKMT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocTPRICE_DREPKKMT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTPRICE_DREPKKMT"), DISPID(45));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllTDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllTDOC"), DISPID(46));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllTDOC(void)
{
  BSTR Value;
  this->get_DocAllTDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocAllTDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllTDOC"), DISPID(46));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(47));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(48));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEOF"), DISPID(49));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocRepKKMDispT<T>::get_TableEOF(void)
{
  int Value;
  this->get_TableEOF((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::NewDoc()
{
  _TDispID _dispid(*this, OLETEXT("NewDoc"), DISPID(50));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::OpenDoc(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDoc"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::SaveDoc()
{
  _TDispID _dispid(*this, OLETEXT("SaveDoc"), DISPID(52));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::DvRegDoc()
{
  _TDispID _dispid(*this, OLETEXT("DvRegDoc"), DISPID(53));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::CancelDvRegDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelDvRegDoc"), DISPID(54));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::DeleteDoc(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteDoc"), DISPID(55));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::AddDocNewString()
{
  _TDispID _dispid(*this, OLETEXT("AddDocNewString"), DISPID(56));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::DeleteStringDoc()
{
  _TDispID _dispid(*this, OLETEXT("DeleteStringDoc"), DISPID(57));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::CloseDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseDoc"), DISPID(58));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_PrefiksDoc(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrefiksDoc"), DISPID(59));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_PrefiksDoc(void)
{
  BSTR Value;
  this->get_PrefiksDoc((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_PrefiksDoc(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrefiksDoc"), DISPID(59));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_NameBase(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameBase"), DISPID(60));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_NameBase(void)
{
  BSTR Value;
  this->get_NameBase((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDBASE_GALLDOC"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRepKKMDispT<T>::get_DocAllIDBASE_GALLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRepKKMDispT<T>::set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDBASE_GALLDOC"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprGrpNom
// Interface: IOleDMSprGrpNom
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_ElIDGN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElIDGN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprGrpNomT<T>::get_ElIDGN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElIDGN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::set_ElIDGN(BSTR Value/*[in]*/)
{
  return (*this)->set_ElIDGN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_ElNAMEGN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElNAMEGN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprGrpNomT<T>::get_ElNAMEGN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElNAMEGN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::set_ElNAMEGN(BSTR Value/*[in]*/)
{
  return (*this)->set_ElNAMEGN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_ElIDGRPGN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElIDGRPGN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprGrpNomT<T>::get_ElIDGRPGN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElIDGRPGN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::set_ElIDGRPGN(BSTR Value/*[in]*/)
{
  return (*this)->set_ElIDGRPGN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_ElGID_SGRPNOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElGID_SGRPNOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprGrpNomT<T>::get_ElGID_SGRPNOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElGID_SGRPNOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::set_ElGID_SGRPNOM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElGID_SGRPNOM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprGrpNomT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprGrpNomT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEOF(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprGrpNomT<T>::get_TableEOF(void)
{
  int Value;
  OLECHECK(this->get_TableEOF((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::OpenTable(void)
{
  return (*this)->OpenTable();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::OpenElement(BSTR Id/*[in]*/)
{
  return (*this)->OpenElement(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::NewElement(BSTR IdGrp/*[in]*/)
{
  return (*this)->NewElement(IdGrp);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::SaveElement(void)
{
  return (*this)->SaveElement();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::DeleteElement(BSTR Id/*[in]*/)
{
  return (*this)->DeleteElement(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/)
{
  return (*this)->GetIdElement(gid, Id);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprGrpNomT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR Id = 0;
  OLECHECK(this->GetIdElement(gid/*[in]*/, (BSTR*)&Id));
  return Id;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

// *********************************************************************//
// DispIntf:  IOleDMSprGrpNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {122A380E-AADA-46E5-AE13-7BC1C518942C}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_ElIDGN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElIDGN"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprGrpNomDispT<T>::get_ElIDGN(void)
{
  BSTR Value;
  this->get_ElIDGN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::set_ElIDGN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElIDGN"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_ElNAMEGN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElNAMEGN"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprGrpNomDispT<T>::get_ElNAMEGN(void)
{
  BSTR Value;
  this->get_ElNAMEGN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::set_ElNAMEGN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElNAMEGN"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_ElIDGRPGN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElIDGRPGN"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprGrpNomDispT<T>::get_ElIDGRPGN(void)
{
  BSTR Value;
  this->get_ElIDGRPGN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::set_ElIDGRPGN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElIDGRPGN"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_ElGID_SGRPNOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElGID_SGRPNOM"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprGrpNomDispT<T>::get_ElGID_SGRPNOM(void)
{
  BSTR Value;
  this->get_ElGID_SGRPNOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::set_ElGID_SGRPNOM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElGID_SGRPNOM"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprGrpNomDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprGrpNomDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEOF"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprGrpNomDispT<T>::get_TableEOF(void)
{
  int Value;
  this->get_TableEOF((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::OpenTable()
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::OpenElement(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenElement"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::NewElement(BSTR IdGrp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewElement"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = IdGrp /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::SaveElement()
{
  _TDispID _dispid(*this, OLETEXT("SaveElement"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::DeleteElement(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteElement"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdElement"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = gid /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Id /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprGrpNomDispT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR Id;
  this->GetIdElement(gid, (BSTR*)&Id);
  return Id;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(15));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprTypePrice
// Interface: IOleDMSprTypePrice
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprTypePriceT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprTypePriceT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEOF(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprTypePriceT<T>::get_TableEOF(void)
{
  int Value;
  OLECHECK(this->get_TableEOF((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::get_ElID_TPRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElID_TPRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprTypePriceT<T>::get_ElID_TPRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElID_TPRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::set_ElID_TPRICE(BSTR Value/*[in]*/)
{
  return (*this)->set_ElID_TPRICE(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::get_ElNAME_TPRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElNAME_TPRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprTypePriceT<T>::get_ElNAME_TPRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElNAME_TPRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::set_ElNAME_TPRICE(BSTR Value/*[in]*/)
{
  return (*this)->set_ElNAME_TPRICE(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::get_ElGID_STPRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElGID_STPRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprTypePriceT<T>::get_ElGID_STPRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElGID_STPRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::set_ElGID_STPRICE(BSTR Value/*[in]*/)
{
  return (*this)->set_ElGID_STPRICE(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::OpenTable(void)
{
  return (*this)->OpenTable();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::OpenElement(BSTR Id/*[in]*/)
{
  return (*this)->OpenElement(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::NewElement(void)
{
  return (*this)->NewElement();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::SaveElement(void)
{
  return (*this)->SaveElement();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::DeleteElement(BSTR Id/*[in]*/)
{
  return (*this)->DeleteElement(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::GetIDTypePrice(BSTR name/*[in]*/, BSTR* Id/*[out,retval]*/)
{
  return (*this)->GetIDTypePrice(name, Id);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprTypePriceT<T>::GetIDTypePrice(BSTR name/*[in]*/)
{
  BSTR Id = 0;
  OLECHECK(this->GetIDTypePrice(name/*[in]*/, (BSTR*)&Id));
  return Id;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/)
{
  return (*this)->GetIdElement(gid, Id);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprTypePriceT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR Id = 0;
  OLECHECK(this->GetIdElement(gid/*[in]*/, (BSTR*)&Id));
  return Id;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::CloseElement(void)
{
  return (*this)->CloseElement();
}

// *********************************************************************//
// DispIntf:  IOleDMSprTypePrice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {03AE0B1D-6050-471A-AFA2-2F5E0B1ADDED}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprTypePriceDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprTypePriceDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEOF"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprTypePriceDispT<T>::get_TableEOF(void)
{
  int Value;
  this->get_TableEOF((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::get_ElID_TPRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElID_TPRICE"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprTypePriceDispT<T>::get_ElID_TPRICE(void)
{
  BSTR Value;
  this->get_ElID_TPRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::set_ElID_TPRICE(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElID_TPRICE"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::get_ElNAME_TPRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElNAME_TPRICE"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprTypePriceDispT<T>::get_ElNAME_TPRICE(void)
{
  BSTR Value;
  this->get_ElNAME_TPRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::set_ElNAME_TPRICE(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElNAME_TPRICE"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::get_ElGID_STPRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElGID_STPRICE"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprTypePriceDispT<T>::get_ElGID_STPRICE(void)
{
  BSTR Value;
  this->get_ElGID_STPRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::set_ElGID_STPRICE(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElGID_STPRICE"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::OpenTable()
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::OpenElement(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenElement"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::NewElement()
{
  _TDispID _dispid(*this, OLETEXT("NewElement"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::SaveElement()
{
  _TDispID _dispid(*this, OLETEXT("SaveElement"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::DeleteElement(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteElement"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::GetIDTypePrice(BSTR name/*[in]*/, BSTR* Id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIDTypePrice"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Id /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprTypePriceDispT<T>::GetIDTypePrice(BSTR name/*[in]*/)
{
  BSTR Id;
  this->GetIDTypePrice(name, (BSTR*)&Id);
  return Id;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* Id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdElement"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = gid /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Id /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprTypePriceDispT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR Id;
  this->GetIdElement(gid, (BSTR*)&Id);
  return Id;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::CloseElement()
{
  _TDispID _dispid(*this, OLETEXT("CloseElement"), DISPID(16));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprPrice
// Interface: IOleDMSprPrice
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprPriceT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEOF(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprPriceT<T>::get_TableEOF(void)
{
  int Value;
  OLECHECK(this->get_TableEOF((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_ElID_PRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElID_PRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::get_ElID_PRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElID_PRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::set_ElID_PRICE(BSTR Value/*[in]*/)
{
  return (*this)->set_ElID_PRICE(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_ElIDNOM_PRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElIDNOM_PRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::get_ElIDNOM_PRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElIDNOM_PRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::set_ElIDNOM_PRICE(BSTR Value/*[in]*/)
{
  return (*this)->set_ElIDNOM_PRICE(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_ElIDTYPE_PRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElIDTYPE_PRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::get_ElIDTYPE_PRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElIDTYPE_PRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::set_ElIDTYPE_PRICE(BSTR Value/*[in]*/)
{
  return (*this)->set_ElIDTYPE_PRICE(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_ElZNACH_PRICE(double* Value/*[out,retval]*/)
{
  return (*this)->get_ElZNACH_PRICE(Value);
}

template <class T> double __fastcall
TCOMIOleDMSprPriceT<T>::get_ElZNACH_PRICE(void)
{
  double Value;
  OLECHECK(this->get_ElZNACH_PRICE((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::set_ElZNACH_PRICE(double Value/*[in]*/)
{
  return (*this)->set_ElZNACH_PRICE(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_ElGID_SPRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElGID_SPRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::get_ElGID_SPRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElGID_SPRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::set_ElGID_SPRICE(BSTR Value/*[in]*/)
{
  return (*this)->set_ElGID_SPRICE(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::OpenTable(BSTR IdNom/*[in]*/)
{
  return (*this)->OpenTable(IdNom);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::NewElement(void)
{
  return (*this)->NewElement();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::SaveElement(void)
{
  return (*this)->SaveElement();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::DeleteElement(BSTR Id/*[in]*/)
{
  return (*this)->DeleteElement(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::FindElement(BSTR IdTypePrice/*[in]*/, BSTR IdNom/*[in]*/, 
                                    int* kol_record/*[out,retval]*/)
{
  return (*this)->FindElement(IdTypePrice, IdNom, kol_record);
}

template <class T> int __fastcall
TCOMIOleDMSprPriceT<T>::FindElement(BSTR IdTypePrice/*[in]*/, BSTR IdNom/*[in]*/)
{
  int kol_record;
  OLECHECK(this->FindElement(IdTypePrice/*[in]*/, IdNom/*[in]*/, (int*)&kol_record));
  return kol_record;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_IdNom(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdNom(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::get_IdNom(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdNom((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::set_IdNom(BSTR Value/*[in]*/)
{
  return (*this)->set_IdNom(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_IdTypePrice(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdTypePrice(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::get_IdTypePrice(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdTypePrice((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::set_IdTypePrice(BSTR Value/*[in]*/)
{
  return (*this)->set_IdTypePrice(Value);
}

// *********************************************************************//
// DispIntf:  IOleDMSprPrice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {81AAC7FF-6A90-4E54-B3FE-AF265465B0EB}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprPriceDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEOF"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprPriceDispT<T>::get_TableEOF(void)
{
  int Value;
  this->get_TableEOF((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_ElID_PRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElID_PRICE"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::get_ElID_PRICE(void)
{
  BSTR Value;
  this->get_ElID_PRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::set_ElID_PRICE(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElID_PRICE"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_ElIDNOM_PRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElIDNOM_PRICE"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::get_ElIDNOM_PRICE(void)
{
  BSTR Value;
  this->get_ElIDNOM_PRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::set_ElIDNOM_PRICE(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElIDNOM_PRICE"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_ElIDTYPE_PRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElIDTYPE_PRICE"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::get_ElIDTYPE_PRICE(void)
{
  BSTR Value;
  this->get_ElIDTYPE_PRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::set_ElIDTYPE_PRICE(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElIDTYPE_PRICE"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_ElZNACH_PRICE(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElZNACH_PRICE"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMSprPriceDispT<T>::get_ElZNACH_PRICE(void)
{
  double Value;
  this->get_ElZNACH_PRICE((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::set_ElZNACH_PRICE(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElZNACH_PRICE"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_ElGID_SPRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElGID_SPRICE"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::get_ElGID_SPRICE(void)
{
  BSTR Value;
  this->get_ElGID_SPRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::set_ElGID_SPRICE(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElGID_SPRICE"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::OpenTable(BSTR IdNom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = IdNom /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::NewElement()
{
  _TDispID _dispid(*this, OLETEXT("NewElement"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::SaveElement()
{
  _TDispID _dispid(*this, OLETEXT("SaveElement"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::DeleteElement(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteElement"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::FindElement(BSTR IdTypePrice/*[in]*/, BSTR IdNom/*[in]*/, 
                                    int* kol_record/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindElement"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = IdTypePrice /*[VT_BSTR:0]*/;
  _args[2] = IdNom /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(kol_record /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprPriceDispT<T>::FindElement(BSTR IdTypePrice/*[in]*/, BSTR IdNom/*[in]*/)
{
  int kol_record;
  this->FindElement(IdTypePrice, IdNom, (int*)&kol_record);
  return kol_record;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_IdNom(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdNom"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::get_IdNom(void)
{
  BSTR Value;
  this->get_IdNom((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::set_IdNom(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdNom"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_IdTypePrice(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdTypePrice"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::get_IdTypePrice(void)
{
  BSTR Value;
  this->get_IdTypePrice((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::set_IdTypePrice(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdTypePrice"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMDocPer
// Interface: IOleDMDocPer
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocPerT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEOF(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocPerT<T>::get_TableEOF(void)
{
  int Value;
  OLECHECK(this->get_TableEOF((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllIDDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllIDDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocAllIDDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllPOSDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllPOSDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllPOSDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocAllPOSDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllPOSDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllPRDOC(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllPRDOC(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllPRDOC(void)
{
  int Value;
  OLECHECK(this->get_DocAllPRDOC((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocAllPRDOC(int Value/*[in]*/)
{
  return (*this)->set_DocAllPRDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllTDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllTDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllTDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllTDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocAllTDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllTDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllNUMDOC(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllNUMDOC(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllNUMDOC(void)
{
  int Value;
  OLECHECK(this->get_DocAllNUMDOC((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocAllNUMDOC(int Value/*[in]*/)
{
  return (*this)->set_DocAllNUMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDFIRMDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllIDFIRMDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDFIRMDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocAllIDFIRMDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDFIRMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDSKLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllIDSKLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDSKLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocAllIDSKLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDSKLDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDKLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllIDKLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDKLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocAllIDKLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDKLDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllSUMDOC(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllSUMDOC(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllSUMDOC(void)
{
  double Value;
  OLECHECK(this->get_DocAllSUMDOC((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocAllSUMDOC(double Value/*[in]*/)
{
  return (*this)->set_DocAllSUMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocIDPER(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDPER(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocIDPER(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDPER((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocIDPER(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDPER(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocIDDOCPER(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDDOCPER(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocIDDOCPER(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDDOCPER((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocIDDOCPER(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDDOCPER(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocIDSKLPOLPER(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDSKLPOLPER(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocIDSKLPOLPER(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDSKLPOLPER((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocIDSKLPOLPER(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDSKLPOLPER(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocPRIMPER(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocPRIMPER(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocPRIMPER(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocPRIMPER((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocPRIMPER(BSTR Value/*[in]*/)
{
  return (*this)->set_DocPRIMPER(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocTIDPERT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDPERT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocTIDPERT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDPERT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocTIDPERT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDPERT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocTIDDOCPERT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDDOCPERT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocTIDDOCPERT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDDOCPERT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocTIDDOCPERT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDDOCPERT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocTIDNOMPERT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDNOMPERT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocTIDNOMPERT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDNOMPERT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocTIDNOMPERT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDNOMPERT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocTIDEDPERT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDEDPERT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocTIDEDPERT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDEDPERT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocTIDEDPERT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDEDPERT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocTKOLPERT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTKOLPERT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocPerT<T>::get_DocTKOLPERT(void)
{
  double Value;
  OLECHECK(this->get_DocTKOLPERT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocTKOLPERT(double Value/*[in]*/)
{
  return (*this)->set_DocTKOLPERT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocTKFPERT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTKFPERT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocPerT<T>::get_DocTKFPERT(void)
{
  double Value;
  OLECHECK(this->get_DocTKFPERT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocTKFPERT(double Value/*[in]*/)
{
  return (*this)->set_DocTKFPERT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocTPRICEPERT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTPRICEPERT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocPerT<T>::get_DocTPRICEPERT(void)
{
  double Value;
  OLECHECK(this->get_DocTPRICEPERT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocTPRICEPERT(double Value/*[in]*/)
{
  return (*this)->set_DocTPRICEPERT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocTSUMPERT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTSUMPERT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocPerT<T>::get_DocTSUMPERT(void)
{
  double Value;
  OLECHECK(this->get_DocTSUMPERT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocTSUMPERT(double Value/*[in]*/)
{
  return (*this)->set_DocTSUMPERT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocTNAMENOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTNAMENOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocTNAMENOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTNAMENOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocTNAMEED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTNAMEED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocTNAMEED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTNAMEED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocTTNOM(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocTTNOM(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocPerT<T>::get_DocTTNOM(void)
{
  int Value;
  OLECHECK(this->get_DocTTNOM((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDUSERDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllIDUSERDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDUSERDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocAllIDUSERDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDUSERDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllGID_DOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllGID_DOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllGID_DOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocAllGID_DOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllGID_DOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocGID_DPER(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocGID_DPER(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocGID_DPER(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocGID_DPER((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocGID_DPER(BSTR Value/*[in]*/)
{
  return (*this)->set_DocGID_DPER(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocTGID_DPERT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTGID_DPERT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocTGID_DPERT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTGID_DPERT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocTGID_DPERT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTGID_DPERT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllFNAMEUSER(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllFNAMEUSER(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllFNAMEUSER((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::NewDoc(void)
{
  return (*this)->NewDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::OpenDoc(BSTR IdDoc/*[in]*/)
{
  return (*this)->OpenDoc(IdDoc);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::SaveDoc(void)
{
  return (*this)->SaveDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::DvRegDoc(void)
{
  return (*this)->DvRegDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::CancelDvRegDoc(void)
{
  return (*this)->CancelDvRegDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::AddDocNewString(void)
{
  return (*this)->AddDocNewString();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::DeleteStringDoc(void)
{
  return (*this)->DeleteStringDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::DeleteDoc(BSTR Id/*[in]*/)
{
  return (*this)->DeleteDoc(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::CloseDoc(void)
{
  return (*this)->CloseDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::GetIdDocPoNomeruDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/, 
                                          BSTR* IdDoc/*[out,retval]*/)
{
  return (*this)->GetIdDocPoNomeruDoc(number_doc, date_doc, IdDoc);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::GetIdDocPoNomeruDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/)
{
  BSTR IdDoc = 0;
  OLECHECK(this->GetIdDocPoNomeruDoc(number_doc/*[in]*/, date_doc/*[in]*/, (BSTR*)&IdDoc));
  return IdDoc;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_PrefiksDoc(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_PrefiksDoc(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_PrefiksDoc(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_PrefiksDoc((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_PrefiksDoc(BSTR Value/*[in]*/)
{
  return (*this)->set_PrefiksDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_NameBase(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NameBase(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_NameBase(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NameBase((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDBASE_GALLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPerT<T>::get_DocAllIDBASE_GALLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPerT<T>::set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDBASE_GALLDOC(Value);
}

// *********************************************************************//
// DispIntf:  IOleDMDocPer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {906D0C92-DE95-4FA2-9DE4-4E4DCA7242A1}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocPerDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEOF"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocPerDispT<T>::get_TableEOF(void)
{
  int Value;
  this->get_TableEOF((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocAllIDDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDDOC"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocAllIDDOC(void)
{
  BSTR Value;
  this->get_DocAllIDDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocAllIDDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDDOC"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPOSDOC"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocAllPOSDOC(void)
{
  BSTR Value;
  this->get_DocAllPOSDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocAllPOSDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPOSDOC"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocAllPRDOC(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPRDOC"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocPerDispT<T>::get_DocAllPRDOC(void)
{
  int Value;
  this->get_DocAllPRDOC((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocAllPRDOC(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPRDOC"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocAllTDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllTDOC"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocAllTDOC(void)
{
  BSTR Value;
  this->get_DocAllTDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocAllTDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllTDOC"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocAllNUMDOC(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNUMDOC"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocPerDispT<T>::get_DocAllNUMDOC(void)
{
  int Value;
  this->get_DocAllNUMDOC((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocAllNUMDOC(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNUMDOC"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDFIRMDOC"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocAllIDFIRMDOC(void)
{
  BSTR Value;
  this->get_DocAllIDFIRMDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocAllIDFIRMDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDFIRMDOC"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDSKLDOC"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocAllIDSKLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDSKLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocAllIDSKLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDSKLDOC"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDKLDOC"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocAllIDKLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDKLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocAllIDKLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDKLDOC"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocAllSUMDOC(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllSUMDOC"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocPerDispT<T>::get_DocAllSUMDOC(void)
{
  double Value;
  this->get_DocAllSUMDOC((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocAllSUMDOC(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllSUMDOC"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocIDPER(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDPER"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocIDPER(void)
{
  BSTR Value;
  this->get_DocIDPER((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocIDPER(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDPER"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocIDDOCPER(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDDOCPER"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocIDDOCPER(void)
{
  BSTR Value;
  this->get_DocIDDOCPER((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocIDDOCPER(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDDOCPER"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocIDSKLPOLPER(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDSKLPOLPER"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocIDSKLPOLPER(void)
{
  BSTR Value;
  this->get_DocIDSKLPOLPER((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocIDSKLPOLPER(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDSKLPOLPER"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocPRIMPER(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocPRIMPER"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocPRIMPER(void)
{
  BSTR Value;
  this->get_DocPRIMPER((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocPRIMPER(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocPRIMPER"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocTIDPERT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDPERT"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocTIDPERT(void)
{
  BSTR Value;
  this->get_DocTIDPERT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocTIDPERT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDPERT"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocTIDDOCPERT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDDOCPERT"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocTIDDOCPERT(void)
{
  BSTR Value;
  this->get_DocTIDDOCPERT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocTIDDOCPERT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDDOCPERT"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocTIDNOMPERT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDNOMPERT"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocTIDNOMPERT(void)
{
  BSTR Value;
  this->get_DocTIDNOMPERT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocTIDNOMPERT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDNOMPERT"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocTIDEDPERT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDEDPERT"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocTIDEDPERT(void)
{
  BSTR Value;
  this->get_DocTIDEDPERT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocTIDEDPERT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDEDPERT"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocTKOLPERT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKOLPERT"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocPerDispT<T>::get_DocTKOLPERT(void)
{
  double Value;
  this->get_DocTKOLPERT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocTKOLPERT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKOLPERT"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocTKFPERT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKFPERT"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocPerDispT<T>::get_DocTKFPERT(void)
{
  double Value;
  this->get_DocTKFPERT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocTKFPERT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKFPERT"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocTPRICEPERT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTPRICEPERT"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocPerDispT<T>::get_DocTPRICEPERT(void)
{
  double Value;
  this->get_DocTPRICEPERT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocTPRICEPERT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTPRICEPERT"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocTSUMPERT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTSUMPERT"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocPerDispT<T>::get_DocTSUMPERT(void)
{
  double Value;
  this->get_DocTSUMPERT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocTSUMPERT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTSUMPERT"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocTNAMENOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTNAMENOM"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocTNAMENOM(void)
{
  BSTR Value;
  this->get_DocTNAMENOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocTNAMEED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTNAMEED"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocTNAMEED(void)
{
  BSTR Value;
  this->get_DocTNAMEED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocTTNOM(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTTNOM"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocPerDispT<T>::get_DocTTNOM(void)
{
  int Value;
  this->get_DocTTNOM((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDUSERDOC"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocAllIDUSERDOC(void)
{
  BSTR Value;
  this->get_DocAllIDUSERDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocAllIDUSERDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDUSERDOC"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllGID_DOC"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocAllGID_DOC(void)
{
  BSTR Value;
  this->get_DocAllGID_DOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocAllGID_DOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllGID_DOC"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocGID_DPER(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocGID_DPER"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocGID_DPER(void)
{
  BSTR Value;
  this->get_DocGID_DPER((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocGID_DPER(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocGID_DPER"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocTGID_DPERT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTGID_DPERT"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocTGID_DPERT(void)
{
  BSTR Value;
  this->get_DocTGID_DPERT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocTGID_DPERT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTGID_DPERT"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllFNAMEUSER"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocAllFNAMEUSER(void)
{
  BSTR Value;
  this->get_DocAllFNAMEUSER((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::NewDoc()
{
  _TDispID _dispid(*this, OLETEXT("NewDoc"), DISPID(33));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::OpenDoc(BSTR IdDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDoc"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = IdDoc /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::SaveDoc()
{
  _TDispID _dispid(*this, OLETEXT("SaveDoc"), DISPID(35));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::DvRegDoc()
{
  _TDispID _dispid(*this, OLETEXT("DvRegDoc"), DISPID(36));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::CancelDvRegDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelDvRegDoc"), DISPID(37));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::AddDocNewString()
{
  _TDispID _dispid(*this, OLETEXT("AddDocNewString"), DISPID(38));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::DeleteStringDoc()
{
  _TDispID _dispid(*this, OLETEXT("DeleteStringDoc"), DISPID(39));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::DeleteDoc(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteDoc"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::CloseDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseDoc"), DISPID(41));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::GetIdDocPoNomeruDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/, 
                                          BSTR* IdDoc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdDocPoNomeruDoc"), DISPID(42));
  TAutoArgs<2> _args;
  _args[1] = number_doc /*[VT_INT:0]*/;
  _args[2] = date_doc /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(IdDoc /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::GetIdDocPoNomeruDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/)
{
  BSTR IdDoc;
  this->GetIdDocPoNomeruDoc(number_doc, date_doc, (BSTR*)&IdDoc);
  return IdDoc;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(43));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(44));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_PrefiksDoc(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrefiksDoc"), DISPID(47));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_PrefiksDoc(void)
{
  BSTR Value;
  this->get_PrefiksDoc((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_PrefiksDoc(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrefiksDoc"), DISPID(47));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_NameBase(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameBase"), DISPID(48));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_NameBase(void)
{
  BSTR Value;
  this->get_NameBase((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDBASE_GALLDOC"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPerDispT<T>::get_DocAllIDBASE_GALLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPerDispT<T>::set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDBASE_GALLDOC"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMDocPrihNakl
// Interface: IOleDMDocPrihNakl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEOF(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_TableEOF(void)
{
  int Value;
  OLECHECK(this->get_TableEOF((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTIDPRNT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDPRNT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTIDPRNT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDPRNT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocTIDPRNT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDPRNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTIDDOCPRNT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDDOCPRNT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTIDDOCPRNT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDDOCPRNT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocTIDDOCPRNT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDDOCPRNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTIDNOMPRNT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDNOMPRNT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTIDNOMPRNT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDNOMPRNT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocTIDNOMPRNT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDNOMPRNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTIDEDPRNT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDEDPRNT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTIDEDPRNT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDEDPRNT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocTIDEDPRNT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDEDPRNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTIDPARTPRNT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDPARTPRNT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTIDPARTPRNT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDPARTPRNT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocTIDPARTPRNT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDPARTPRNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTKOLPRNT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTKOLPRNT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTKOLPRNT(void)
{
  double Value;
  OLECHECK(this->get_DocTKOLPRNT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocTKOLPRNT(double Value/*[in]*/)
{
  return (*this)->set_DocTKOLPRNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTKFPRNT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTKFPRNT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTKFPRNT(void)
{
  double Value;
  OLECHECK(this->get_DocTKFPRNT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocTKFPRNT(double Value/*[in]*/)
{
  return (*this)->set_DocTKFPRNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTPRICEPRNT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTPRICEPRNT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTPRICEPRNT(void)
{
  double Value;
  OLECHECK(this->get_DocTPRICEPRNT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocTPRICEPRNT(double Value/*[in]*/)
{
  return (*this)->set_DocTPRICEPRNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTSUMPRNT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTSUMPRNT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTSUMPRNT(void)
{
  double Value;
  OLECHECK(this->get_DocTSUMPRNT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocTSUMPRNT(double Value/*[in]*/)
{
  return (*this)->set_DocTSUMPRNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocIDPRN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDPRN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocIDPRN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDPRN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocIDPRN(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDPRN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTNAMENOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTNAMENOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTNAMENOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTNAMENOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTNAMEED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTNAMEED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTNAMEED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTNAMEED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocIDDOCPRN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDDOCPRN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocIDDOCPRN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDDOCPRN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocIDDOCPRN(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDDOCPRN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocPRIMDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocPRIMDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocPRIMDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocPRIMDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocPRIMDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocPRIMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllIDDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllIDDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocAllIDDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllPOSDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllPOSDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllPOSDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocAllPOSDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllPOSDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllPRDOC(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllPRDOC(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllPRDOC(void)
{
  int Value;
  OLECHECK(this->get_DocAllPRDOC((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocAllPRDOC(int Value/*[in]*/)
{
  return (*this)->set_DocAllPRDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllTDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllTDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllTDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllTDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocAllTDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllTDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllNUMDOC(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllNUMDOC(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllNUMDOC(void)
{
  int Value;
  OLECHECK(this->get_DocAllNUMDOC((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocAllNUMDOC(int Value/*[in]*/)
{
  return (*this)->set_DocAllNUMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDFIRMDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllIDFIRMDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDFIRMDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocAllIDFIRMDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDFIRMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDSKLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllIDSKLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDSKLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocAllIDSKLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDSKLDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDKLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllIDKLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDKLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocAllIDKLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDKLDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllSUMDOC(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllSUMDOC(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllSUMDOC(void)
{
  double Value;
  OLECHECK(this->get_DocAllSUMDOC((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocAllSUMDOC(double Value/*[in]*/)
{
  return (*this)->set_DocAllSUMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllFNAMEUSER(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllFNAMEUSER(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllFNAMEUSER((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocAllFNAMEUSER(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllFNAMEUSER(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocIDTPRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDTPRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocIDTPRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDTPRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocIDTPRICE(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDTPRICE(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDUSERDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllIDUSERDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDUSERDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocAllIDUSERDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDUSERDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllGID_DOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllGID_DOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllGID_DOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocAllGID_DOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllGID_DOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocGID_DPRN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocGID_DPRN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocGID_DPRN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocGID_DPRN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocGID_DPRN(BSTR Value/*[in]*/)
{
  return (*this)->set_DocGID_DPRN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTGID_DPRNT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTGID_DPRNT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocTGID_DPRNT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTGID_DPRNT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocTGID_DPRNT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTGID_DPRNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::NewDoc(void)
{
  return (*this)->NewDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::OpenDoc(BSTR IdDoc/*[in]*/)
{
  return (*this)->OpenDoc(IdDoc);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::SaveDoc(void)
{
  return (*this)->SaveDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::DvRegDoc(void)
{
  return (*this)->DvRegDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::CancelDvRegDoc(void)
{
  return (*this)->CancelDvRegDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::AddDocNewString(void)
{
  return (*this)->AddDocNewString();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::DeleteStringDoc(void)
{
  return (*this)->DeleteStringDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::DeleteDoc(BSTR Id/*[in]*/)
{
  return (*this)->DeleteDoc(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/, 
                                               BSTR* id_doc/*[out,retval]*/)
{
  return (*this)->GetIdDocPoNomeruDoc(number_doc, date_doc, id_doc);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/)
{
  BSTR id_doc = 0;
  OLECHECK(this->GetIdDocPoNomeruDoc(number_doc/*[in]*/, date_doc/*[in]*/, (BSTR*)&id_doc));
  return id_doc;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_PrefiksDoc(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_PrefiksDoc(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_PrefiksDoc(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_PrefiksDoc((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_PrefiksDoc(BSTR Value/*[in]*/)
{
  return (*this)->set_PrefiksDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_NameBase(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NameBase(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_NameBase(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NameBase((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDBASE_GALLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocPrihNaklT<T>::get_DocAllIDBASE_GALLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocPrihNaklT<T>::set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDBASE_GALLDOC(Value);
}

// *********************************************************************//
// DispIntf:  IOleDMDocPrihNakl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {68D9AE11-D691-410E-8E27-AD1CF6A3CA54}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocPrihNaklDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEOF"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocPrihNaklDispT<T>::get_TableEOF(void)
{
  int Value;
  this->get_TableEOF((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTIDPRNT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDPRNT"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTIDPRNT(void)
{
  BSTR Value;
  this->get_DocTIDPRNT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocTIDPRNT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDPRNT"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTIDDOCPRNT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDDOCPRNT"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTIDDOCPRNT(void)
{
  BSTR Value;
  this->get_DocTIDDOCPRNT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocTIDDOCPRNT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDDOCPRNT"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTIDNOMPRNT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDNOMPRNT"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTIDNOMPRNT(void)
{
  BSTR Value;
  this->get_DocTIDNOMPRNT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocTIDNOMPRNT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDNOMPRNT"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTIDEDPRNT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDEDPRNT"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTIDEDPRNT(void)
{
  BSTR Value;
  this->get_DocTIDEDPRNT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocTIDEDPRNT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDEDPRNT"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTIDPARTPRNT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDPARTPRNT"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTIDPARTPRNT(void)
{
  BSTR Value;
  this->get_DocTIDPARTPRNT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocTIDPARTPRNT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDPARTPRNT"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTKOLPRNT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKOLPRNT"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTKOLPRNT(void)
{
  double Value;
  this->get_DocTKOLPRNT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocTKOLPRNT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKOLPRNT"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTKFPRNT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKFPRNT"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTKFPRNT(void)
{
  double Value;
  this->get_DocTKFPRNT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocTKFPRNT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKFPRNT"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTPRICEPRNT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTPRICEPRNT"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTPRICEPRNT(void)
{
  double Value;
  this->get_DocTPRICEPRNT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocTPRICEPRNT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTPRICEPRNT"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTSUMPRNT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTSUMPRNT"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTSUMPRNT(void)
{
  double Value;
  this->get_DocTSUMPRNT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocTSUMPRNT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTSUMPRNT"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocIDPRN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDPRN"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocIDPRN(void)
{
  BSTR Value;
  this->get_DocIDPRN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocIDPRN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDPRN"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTNAMENOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTNAMENOM"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTNAMENOM(void)
{
  BSTR Value;
  this->get_DocTNAMENOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTNAMEED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTNAMEED"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTNAMEED(void)
{
  BSTR Value;
  this->get_DocTNAMEED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocIDDOCPRN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDDOCPRN"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocIDDOCPRN(void)
{
  BSTR Value;
  this->get_DocIDDOCPRN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocIDDOCPRN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDDOCPRN"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocPRIMDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocPRIMDOC"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocPRIMDOC(void)
{
  BSTR Value;
  this->get_DocPRIMDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocPRIMDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocPRIMDOC"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllIDDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDDOC"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllIDDOC(void)
{
  BSTR Value;
  this->get_DocAllIDDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocAllIDDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDDOC"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPOSDOC"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllPOSDOC(void)
{
  BSTR Value;
  this->get_DocAllPOSDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocAllPOSDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPOSDOC"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllPRDOC(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPRDOC"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllPRDOC(void)
{
  int Value;
  this->get_DocAllPRDOC((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocAllPRDOC(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPRDOC"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllTDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllTDOC"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllTDOC(void)
{
  BSTR Value;
  this->get_DocAllTDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocAllTDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllTDOC"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllNUMDOC(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNUMDOC"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllNUMDOC(void)
{
  int Value;
  this->get_DocAllNUMDOC((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocAllNUMDOC(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNUMDOC"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDFIRMDOC"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllIDFIRMDOC(void)
{
  BSTR Value;
  this->get_DocAllIDFIRMDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocAllIDFIRMDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDFIRMDOC"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDSKLDOC"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllIDSKLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDSKLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocAllIDSKLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDSKLDOC"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDKLDOC"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllIDKLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDKLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocAllIDKLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDKLDOC"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllSUMDOC(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllSUMDOC"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllSUMDOC(void)
{
  double Value;
  this->get_DocAllSUMDOC((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocAllSUMDOC(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllSUMDOC"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllFNAMEUSER"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllFNAMEUSER(void)
{
  BSTR Value;
  this->get_DocAllFNAMEUSER((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocAllFNAMEUSER(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllFNAMEUSER"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocIDTPRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDTPRICE"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocIDTPRICE(void)
{
  BSTR Value;
  this->get_DocIDTPRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocIDTPRICE(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDTPRICE"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDUSERDOC"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllIDUSERDOC(void)
{
  BSTR Value;
  this->get_DocAllIDUSERDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocAllIDUSERDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDUSERDOC"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllGID_DOC"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllGID_DOC(void)
{
  BSTR Value;
  this->get_DocAllGID_DOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocAllGID_DOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllGID_DOC"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocGID_DPRN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocGID_DPRN"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocGID_DPRN(void)
{
  BSTR Value;
  this->get_DocGID_DPRN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocGID_DPRN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocGID_DPRN"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTGID_DPRNT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTGID_DPRNT"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocTGID_DPRNT(void)
{
  BSTR Value;
  this->get_DocTGID_DPRNT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocTGID_DPRNT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTGID_DPRNT"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::NewDoc()
{
  _TDispID _dispid(*this, OLETEXT("NewDoc"), DISPID(33));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::OpenDoc(BSTR IdDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDoc"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = IdDoc /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::SaveDoc()
{
  _TDispID _dispid(*this, OLETEXT("SaveDoc"), DISPID(35));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::DvRegDoc()
{
  _TDispID _dispid(*this, OLETEXT("DvRegDoc"), DISPID(37));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::CancelDvRegDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelDvRegDoc"), DISPID(38));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::AddDocNewString()
{
  _TDispID _dispid(*this, OLETEXT("AddDocNewString"), DISPID(39));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::DeleteStringDoc()
{
  _TDispID _dispid(*this, OLETEXT("DeleteStringDoc"), DISPID(40));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::DeleteDoc(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteDoc"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/, 
                                               BSTR* id_doc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdDocPoNomeruDoc"), DISPID(42));
  TAutoArgs<2> _args;
  _args[1] = number_doc /*[VT_INT:0]*/;
  _args[2] = date_doc /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(id_doc /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/)
{
  BSTR id_doc;
  this->GetIdDocPoNomeruDoc(number_doc, date_doc, (BSTR*)&id_doc);
  return id_doc;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(43));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(44));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_PrefiksDoc(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrefiksDoc"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_PrefiksDoc(void)
{
  BSTR Value;
  this->get_PrefiksDoc((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_PrefiksDoc(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrefiksDoc"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_NameBase(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameBase"), DISPID(45));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_NameBase(void)
{
  BSTR Value;
  this->get_NameBase((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDBASE_GALLDOC"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocPrihNaklDispT<T>::get_DocAllIDBASE_GALLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocPrihNaklDispT<T>::set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDBASE_GALLDOC"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMDocReal
// Interface: IOleDMDocReal
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocRealT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEOF(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocRealT<T>::get_TableEOF(void)
{
  int Value;
  OLECHECK(this->get_TableEOF((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllIDDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllPOSDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllPOSDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllPOSDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllPOSDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllPOSDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllPRDOC(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllPRDOC(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllPRDOC(void)
{
  int Value;
  OLECHECK(this->get_DocAllPRDOC((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllPRDOC(int Value/*[in]*/)
{
  return (*this)->set_DocAllPRDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllTDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllTDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllTDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllTDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllTDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllTDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllNUMDOC(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllNUMDOC(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllNUMDOC(void)
{
  int Value;
  OLECHECK(this->get_DocAllNUMDOC((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllNUMDOC(int Value/*[in]*/)
{
  return (*this)->set_DocAllNUMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDFIRMDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDFIRMDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDFIRMDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllIDFIRMDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDFIRMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDSKLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDSKLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDSKLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllIDSKLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDSKLDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllSUMDOC(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllSUMDOC(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllSUMDOC(void)
{
  double Value;
  OLECHECK(this->get_DocAllSUMDOC((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllSUMDOC(double Value/*[in]*/)
{
  return (*this)->set_DocAllSUMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDUSERDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDUSERDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDUSERDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllIDUSERDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDUSERDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllFNAMEUSER(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllFNAMEUSER(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllFNAMEUSER((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocID_INV(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocID_INV(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocID_INV(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocID_INV((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocID_INV(BSTR Value/*[in]*/)
{
  return (*this)->set_DocID_INV(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocIDDOC_INV(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDDOC_INV(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocIDDOC_INV(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDDOC_INV((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocIDDOC_INV(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDDOC_INV(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocPRIM_INV(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocPRIM_INV(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocPRIM_INV(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocPRIM_INV((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocPRIM_INV(BSTR Value/*[in]*/)
{
  return (*this)->set_DocPRIM_INV(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTID_INVT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTID_INVT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocTID_INVT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTID_INVT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocTID_INVT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTID_INVT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTIDDOC_INVT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDDOC_INVT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocTIDDOC_INVT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDDOC_INVT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocTIDDOC_INVT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDDOC_INVT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTIDNOM_INVT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDNOM_INVT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocTIDNOM_INVT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDNOM_INVT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocTIDNOM_INVT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDNOM_INVT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTIDED_INVT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDED_INVT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocTIDED_INVT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDED_INVT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocTIDED_INVT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDED_INVT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTKF_INVT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTKF_INVT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRealT<T>::get_DocTKF_INVT(void)
{
  double Value;
  OLECHECK(this->get_DocTKF_INVT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocTKF_INVT(double Value/*[in]*/)
{
  return (*this)->set_DocTKF_INVT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTKOLUCH_INVT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTKOLUCH_INVT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRealT<T>::get_DocTKOLUCH_INVT(void)
{
  double Value;
  OLECHECK(this->get_DocTKOLUCH_INVT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocTKOLUCH_INVT(double Value/*[in]*/)
{
  return (*this)->set_DocTKOLUCH_INVT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTNAMENOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTNAMENOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocTNAMENOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTNAMENOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTNAMEED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTNAMEED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocTNAMEED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTNAMEED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTKOLFAKT_INVT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTKOLFAKT_INVT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRealT<T>::get_DocTKOLFAKT_INVT(void)
{
  double Value;
  OLECHECK(this->get_DocTKOLFAKT_INVT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocTKOLFAKT_INVT(double Value/*[in]*/)
{
  return (*this)->set_DocTKOLFAKT_INVT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllGID_DOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllGID_DOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllGID_DOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllGID_DOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllGID_DOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocGID_INV(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocGID_INV(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocGID_INV(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocGID_INV((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocGID_INV(BSTR Value/*[in]*/)
{
  return (*this)->set_DocGID_INV(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTGID_INVT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTGID_INVT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocTGID_INVT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTGID_INVT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocTGID_INVT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTGID_INVT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::NewDoc(void)
{
  return (*this)->NewDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::OpenDoc(BSTR IdDoc/*[in]*/)
{
  return (*this)->OpenDoc(IdDoc);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::SaveDoc(void)
{
  return (*this)->SaveDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::DvRegDoc(void)
{
  return (*this)->DvRegDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::CancelDvRegDoc(void)
{
  return (*this)->CancelDvRegDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::AddDocNewString(void)
{
  return (*this)->AddDocNewString();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::DeleteStringDoc(void)
{
  return (*this)->DeleteStringDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::DeleteDoc(BSTR Id/*[in]*/)
{
  return (*this)->DeleteDoc(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/, 
                                           BSTR* id_doc/*[out,retval]*/)
{
  return (*this)->GetIdDocPoNomeruDoc(number_doc, date_doc, id_doc);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/)
{
  BSTR id_doc = 0;
  OLECHECK(this->GetIdDocPoNomeruDoc(number_doc/*[in]*/, date_doc/*[in]*/, (BSTR*)&id_doc));
  return id_doc;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_PrefiksDoc(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_PrefiksDoc(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_PrefiksDoc(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_PrefiksDoc((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_PrefiksDoc(BSTR Value/*[in]*/)
{
  return (*this)->set_PrefiksDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_NameBase(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NameBase(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_NameBase(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NameBase((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDBASE_GALLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDBASE_GALLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDBASE_GALLDOC(Value);
}

// *********************************************************************//
// DispIntf:  IOleDMDocReal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A9B32F6B-0BBA-4CFA-AEF1-312AA488A02F}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocRealDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEOF"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocRealDispT<T>::get_TableEOF(void)
{
  int Value;
  this->get_TableEOF((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDDOC"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDDOC(void)
{
  BSTR Value;
  this->get_DocAllIDDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllIDDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDDOC"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPOSDOC"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocAllPOSDOC(void)
{
  BSTR Value;
  this->get_DocAllPOSDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllPOSDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPOSDOC"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllPRDOC(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPRDOC"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocRealDispT<T>::get_DocAllPRDOC(void)
{
  int Value;
  this->get_DocAllPRDOC((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllPRDOC(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPRDOC"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllTDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllTDOC"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocAllTDOC(void)
{
  BSTR Value;
  this->get_DocAllTDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllTDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllTDOC"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllNUMDOC(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNUMDOC"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocRealDispT<T>::get_DocAllNUMDOC(void)
{
  int Value;
  this->get_DocAllNUMDOC((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllNUMDOC(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNUMDOC"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDFIRMDOC"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDFIRMDOC(void)
{
  BSTR Value;
  this->get_DocAllIDFIRMDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllIDFIRMDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDFIRMDOC"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDSKLDOC"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDSKLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDSKLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllIDSKLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDSKLDOC"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllSUMDOC(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllSUMDOC"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRealDispT<T>::get_DocAllSUMDOC(void)
{
  double Value;
  this->get_DocAllSUMDOC((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllSUMDOC(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllSUMDOC"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDUSERDOC"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDUSERDOC(void)
{
  BSTR Value;
  this->get_DocAllIDUSERDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllIDUSERDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDUSERDOC"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllFNAMEUSER"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocAllFNAMEUSER(void)
{
  BSTR Value;
  this->get_DocAllFNAMEUSER((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocID_INV(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocID_INV"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocID_INV(void)
{
  BSTR Value;
  this->get_DocID_INV((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocID_INV(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocID_INV"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocIDDOC_INV(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDDOC_INV"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocIDDOC_INV(void)
{
  BSTR Value;
  this->get_DocIDDOC_INV((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocIDDOC_INV(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDDOC_INV"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocPRIM_INV(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocPRIM_INV"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocPRIM_INV(void)
{
  BSTR Value;
  this->get_DocPRIM_INV((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocPRIM_INV(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocPRIM_INV"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTID_INVT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTID_INVT"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocTID_INVT(void)
{
  BSTR Value;
  this->get_DocTID_INVT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocTID_INVT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTID_INVT"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTIDDOC_INVT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDDOC_INVT"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocTIDDOC_INVT(void)
{
  BSTR Value;
  this->get_DocTIDDOC_INVT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocTIDDOC_INVT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDDOC_INVT"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTIDNOM_INVT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDNOM_INVT"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocTIDNOM_INVT(void)
{
  BSTR Value;
  this->get_DocTIDNOM_INVT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocTIDNOM_INVT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDNOM_INVT"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTIDED_INVT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDED_INVT"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocTIDED_INVT(void)
{
  BSTR Value;
  this->get_DocTIDED_INVT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocTIDED_INVT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDED_INVT"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTKF_INVT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKF_INVT"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRealDispT<T>::get_DocTKF_INVT(void)
{
  double Value;
  this->get_DocTKF_INVT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocTKF_INVT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKF_INVT"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTKOLUCH_INVT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKOLUCH_INVT"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRealDispT<T>::get_DocTKOLUCH_INVT(void)
{
  double Value;
  this->get_DocTKOLUCH_INVT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocTKOLUCH_INVT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKOLUCH_INVT"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTNAMENOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTNAMENOM"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocTNAMENOM(void)
{
  BSTR Value;
  this->get_DocTNAMENOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTNAMEED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTNAMEED"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocTNAMEED(void)
{
  BSTR Value;
  this->get_DocTNAMEED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTKOLFAKT_INVT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKOLFAKT_INVT"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRealDispT<T>::get_DocTKOLFAKT_INVT(void)
{
  double Value;
  this->get_DocTKOLFAKT_INVT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocTKOLFAKT_INVT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKOLFAKT_INVT"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllGID_DOC"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocAllGID_DOC(void)
{
  BSTR Value;
  this->get_DocAllGID_DOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllGID_DOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllGID_DOC"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocGID_INV(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocGID_INV"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocGID_INV(void)
{
  BSTR Value;
  this->get_DocGID_INV((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocGID_INV(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocGID_INV"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTGID_INVT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTGID_INVT"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocTGID_INVT(void)
{
  BSTR Value;
  this->get_DocTGID_INVT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocTGID_INVT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTGID_INVT"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::NewDoc()
{
  _TDispID _dispid(*this, OLETEXT("NewDoc"), DISPID(32));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::OpenDoc(BSTR IdDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDoc"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = IdDoc /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::SaveDoc()
{
  _TDispID _dispid(*this, OLETEXT("SaveDoc"), DISPID(34));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::DvRegDoc()
{
  _TDispID _dispid(*this, OLETEXT("DvRegDoc"), DISPID(35));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::CancelDvRegDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelDvRegDoc"), DISPID(37));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::AddDocNewString()
{
  _TDispID _dispid(*this, OLETEXT("AddDocNewString"), DISPID(38));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::DeleteStringDoc()
{
  _TDispID _dispid(*this, OLETEXT("DeleteStringDoc"), DISPID(39));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::DeleteDoc(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteDoc"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/, 
                                           BSTR* id_doc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdDocPoNomeruDoc"), DISPID(41));
  TAutoArgs<2> _args;
  _args[1] = number_doc /*[VT_INT:0]*/;
  _args[2] = date_doc /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(id_doc /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/)
{
  BSTR id_doc;
  this->GetIdDocPoNomeruDoc(number_doc, date_doc, (BSTR*)&id_doc);
  return id_doc;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(42));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(43));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_PrefiksDoc(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrefiksDoc"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_PrefiksDoc(void)
{
  BSTR Value;
  this->get_PrefiksDoc((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_PrefiksDoc(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrefiksDoc"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_NameBase(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameBase"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_NameBase(void)
{
  BSTR Value;
  this->get_NameBase((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDBASE_GALLDOC"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDBASE_GALLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDBASE_GALLDOC"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMDocSpisNom
// Interface: IOleDMDocSpisNom
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocSpisNomT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEOF(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocSpisNomT<T>::get_TableEOF(void)
{
  int Value;
  OLECHECK(this->get_TableEOF((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllIDDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllIDDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocAllIDDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllPOSDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllPOSDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllPOSDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocAllPOSDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllPOSDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllPRDOC(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllPRDOC(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllPRDOC(void)
{
  int Value;
  OLECHECK(this->get_DocAllPRDOC((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocAllPRDOC(int Value/*[in]*/)
{
  return (*this)->set_DocAllPRDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllTDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllTDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllTDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllTDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocAllTDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllTDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllNUMDOC(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllNUMDOC(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllNUMDOC(void)
{
  int Value;
  OLECHECK(this->get_DocAllNUMDOC((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocAllNUMDOC(int Value/*[in]*/)
{
  return (*this)->set_DocAllNUMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDFIRMDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllIDFIRMDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDFIRMDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocAllIDFIRMDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDFIRMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDSKLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllIDSKLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDSKLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocAllIDSKLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDSKLDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDKLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllIDKLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDKLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocAllIDKLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDKLDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllSUMDOC(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllSUMDOC(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllSUMDOC(void)
{
  double Value;
  OLECHECK(this->get_DocAllSUMDOC((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocAllSUMDOC(double Value/*[in]*/)
{
  return (*this)->set_DocAllSUMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocIDSPN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDSPN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocIDSPN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDSPN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocIDSPN(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDSPN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocIDDOCSPN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDDOCSPN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocIDDOCSPN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDDOCSPN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocIDDOCSPN(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDDOCSPN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocPRIMSPN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocPRIMSPN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocPRIMSPN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocPRIMSPN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocPRIMSPN(BSTR Value/*[in]*/)
{
  return (*this)->set_DocPRIMSPN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTIDSPNT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDSPNT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTIDSPNT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDSPNT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocTIDSPNT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDSPNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTIDDOCSPNT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDDOCSPNT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTIDDOCSPNT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDDOCSPNT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocTIDDOCSPNT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDDOCSPNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTIDNOMSPNT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDNOMSPNT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTIDNOMSPNT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDNOMSPNT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocTIDNOMSPNT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDNOMSPNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTIDEDSPNT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDEDSPNT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTIDEDSPNT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDEDSPNT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocTIDEDSPNT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDEDSPNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTKOLSPNT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTKOLSPNT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTKOLSPNT(void)
{
  double Value;
  OLECHECK(this->get_DocTKOLSPNT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocTKOLSPNT(double Value/*[in]*/)
{
  return (*this)->set_DocTKOLSPNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTKFSPNT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTKFSPNT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTKFSPNT(void)
{
  double Value;
  OLECHECK(this->get_DocTKFSPNT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocTKFSPNT(double Value/*[in]*/)
{
  return (*this)->set_DocTKFSPNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTPRICESPNT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTPRICESPNT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTPRICESPNT(void)
{
  double Value;
  OLECHECK(this->get_DocTPRICESPNT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocTPRICESPNT(double Value/*[in]*/)
{
  return (*this)->set_DocTPRICESPNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTSUMSPNT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTSUMSPNT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTSUMSPNT(void)
{
  double Value;
  OLECHECK(this->get_DocTSUMSPNT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocTSUMSPNT(double Value/*[in]*/)
{
  return (*this)->set_DocTSUMSPNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTNAMENOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTNAMENOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTNAMENOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTNAMENOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTNAMEED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTNAMEED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTNAMEED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTNAMEED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllGID_DOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllGID_DOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllGID_DOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocAllGID_DOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllGID_DOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocGID_DSPN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocGID_DSPN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocGID_DSPN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocGID_DSPN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocGID_DSPN(BSTR Value/*[in]*/)
{
  return (*this)->set_DocGID_DSPN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTGID_DSPNT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTGID_DSPNT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocTGID_DSPNT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTGID_DSPNT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocTGID_DSPNT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTGID_DSPNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::NewDoc(void)
{
  return (*this)->NewDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::OpenDoc(BSTR IdDoc/*[in]*/)
{
  return (*this)->OpenDoc(IdDoc);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::SaveDoc(void)
{
  return (*this)->SaveDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::DvRegDoc(void)
{
  return (*this)->DvRegDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::CancelDvRegDoc(void)
{
  return (*this)->CancelDvRegDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::AddDocNewString(void)
{
  return (*this)->AddDocNewString();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::DeleteStringDoc(void)
{
  return (*this)->DeleteStringDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::CloseDoc(void)
{
  return (*this)->CloseDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::DeleteDoc(BSTR Id/*[in]*/)
{
  return (*this)->DeleteDoc(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_PrefiksDoc(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_PrefiksDoc(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_PrefiksDoc(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_PrefiksDoc((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_PrefiksDoc(BSTR Value/*[in]*/)
{
  return (*this)->set_PrefiksDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_NameBase(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NameBase(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_NameBase(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NameBase((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDBASE_GALLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocSpisNomT<T>::get_DocAllIDBASE_GALLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocSpisNomT<T>::set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDBASE_GALLDOC(Value);
}

// *********************************************************************//
// DispIntf:  IOleDMDocSpisNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8B080649-063C-46B7-AB4B-F1555658555E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocSpisNomDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEOF"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocSpisNomDispT<T>::get_TableEOF(void)
{
  int Value;
  this->get_TableEOF((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(5));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllIDDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDDOC"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllIDDOC(void)
{
  BSTR Value;
  this->get_DocAllIDDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocAllIDDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDDOC"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPOSDOC"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllPOSDOC(void)
{
  BSTR Value;
  this->get_DocAllPOSDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocAllPOSDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPOSDOC"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllPRDOC(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPRDOC"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllPRDOC(void)
{
  int Value;
  this->get_DocAllPRDOC((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocAllPRDOC(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPRDOC"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllTDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllTDOC"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllTDOC(void)
{
  BSTR Value;
  this->get_DocAllTDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocAllTDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllTDOC"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllNUMDOC(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNUMDOC"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllNUMDOC(void)
{
  int Value;
  this->get_DocAllNUMDOC((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocAllNUMDOC(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNUMDOC"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDFIRMDOC"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllIDFIRMDOC(void)
{
  BSTR Value;
  this->get_DocAllIDFIRMDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocAllIDFIRMDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDFIRMDOC"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDSKLDOC"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllIDSKLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDSKLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocAllIDSKLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDSKLDOC"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDKLDOC"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllIDKLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDKLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocAllIDKLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDKLDOC"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllSUMDOC(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllSUMDOC"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllSUMDOC(void)
{
  double Value;
  this->get_DocAllSUMDOC((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocAllSUMDOC(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllSUMDOC"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocIDSPN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDSPN"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocIDSPN(void)
{
  BSTR Value;
  this->get_DocIDSPN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocIDSPN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDSPN"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocIDDOCSPN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDDOCSPN"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocIDDOCSPN(void)
{
  BSTR Value;
  this->get_DocIDDOCSPN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocIDDOCSPN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDDOCSPN"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocPRIMSPN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocPRIMSPN"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocPRIMSPN(void)
{
  BSTR Value;
  this->get_DocPRIMSPN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocPRIMSPN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocPRIMSPN"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTIDSPNT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDSPNT"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTIDSPNT(void)
{
  BSTR Value;
  this->get_DocTIDSPNT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocTIDSPNT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDSPNT"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTIDDOCSPNT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDDOCSPNT"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTIDDOCSPNT(void)
{
  BSTR Value;
  this->get_DocTIDDOCSPNT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocTIDDOCSPNT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDDOCSPNT"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTIDNOMSPNT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDNOMSPNT"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTIDNOMSPNT(void)
{
  BSTR Value;
  this->get_DocTIDNOMSPNT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocTIDNOMSPNT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDNOMSPNT"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTIDEDSPNT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDEDSPNT"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTIDEDSPNT(void)
{
  BSTR Value;
  this->get_DocTIDEDSPNT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocTIDEDSPNT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDEDSPNT"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTKOLSPNT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKOLSPNT"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTKOLSPNT(void)
{
  double Value;
  this->get_DocTKOLSPNT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocTKOLSPNT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKOLSPNT"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTKFSPNT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKFSPNT"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTKFSPNT(void)
{
  double Value;
  this->get_DocTKFSPNT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocTKFSPNT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKFSPNT"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTPRICESPNT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTPRICESPNT"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTPRICESPNT(void)
{
  double Value;
  this->get_DocTPRICESPNT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocTPRICESPNT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTPRICESPNT"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTSUMSPNT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTSUMSPNT"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTSUMSPNT(void)
{
  double Value;
  this->get_DocTSUMSPNT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocTSUMSPNT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTSUMSPNT"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTNAMENOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTNAMENOM"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTNAMENOM(void)
{
  BSTR Value;
  this->get_DocTNAMENOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTNAMEED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTNAMEED"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTNAMEED(void)
{
  BSTR Value;
  this->get_DocTNAMEED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllGID_DOC"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllGID_DOC(void)
{
  BSTR Value;
  this->get_DocAllGID_DOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocAllGID_DOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllGID_DOC"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocGID_DSPN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocGID_DSPN"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocGID_DSPN(void)
{
  BSTR Value;
  this->get_DocGID_DSPN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocGID_DSPN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocGID_DSPN"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTGID_DSPNT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTGID_DSPNT"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocTGID_DSPNT(void)
{
  BSTR Value;
  this->get_DocTGID_DSPNT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocTGID_DSPNT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTGID_DSPNT"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::NewDoc()
{
  _TDispID _dispid(*this, OLETEXT("NewDoc"), DISPID(31));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::OpenDoc(BSTR IdDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDoc"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = IdDoc /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::SaveDoc()
{
  _TDispID _dispid(*this, OLETEXT("SaveDoc"), DISPID(33));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::DvRegDoc()
{
  _TDispID _dispid(*this, OLETEXT("DvRegDoc"), DISPID(34));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::CancelDvRegDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelDvRegDoc"), DISPID(35));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::AddDocNewString()
{
  _TDispID _dispid(*this, OLETEXT("AddDocNewString"), DISPID(36));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::DeleteStringDoc()
{
  _TDispID _dispid(*this, OLETEXT("DeleteStringDoc"), DISPID(37));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::CloseDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseDoc"), DISPID(38));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::DeleteDoc(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteDoc"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_PrefiksDoc(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrefiksDoc"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_PrefiksDoc(void)
{
  BSTR Value;
  this->get_PrefiksDoc((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_PrefiksDoc(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrefiksDoc"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_NameBase(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameBase"), DISPID(41));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_NameBase(void)
{
  BSTR Value;
  this->get_NameBase((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDBASE_GALLDOC"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocSpisNomDispT<T>::get_DocAllIDBASE_GALLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocSpisNomDispT<T>::set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDBASE_GALLDOC"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMDocOstNom
// Interface: IOleDMDocOstNom
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocOstNomT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEOF(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocOstNomT<T>::get_TableEOF(void)
{
  int Value;
  OLECHECK(this->get_TableEOF((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocIDOCN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDOCN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocIDOCN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDOCN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocIDOCN(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDOCN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocPRIMOSN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocPRIMOSN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocPRIMOSN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocPRIMOSN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocPRIMOSN(BSTR Value/*[in]*/)
{
  return (*this)->set_DocPRIMOSN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocIDDOCOSN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDDOCOSN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocIDDOCOSN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDDOCOSN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocIDDOCOSN(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDDOCOSN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllIDDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllIDDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocAllIDDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllPOSDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllPOSDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllPOSDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocAllPOSDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllPOSDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllPRDOC(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllPRDOC(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllPRDOC(void)
{
  int Value;
  OLECHECK(this->get_DocAllPRDOC((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocAllPRDOC(int Value/*[in]*/)
{
  return (*this)->set_DocAllPRDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllTDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllTDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllTDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllTDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocAllTDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllTDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllNUMDOC(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllNUMDOC(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllNUMDOC(void)
{
  int Value;
  OLECHECK(this->get_DocAllNUMDOC((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocAllNUMDOC(int Value/*[in]*/)
{
  return (*this)->set_DocAllNUMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDFIRMDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllIDFIRMDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDFIRMDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocAllIDFIRMDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDFIRMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDSKLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllIDSKLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDSKLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocAllIDSKLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDSKLDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDKLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllIDKLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDKLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocAllIDKLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDKLDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllSUMDOC(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllSUMDOC(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllSUMDOC(void)
{
  double Value;
  OLECHECK(this->get_DocAllSUMDOC((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocAllSUMDOC(double Value/*[in]*/)
{
  return (*this)->set_DocAllSUMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDUSERDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllIDUSERDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDUSERDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocAllIDUSERDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDUSERDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllFNAMEUSER(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllFNAMEUSER(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllFNAMEUSER((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocIDTPRICEOSN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDTPRICEOSN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocIDTPRICEOSN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDTPRICEOSN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocIDTPRICEOSN(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDTPRICEOSN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocNAME_TPRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocNAME_TPRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocNAME_TPRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocNAME_TPRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTIDOSNT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDOSNT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTIDOSNT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDOSNT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocTIDOSNT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDOSNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTIDDOCOSNT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDDOCOSNT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTIDDOCOSNT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDDOCOSNT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocTIDDOCOSNT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDDOCOSNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTIDNOMOSNT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDNOMOSNT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTIDNOMOSNT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDNOMOSNT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocTIDNOMOSNT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDNOMOSNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTIDEDOSNT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDEDOSNT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTIDEDOSNT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDEDOSNT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocTIDEDOSNT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDEDOSNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTIDPARTOSNT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDPARTOSNT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTIDPARTOSNT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDPARTOSNT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocTIDPARTOSNT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDPARTOSNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTKOLOSNT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTKOLOSNT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTKOLOSNT(void)
{
  double Value;
  OLECHECK(this->get_DocTKOLOSNT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocTKOLOSNT(double Value/*[in]*/)
{
  return (*this)->set_DocTKOLOSNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTKFOSNT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTKFOSNT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTKFOSNT(void)
{
  double Value;
  OLECHECK(this->get_DocTKFOSNT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocTKFOSNT(double Value/*[in]*/)
{
  return (*this)->set_DocTKFOSNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTPRICEOSNT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTPRICEOSNT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTPRICEOSNT(void)
{
  double Value;
  OLECHECK(this->get_DocTPRICEOSNT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocTPRICEOSNT(double Value/*[in]*/)
{
  return (*this)->set_DocTPRICEOSNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTSUMOSNT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTSUMOSNT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTSUMOSNT(void)
{
  double Value;
  OLECHECK(this->get_DocTSUMOSNT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocTSUMOSNT(double Value/*[in]*/)
{
  return (*this)->set_DocTSUMOSNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTNAMENOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTNAMENOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTNAMENOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTNAMENOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTNAMEED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTNAMEED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTNAMEED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTNAMEED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllGID_DOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllGID_DOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllGID_DOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocAllGID_DOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllGID_DOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocGID_DOSN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocGID_DOSN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocGID_DOSN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocGID_DOSN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocGID_DOSN(BSTR Value/*[in]*/)
{
  return (*this)->set_DocGID_DOSN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTGID_DOSNT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTGID_DOSNT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTGID_DOSNT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTGID_DOSNT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocTGID_DOSNT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTGID_DOSNT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::NewDoc(void)
{
  return (*this)->NewDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::OpenDoc(BSTR IdDoc/*[in]*/)
{
  return (*this)->OpenDoc(IdDoc);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::SaveDoc(void)
{
  return (*this)->SaveDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::CloseDoc(void)
{
  return (*this)->CloseDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::DvRegDoc(void)
{
  return (*this)->DvRegDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::CancelDvRegDoc(void)
{
  return (*this)->CancelDvRegDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::AddDocNewString(void)
{
  return (*this)->AddDocNewString();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::DeleteStringDoc(void)
{
  return (*this)->DeleteStringDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::DeleteDoc(BSTR Id/*[in]*/)
{
  return (*this)->DeleteDoc(Id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/, 
                                             BSTR* id_doc/*[out,retval]*/)
{
  return (*this)->GetIdDocPoNomeruDoc(number_doc, date_doc, id_doc);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/)
{
  BSTR id_doc = 0;
  OLECHECK(this->GetIdDocPoNomeruDoc(number_doc/*[in]*/, date_doc/*[in]*/, (BSTR*)&id_doc));
  return id_doc;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTTNOM(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocTTNOM(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocTTNOM(void)
{
  int Value;
  OLECHECK(this->get_DocTTNOM((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocTTNOM(int Value/*[in]*/)
{
  return (*this)->set_DocTTNOM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_PrefiksDoc(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_PrefiksDoc(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_PrefiksDoc(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_PrefiksDoc((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_PrefiksDoc(BSTR Value/*[in]*/)
{
  return (*this)->set_PrefiksDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_NameBase(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NameBase(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_NameBase(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NameBase((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDBASE_GALLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocOstNomT<T>::get_DocAllIDBASE_GALLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocOstNomT<T>::set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDBASE_GALLDOC(Value);
}

// *********************************************************************//
// DispIntf:  IOleDMDocOstNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {38DC6630-17D6-42FC-B528-A2C9A6047C38}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocOstNomDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEOF"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocOstNomDispT<T>::get_TableEOF(void)
{
  int Value;
  this->get_TableEOF((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocIDOCN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDOCN"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocIDOCN(void)
{
  BSTR Value;
  this->get_DocIDOCN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocIDOCN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDOCN"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocPRIMOSN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocPRIMOSN"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocPRIMOSN(void)
{
  BSTR Value;
  this->get_DocPRIMOSN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocPRIMOSN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocPRIMOSN"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocIDDOCOSN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDDOCOSN"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocIDDOCOSN(void)
{
  BSTR Value;
  this->get_DocIDDOCOSN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocIDDOCOSN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDDOCOSN"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllIDDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDDOC"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllIDDOC(void)
{
  BSTR Value;
  this->get_DocAllIDDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocAllIDDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDDOC"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPOSDOC"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllPOSDOC(void)
{
  BSTR Value;
  this->get_DocAllPOSDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocAllPOSDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPOSDOC"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllPRDOC(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPRDOC"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllPRDOC(void)
{
  int Value;
  this->get_DocAllPRDOC((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocAllPRDOC(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPRDOC"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllTDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllTDOC"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllTDOC(void)
{
  BSTR Value;
  this->get_DocAllTDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocAllTDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllTDOC"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllNUMDOC(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNUMDOC"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllNUMDOC(void)
{
  int Value;
  this->get_DocAllNUMDOC((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocAllNUMDOC(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNUMDOC"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDFIRMDOC"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllIDFIRMDOC(void)
{
  BSTR Value;
  this->get_DocAllIDFIRMDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocAllIDFIRMDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDFIRMDOC"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDSKLDOC"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllIDSKLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDSKLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocAllIDSKLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDSKLDOC"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDKLDOC"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllIDKLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDKLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocAllIDKLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDKLDOC"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllSUMDOC(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllSUMDOC"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllSUMDOC(void)
{
  double Value;
  this->get_DocAllSUMDOC((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocAllSUMDOC(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllSUMDOC"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllIDUSERDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDUSERDOC"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllIDUSERDOC(void)
{
  BSTR Value;
  this->get_DocAllIDUSERDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocAllIDUSERDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDUSERDOC"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllFNAMEUSER(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllFNAMEUSER"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllFNAMEUSER(void)
{
  BSTR Value;
  this->get_DocAllFNAMEUSER((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocIDTPRICEOSN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDTPRICEOSN"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocIDTPRICEOSN(void)
{
  BSTR Value;
  this->get_DocIDTPRICEOSN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocIDTPRICEOSN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDTPRICEOSN"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocNAME_TPRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocNAME_TPRICE"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocNAME_TPRICE(void)
{
  BSTR Value;
  this->get_DocNAME_TPRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocTIDOSNT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDOSNT"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocTIDOSNT(void)
{
  BSTR Value;
  this->get_DocTIDOSNT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocTIDOSNT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDOSNT"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocTIDDOCOSNT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDDOCOSNT"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocTIDDOCOSNT(void)
{
  BSTR Value;
  this->get_DocTIDDOCOSNT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocTIDDOCOSNT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDDOCOSNT"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocTIDNOMOSNT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDNOMOSNT"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocTIDNOMOSNT(void)
{
  BSTR Value;
  this->get_DocTIDNOMOSNT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocTIDNOMOSNT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDNOMOSNT"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocTIDEDOSNT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDEDOSNT"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocTIDEDOSNT(void)
{
  BSTR Value;
  this->get_DocTIDEDOSNT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocTIDEDOSNT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDEDOSNT"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocTIDPARTOSNT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDPARTOSNT"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocTIDPARTOSNT(void)
{
  BSTR Value;
  this->get_DocTIDPARTOSNT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocTIDPARTOSNT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDPARTOSNT"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocTKOLOSNT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKOLOSNT"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocOstNomDispT<T>::get_DocTKOLOSNT(void)
{
  double Value;
  this->get_DocTKOLOSNT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocTKOLOSNT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKOLOSNT"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocTKFOSNT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKFOSNT"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocOstNomDispT<T>::get_DocTKFOSNT(void)
{
  double Value;
  this->get_DocTKFOSNT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocTKFOSNT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKFOSNT"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocTPRICEOSNT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTPRICEOSNT"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocOstNomDispT<T>::get_DocTPRICEOSNT(void)
{
  double Value;
  this->get_DocTPRICEOSNT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocTPRICEOSNT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTPRICEOSNT"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocTSUMOSNT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTSUMOSNT"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocOstNomDispT<T>::get_DocTSUMOSNT(void)
{
  double Value;
  this->get_DocTSUMOSNT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocTSUMOSNT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTSUMOSNT"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocTNAMENOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTNAMENOM"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocTNAMENOM(void)
{
  BSTR Value;
  this->get_DocTNAMENOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocTNAMEED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTNAMEED"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocTNAMEED(void)
{
  BSTR Value;
  this->get_DocTNAMEED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllGID_DOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllGID_DOC"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllGID_DOC(void)
{
  BSTR Value;
  this->get_DocAllGID_DOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocAllGID_DOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllGID_DOC"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocGID_DOSN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocGID_DOSN"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocGID_DOSN(void)
{
  BSTR Value;
  this->get_DocGID_DOSN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocGID_DOSN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocGID_DOSN"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocTGID_DOSNT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTGID_DOSNT"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocTGID_DOSNT(void)
{
  BSTR Value;
  this->get_DocTGID_DOSNT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocTGID_DOSNT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTGID_DOSNT"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::NewDoc()
{
  _TDispID _dispid(*this, OLETEXT("NewDoc"), DISPID(34));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::OpenDoc(BSTR IdDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDoc"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = IdDoc /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::SaveDoc()
{
  _TDispID _dispid(*this, OLETEXT("SaveDoc"), DISPID(36));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::CloseDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseDoc"), DISPID(37));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::DvRegDoc()
{
  _TDispID _dispid(*this, OLETEXT("DvRegDoc"), DISPID(38));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::CancelDvRegDoc()
{
  _TDispID _dispid(*this, OLETEXT("CancelDvRegDoc"), DISPID(39));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::AddDocNewString()
{
  _TDispID _dispid(*this, OLETEXT("AddDocNewString"), DISPID(40));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::DeleteStringDoc()
{
  _TDispID _dispid(*this, OLETEXT("DeleteStringDoc"), DISPID(41));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::DeleteDoc(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteDoc"), DISPID(42));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/, 
                                             BSTR* id_doc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdDocPoNomeruDoc"), DISPID(43));
  TAutoArgs<2> _args;
  _args[1] = number_doc /*[VT_INT:0]*/;
  _args[2] = date_doc /*[VT_DATE:0]*/;
  return OutRetValSetterPtr(id_doc /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::GetIdDocPoNomeruDoc(int number_doc/*[in]*/, DATE date_doc/*[in]*/)
{
  BSTR id_doc;
  this->GetIdDocPoNomeruDoc(number_doc, date_doc, (BSTR*)&id_doc);
  return id_doc;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(44));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(45));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocTTNOM(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTTNOM"), DISPID(46));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocOstNomDispT<T>::get_DocTTNOM(void)
{
  int Value;
  this->get_DocTTNOM((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocTTNOM(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTTNOM"), DISPID(46));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_PrefiksDoc(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrefiksDoc"), DISPID(47));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_PrefiksDoc(void)
{
  BSTR Value;
  this->get_PrefiksDoc((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_PrefiksDoc(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrefiksDoc"), DISPID(47));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_NameBase(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameBase"), DISPID(48));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_NameBase(void)
{
  BSTR Value;
  this->get_NameBase((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDBASE_GALLDOC"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocOstNomDispT<T>::get_DocAllIDBASE_GALLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocOstNomDispT<T>::set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDBASE_GALLDOC"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprInfBase
// Interface: IOleDMSprInfBase
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::get_NameBase(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NameBase(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprInfBaseT<T>::get_NameBase(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NameBase((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::get_PrefiksBase(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_PrefiksBase(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprInfBaseT<T>::get_PrefiksBase(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_PrefiksBase((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprInfBaseT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprInfBaseT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEOF(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprInfBaseT<T>::get_TableEOF(void)
{
  int Value;
  OLECHECK(this->get_TableEOF((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::OpenTable(void)
{
  return (*this)->OpenTable();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::GetIdPoName(BSTR name/*[in]*/, BSTR* Id/*[out,retval]*/)
{
  return (*this)->GetIdPoName(name, Id);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprInfBaseT<T>::GetIdPoName(BSTR name/*[in]*/)
{
  BSTR Id = 0;
  OLECHECK(this->GetIdPoName(name/*[in]*/, (BSTR*)&Id));
  return Id;
}

// *********************************************************************//
// DispIntf:  IOleDMSprInfBase
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D8FD7D0D-A464-40C9-8530-852FB721E035}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::get_NameBase(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameBase"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprInfBaseDispT<T>::get_NameBase(void)
{
  BSTR Value;
  this->get_NameBase((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::get_PrefiksBase(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrefiksBase"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprInfBaseDispT<T>::get_PrefiksBase(void)
{
  BSTR Value;
  this->get_PrefiksBase((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprInfBaseDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprInfBaseDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::get_TableEOF(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEOF"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprInfBaseDispT<T>::get_TableEOF(void)
{
  int Value;
  this->get_TableEOF((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::OpenTable()
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::GetIdPoName(BSTR name/*[in]*/, BSTR* Id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdPoName"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Id /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprInfBaseDispT<T>::GetIdPoName(BSTR name/*[in]*/)
{
  BSTR Id;
  this->GetIdPoName(name, (BSTR*)&Id);
  return Id;
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMGurAllDoc
// Interface: TCOMIOleDMGurAllDoc
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMGurAllDoc, IOleDMGurAllDoc, &CLSID_OleDMGurAllDoc, &IID_IOleDMGurAllDoc> CoOleDMGurAllDoc;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDM
// Interface: TCOMIOleDM
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDM, IOleDM, &CLSID_OleDM, &IID_IOleDM> CoOleDM;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMSprSklad
// Interface: TCOMIOleDMSprSklad
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMSprSklad, IOleDMSprSklad, &CLSID_OleDMSprSklad, &IID_IOleDMSprSklad> CoOleDMSprSklad;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMSprFirm
// Interface: TCOMIOleDMSprFirm
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMSprFirm, IOleDMSprFirm, &CLSID_OleDMSprFirm, &IID_IOleDMSprFirm> CoOleDMSprFirm;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMSprNom
// Interface: TCOMIOleDMSprNom
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMSprNom, IOleDMSprNom, &CLSID_OleDMSprNom, &IID_IOleDMSprNom> CoOleDMSprNom;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMSprEd
// Interface: TCOMIOleDMSprEd
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMSprEd, IOleDMSprEd, &CLSID_OleDMSprEd, &IID_IOleDMSprEd> CoOleDMSprEd;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMDocRepKKM
// Interface: TCOMIOleDMDocRepKKM
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMDocRepKKM, IOleDMDocRepKKM, &CLSID_OleDMDocRepKKM, &IID_IOleDMDocRepKKM> CoOleDMDocRepKKM;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMSprGrpNom
// Interface: TCOMIOleDMSprGrpNom
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMSprGrpNom, IOleDMSprGrpNom, &CLSID_OleDMSprGrpNom, &IID_IOleDMSprGrpNom> CoOleDMSprGrpNom;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMSprTypePrice
// Interface: TCOMIOleDMSprTypePrice
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMSprTypePrice, IOleDMSprTypePrice, &CLSID_OleDMSprTypePrice, &IID_IOleDMSprTypePrice> CoOleDMSprTypePrice;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMSprPrice
// Interface: TCOMIOleDMSprPrice
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMSprPrice, IOleDMSprPrice, &CLSID_OleDMSprPrice, &IID_IOleDMSprPrice> CoOleDMSprPrice;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMDocPer
// Interface: TCOMIOleDMDocPer
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMDocPer, IOleDMDocPer, &CLSID_OleDMDocPer, &IID_IOleDMDocPer> CoOleDMDocPer;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMDocPrihNakl
// Interface: TCOMIOleDMDocPrihNakl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMDocPrihNakl, IOleDMDocPrihNakl, &CLSID_OleDMDocPrihNakl, &IID_IOleDMDocPrihNakl> CoOleDMDocPrihNakl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMDocReal
// Interface: TCOMIOleDMDocReal
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMDocReal, IOleDMDocReal, &CLSID_OleDMDocReal, &IID_IOleDMDocReal> CoOleDMDocReal;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMDocSpisNom
// Interface: TCOMIOleDMDocSpisNom
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMDocSpisNom, IOleDMDocSpisNom, &CLSID_OleDMDocSpisNom, &IID_IOleDMDocSpisNom> CoOleDMDocSpisNom;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMDocOstNom
// Interface: TCOMIOleDMDocOstNom
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMDocOstNom, IOleDMDocOstNom, &CLSID_OleDMDocOstNom, &IID_IOleDMDocOstNom> CoOleDMDocOstNom;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMSprInfBase
// Interface: TCOMIOleDMSprInfBase
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMSprInfBase, IOleDMSprInfBase, &CLSID_OleDMSprInfBase, &IID_IOleDMSprInfBase> CoOleDMSprInfBase;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Dbserv10_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Dbserv10_tlb;
#endif

#pragma option pop

#endif // DBServ10_TLBH
