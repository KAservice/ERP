// ************************************************************************ //
// WARNING
// -------
// The types declared in this file were generated from data read from a
// Type Library. If this type library is explicitly or indirectly (via
// another type library referring to this type library) re-imported, or the
// 'Refresh' command of the Type Library Editor activated while editing the
// Type Library, the contents of this file will be regenerated and all
// manual modifications will be lost.
// ************************************************************************ //

// $Rev: 18756 $
// File generated on 11.09.2010 15:13:26 from Type Library described below.

// ************************************************************************  //
// Type Lib: K:\Program\FIBPlus\FibProvider\FibProvider (1)
// LIBID: {F7F382DC-0C05-4C91-B834-FF06FCDA5A4B}
// LCID: 0
// Helpfile:
// HelpString:
// DepndLst:
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// ************************************************************************ //
#ifndef   FibProvider_TLBH
#define   FibProvider_TLBH

#pragma option push -b -a4 -w-inl

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Fibprovider_tlb
{

// *********************************************************************//
// HelpString:
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:
//   Type Libraries     : LIBID_xxxx
//   CoClasses          : CLSID_xxxx
//   DISPInterfaces     : DIID_xxxx
//   Non-DISP interfaces: IID_xxxx
// *********************************************************************//
extern __declspec (package) const GUID LIBID_FibProvider;
extern __declspec (package) const GUID IID_IQueryRead;
extern __declspec (package) const GUID CLSID_QueryRead;
extern __declspec (package) const GUID IID_IQueryUpdate;
extern __declspec (package) const GUID CLSID_QueryUpdate;
extern __declspec (package) const GUID IID_IDMConnectionImpl;
extern __declspec (package) const GUID CLSID_DMConnectionImpl;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary
// *********************************************************************//
interface DECLSPEC_UUID("{9067E6F0-E409-4886-972F-0A94E859DC18}") IQueryRead;
typedef TComInterface<IQueryRead, &IID_IQueryRead> IQueryReadPtr;

interface DECLSPEC_UUID("{A9CCA631-C937-4356-B893-B9A5FB0A35BC}") IQueryUpdate;
typedef TComInterface<IQueryUpdate, &IID_IQueryUpdate> IQueryUpdatePtr;

interface DECLSPEC_UUID("{9B017A0F-A0BD-40F2-AB93-56901A0CA2AA}") IDMConnectionImpl;
typedef TComInterface<IDMConnectionImpl, &IID_IDMConnectionImpl> IDMConnectionImplPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library
// (NOTE: Here we map each CoClass to its Default Interface)
//
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this
// TypeLibrary. It simplifies the updating of macros when CoClass name
// change.
// *********************************************************************//
typedef IQueryRead QueryRead;
typedef IQueryReadPtr QueryReadPtr;
typedef IQueryUpdate QueryUpdate;
typedef IQueryUpdatePtr QueryUpdatePtr;
typedef IDMConnectionImpl DMConnectionImpl;
typedef IDMConnectionImplPtr DMConnectionImplPtr;

#define LIBID_OF_QueryRead (&LIBID_FibProvider)
#define LIBID_OF_QueryUpdate (&LIBID_FibProvider)
#define LIBID_OF_DMConnectionImpl (&LIBID_FibProvider)
// *********************************************************************//
// Interface: IQueryRead
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9067E6F0-E409-4886-972F-0A94E859DC18}
// *********************************************************************//
interface IQueryRead  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_flError(int* result/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_RecordCount(int* Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_EOF_(int* result/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE CloseQuery(void) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE ClearTextSQL(void) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE SetTextSQL(BSTR text_sql/*[in]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE SetStringParamQuery(BSTR param_name/*[in]*/,
                                                        BSTR param_value/*[in]*/,
                                                        int* result/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE ExecQuery(int* result/*[out,retval]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE ExecProc(int* result/*[out,retval]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE NextRecord(int* result/*[out,retval]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE GetStringValueField(BSTR field_name/*[in]*/,
                                                        BSTR* result/*[out,retval]*/) = 0; // [212]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_flError(void)
  {
    int result;
    OLECHECK(this->get_flError((int*)&result));
    return result;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_RecordCount(void)
  {
    int Value;
    OLECHECK(this->get_RecordCount((int*)&Value));
    return Value;
  }

  int __fastcall get_EOF_(void)
  {
    int result;
    OLECHECK(this->get_EOF_((int*)&result));
    return result;
  }

  int __fastcall SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/)
  {
    int result;
    OLECHECK(this->SetStringParamQuery(param_name, param_value, (int*)&result));
    return result;
  }

  int __fastcall ExecQuery(void)
  {
    int result;
    OLECHECK(this->ExecQuery((int*)&result));
    return result;
  }

  int __fastcall ExecProc(void)
  {
    int result;
    OLECHECK(this->ExecProc((int*)&result));
    return result;
  }

  int __fastcall NextRecord(void)
  {
    int result;
    OLECHECK(this->NextRecord((int*)&result));
    return result;
  }

  BSTR __fastcall GetStringValueField(BSTR field_name/*[in]*/)
  {
    BSTR result = 0;
    OLECHECK(this->GetStringValueField(field_name, (BSTR*)&result));
    return result;
  }


  __property   int             flError = {read = get_flError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             RecordCount = {read = get_RecordCount};
  __property   int             EOF_ = {read = get_EOF_};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IQueryUpdate
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A9CCA631-C937-4356-B893-B9A5FB0A35BC}
// *********************************************************************//
interface IQueryUpdate  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_flError(int* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_RecordCount(int* Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_EOF_(int* Value/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE CloseQuery(void) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE ClearTextSQL(void) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE SetTextSQL(BSTR text_sql/*[in]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE SetStringParamQuery(BSTR param_name/*[in]*/,
                                                        BSTR param_value/*[in]*/,
                                                        int* result/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE ExecQuery(int* result/*[out,retval]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE ExecProc(int* result/*[out,retval]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE NextRecord(int* result/*[out,retval]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE GetStringValueField(BSTR field_name/*[in]*/,
                                                        BSTR* result/*[out,retval]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE StartTransaction(int* result/*[out,retval]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE CommitTransaction(int* result/*[out,retval]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE RollbackTransaction(int* result/*[out,retval]*/) = 0; // [215]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_flError(void)
  {
    int Value;
    OLECHECK(this->get_flError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_RecordCount(void)
  {
    int Value;
    OLECHECK(this->get_RecordCount((int*)&Value));
    return Value;
  }

  int __fastcall get_EOF_(void)
  {
    int Value;
    OLECHECK(this->get_EOF_((int*)&Value));
    return Value;
  }

  int __fastcall SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/)
  {
    int result;
    OLECHECK(this->SetStringParamQuery(param_name, param_value, (int*)&result));
    return result;
  }

  int __fastcall ExecQuery(void)
  {
    int result;
    OLECHECK(this->ExecQuery((int*)&result));
    return result;
  }

  int __fastcall ExecProc(void)
  {
    int result;
    OLECHECK(this->ExecProc((int*)&result));
    return result;
  }

  int __fastcall NextRecord(void)
  {
    int result;
    OLECHECK(this->NextRecord((int*)&result));
    return result;
  }

  BSTR __fastcall GetStringValueField(BSTR field_name/*[in]*/)
  {
    BSTR result = 0;
    OLECHECK(this->GetStringValueField(field_name, (BSTR*)&result));
    return result;
  }

  int __fastcall StartTransaction(void)
  {
    int result;
    OLECHECK(this->StartTransaction((int*)&result));
    return result;
  }

  int __fastcall CommitTransaction(void)
  {
    int result;
    OLECHECK(this->CommitTransaction((int*)&result));
    return result;
  }

  int __fastcall RollbackTransaction(void)
  {
    int result;
    OLECHECK(this->RollbackTransaction((int*)&result));
    return result;
  }


  __property   int             flError = {read = get_flError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             RecordCount = {read = get_RecordCount};
  __property   int             EOF_ = {read = get_EOF_};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IDMConnectionImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9B017A0F-A0BD-40F2-AB93-56901A0CA2AA}
// *********************************************************************//
interface IDMConnectionImpl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_flError(int* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectString(BSTR* Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_ConnectString(BSTR Value/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_UserName(BSTR* Value/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE set_UserName(BSTR Value/*[in]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE get_UserName2(BSTR* Value/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE set_UserName2(BSTR Value/*[in]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE set_Password(BSTR Value/*[in]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE get_RoleName(BSTR* Value/*[out,retval]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE set_RoleName(BSTR Value/*[in]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE get_CharSet(BSTR* Value/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE set_CharSet(BSTR Value/*[in]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE ConnectBase(int* result/*[out,retval]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE DisconnectBase(void) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE get_flConnected(int* Value/*[out,retval]*/) = 0; // [211]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_flError(void)
  {
    int Value;
    OLECHECK(this->get_flError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ConnectString(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ConnectString((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_UserName(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_UserName((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_UserName2(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_UserName2((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_RoleName(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_RoleName((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_CharSet(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_CharSet((BSTR*)&Value));
    return Value;
  }

  int __fastcall ConnectBase(void)
  {
    int result;
    OLECHECK(this->ConnectBase((int*)&result));
    return result;
  }

  int __fastcall get_flConnected(void)
  {
    int Value;
    OLECHECK(this->get_flConnected((int*)&Value));
    return Value;
  }


  __property   int             flError = {read = get_flError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   BSTR            ConnectString = {read = get_ConnectString, write = set_ConnectString};
  __property   BSTR            UserName = {read = get_UserName, write = set_UserName};
  __property   BSTR            UserName2 = {read = get_UserName2, write = set_UserName2};
  __property   BSTR            Password = {write = set_Password};
  __property   BSTR            RoleName = {read = get_RoleName, write = set_RoleName};
  __property   BSTR            CharSet = {read = get_CharSet, write = set_CharSet};
  __property   int             flConnected = {read = get_flConnected};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIQueryRead
// Interface: IQueryRead
// *********************************************************************//
template <class T /* IQueryRead */ >
class TCOMIQueryReadT : public TComInterface<IQueryRead>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIQueryReadT() {}
  TCOMIQueryReadT(IQueryRead *intf, bool addRef = false) : TComInterface<IQueryRead>(intf, addRef) {}
  TCOMIQueryReadT(const TCOMIQueryReadT& src) : TComInterface<IQueryRead>(src) {}
  TCOMIQueryReadT& operator=(const TCOMIQueryReadT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_flError(int* result/*[out,retval]*/);
  int             __fastcall get_flError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_RecordCount(int* Value/*[out,retval]*/);
  int             __fastcall get_RecordCount(void);
  HRESULT         __fastcall get_EOF_(int* result/*[out,retval]*/);
  int             __fastcall get_EOF_(void);
  HRESULT         __fastcall CloseQuery(void);
  HRESULT         __fastcall ClearTextSQL(void);
  HRESULT         __fastcall SetTextSQL(BSTR text_sql/*[in]*/);
  HRESULT         __fastcall SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/,
                                                 int* result/*[out,retval]*/);
  int             __fastcall SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/);
  HRESULT         __fastcall ExecQuery(int* result/*[out,retval]*/);
  int             __fastcall ExecQuery(void);
  HRESULT         __fastcall ExecProc(int* result/*[out,retval]*/);
  int             __fastcall ExecProc(void);
  HRESULT         __fastcall NextRecord(int* result/*[out,retval]*/);
  int             __fastcall NextRecord(void);
  HRESULT         __fastcall GetStringValueField(BSTR field_name/*[in]*/,
                                                 BSTR* result/*[out,retval]*/);
  BSTR            __fastcall GetStringValueField(BSTR field_name/*[in]*/);

  __property   int             flError = {read = get_flError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             RecordCount = {read = get_RecordCount};
  __property   int             EOF_ = {read = get_EOF_};
};
typedef TCOMIQueryReadT<IQueryRead> TCOMIQueryRead;

// *********************************************************************//
// DispIntf:  IQueryRead
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9067E6F0-E409-4886-972F-0A94E859DC18}
// *********************************************************************//
template<class T>
class IQueryReadDispT : public TAutoDriver<IQueryRead>
{
public:
  IQueryReadDispT(){}

  IQueryReadDispT(IQueryRead *pintf)
  {
    TAutoDriver<IQueryRead>::Bind(pintf, false);
  }

  IQueryReadDispT(IQueryReadPtr pintf)
  {
    TAutoDriver<IQueryRead>::Bind(pintf, true);
  }

  IQueryReadDispT& operator=(IQueryRead *pintf)
  {
    TAutoDriver<IQueryRead>::Bind(pintf, false);
    return *this;
  }

  IQueryReadDispT& operator=(IQueryReadPtr pintf)
  {
    TAutoDriver<IQueryRead>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_QueryRead));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_QueryRead);
  }

  HRESULT         __fastcall get_flError(int* result/*[out,retval]*/);
  int             __fastcall get_flError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_RecordCount(int* Value/*[out,retval]*/);
  int             __fastcall get_RecordCount(void);
  HRESULT         __fastcall get_EOF_(int* result/*[out,retval]*/);
  int             __fastcall get_EOF_(void);
  HRESULT         __fastcall CloseQuery();
  HRESULT         __fastcall ClearTextSQL();
  HRESULT         __fastcall SetTextSQL(BSTR text_sql/*[in]*/);
  HRESULT         __fastcall SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/,
                                                 int* result/*[out,retval]*/);
  int             __fastcall SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/);
  HRESULT         __fastcall ExecQuery(int* result/*[out,retval]*/);
  int             __fastcall ExecQuery(void);
  HRESULT         __fastcall ExecProc(int* result/*[out,retval]*/);
  int             __fastcall ExecProc(void);
  HRESULT         __fastcall NextRecord(int* result/*[out,retval]*/);
  int             __fastcall NextRecord(void);
  HRESULT         __fastcall GetStringValueField(BSTR field_name/*[in]*/,
                                                 BSTR* result/*[out,retval]*/);
  BSTR            __fastcall GetStringValueField(BSTR field_name/*[in]*/);

  __property   int             flError = {read = get_flError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             RecordCount = {read = get_RecordCount};
  __property   int             EOF_ = {read = get_EOF_};
};
typedef IQueryReadDispT<IQueryRead> IQueryReadDisp;

// *********************************************************************//
// SmartIntf: TCOMIQueryUpdate
// Interface: IQueryUpdate
// *********************************************************************//
template <class T /* IQueryUpdate */ >
class TCOMIQueryUpdateT : public TComInterface<IQueryUpdate>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIQueryUpdateT() {}
  TCOMIQueryUpdateT(IQueryUpdate *intf, bool addRef = false) : TComInterface<IQueryUpdate>(intf, addRef) {}
  TCOMIQueryUpdateT(const TCOMIQueryUpdateT& src) : TComInterface<IQueryUpdate>(src) {}
  TCOMIQueryUpdateT& operator=(const TCOMIQueryUpdateT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_flError(int* Value/*[out,retval]*/);
  int             __fastcall get_flError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_RecordCount(int* Value/*[out,retval]*/);
  int             __fastcall get_RecordCount(void);
  HRESULT         __fastcall get_EOF_(int* Value/*[out,retval]*/);
  int             __fastcall get_EOF_(void);
  HRESULT         __fastcall CloseQuery(void);
  HRESULT         __fastcall ClearTextSQL(void);
  HRESULT         __fastcall SetTextSQL(BSTR text_sql/*[in]*/);
  HRESULT         __fastcall SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/,
                                                 int* result/*[out,retval]*/);
  int             __fastcall SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/);
  HRESULT         __fastcall ExecQuery(int* result/*[out,retval]*/);
  int             __fastcall ExecQuery(void);
  HRESULT         __fastcall ExecProc(int* result/*[out,retval]*/);
  int             __fastcall ExecProc(void);
  HRESULT         __fastcall NextRecord(int* result/*[out,retval]*/);
  int             __fastcall NextRecord(void);
  HRESULT         __fastcall GetStringValueField(BSTR field_name/*[in]*/,
                                                 BSTR* result/*[out,retval]*/);
  BSTR            __fastcall GetStringValueField(BSTR field_name/*[in]*/);
  HRESULT         __fastcall StartTransaction(int* result/*[out,retval]*/);
  int             __fastcall StartTransaction(void);
  HRESULT         __fastcall CommitTransaction(int* result/*[out,retval]*/);
  int             __fastcall CommitTransaction(void);
  HRESULT         __fastcall RollbackTransaction(int* result/*[out,retval]*/);
  int             __fastcall RollbackTransaction(void);

  __property   int             flError = {read = get_flError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             RecordCount = {read = get_RecordCount};
  __property   int             EOF_ = {read = get_EOF_};
};
typedef TCOMIQueryUpdateT<IQueryUpdate> TCOMIQueryUpdate;

// *********************************************************************//
// DispIntf:  IQueryUpdate
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A9CCA631-C937-4356-B893-B9A5FB0A35BC}
// *********************************************************************//
template<class T>
class IQueryUpdateDispT : public TAutoDriver<IQueryUpdate>
{
public:
  IQueryUpdateDispT(){}

  IQueryUpdateDispT(IQueryUpdate *pintf)
  {
    TAutoDriver<IQueryUpdate>::Bind(pintf, false);
  }

  IQueryUpdateDispT(IQueryUpdatePtr pintf)
  {
    TAutoDriver<IQueryUpdate>::Bind(pintf, true);
  }

  IQueryUpdateDispT& operator=(IQueryUpdate *pintf)
  {
    TAutoDriver<IQueryUpdate>::Bind(pintf, false);
    return *this;
  }

  IQueryUpdateDispT& operator=(IQueryUpdatePtr pintf)
  {
    TAutoDriver<IQueryUpdate>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_QueryUpdate));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_QueryUpdate);
  }

  HRESULT         __fastcall get_flError(int* Value/*[out,retval]*/);
  int             __fastcall get_flError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_RecordCount(int* Value/*[out,retval]*/);
  int             __fastcall get_RecordCount(void);
  HRESULT         __fastcall get_EOF_(int* Value/*[out,retval]*/);
  int             __fastcall get_EOF_(void);
  HRESULT         __fastcall CloseQuery();
  HRESULT         __fastcall ClearTextSQL();
  HRESULT         __fastcall SetTextSQL(BSTR text_sql/*[in]*/);
  HRESULT         __fastcall SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/,
                                                 int* result/*[out,retval]*/);
  int             __fastcall SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/);
  HRESULT         __fastcall ExecQuery(int* result/*[out,retval]*/);
  int             __fastcall ExecQuery(void);
  HRESULT         __fastcall ExecProc(int* result/*[out,retval]*/);
  int             __fastcall ExecProc(void);
  HRESULT         __fastcall NextRecord(int* result/*[out,retval]*/);
  int             __fastcall NextRecord(void);
  HRESULT         __fastcall GetStringValueField(BSTR field_name/*[in]*/,
                                                 BSTR* result/*[out,retval]*/);
  BSTR            __fastcall GetStringValueField(BSTR field_name/*[in]*/);
  HRESULT         __fastcall StartTransaction(int* result/*[out,retval]*/);
  int             __fastcall StartTransaction(void);
  HRESULT         __fastcall CommitTransaction(int* result/*[out,retval]*/);
  int             __fastcall CommitTransaction(void);
  HRESULT         __fastcall RollbackTransaction(int* result/*[out,retval]*/);
  int             __fastcall RollbackTransaction(void);

  __property   int             flError = {read = get_flError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             RecordCount = {read = get_RecordCount};
  __property   int             EOF_ = {read = get_EOF_};
};
typedef IQueryUpdateDispT<IQueryUpdate> IQueryUpdateDisp;

// *********************************************************************//
// SmartIntf: TCOMIDMConnectionImpl
// Interface: IDMConnectionImpl
// *********************************************************************//
template <class T /* IDMConnectionImpl */ >
class TCOMIDMConnectionImplT : public TComInterface<IDMConnectionImpl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIDMConnectionImplT() {}
  TCOMIDMConnectionImplT(IDMConnectionImpl *intf, bool addRef = false) : TComInterface<IDMConnectionImpl>(intf, addRef) {}
  TCOMIDMConnectionImplT(const TCOMIDMConnectionImplT& src) : TComInterface<IDMConnectionImpl>(src) {}
  TCOMIDMConnectionImplT& operator=(const TCOMIDMConnectionImplT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_flError(int* Value/*[out,retval]*/);
  int             __fastcall get_flError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_ConnectString(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ConnectString(void);
  HRESULT         __fastcall set_ConnectString(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_UserName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall set_UserName(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_UserName2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_UserName2(void);
  HRESULT         __fastcall set_UserName2(BSTR Value/*[in]*/);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_RoleName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RoleName(void);
  HRESULT         __fastcall set_RoleName(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CharSet(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_CharSet(void);
  HRESULT         __fastcall set_CharSet(BSTR Value/*[in]*/);
  HRESULT         __fastcall ConnectBase(int* result/*[out,retval]*/);
  int             __fastcall ConnectBase(void);
  HRESULT         __fastcall DisconnectBase(void);
  HRESULT         __fastcall get_flConnected(int* Value/*[out,retval]*/);
  int             __fastcall get_flConnected(void);

  __property   int             flError = {read = get_flError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   BSTR            ConnectString = {read = get_ConnectString, write = set_ConnectString};
  __property   BSTR            UserName = {read = get_UserName, write = set_UserName};
  __property   BSTR            UserName2 = {read = get_UserName2, write = set_UserName2};
  __property   BSTR            Password = {write = set_Password};
  __property   BSTR            RoleName = {read = get_RoleName, write = set_RoleName};
  __property   BSTR            CharSet = {read = get_CharSet, write = set_CharSet};
  __property   int             flConnected = {read = get_flConnected};
};
typedef TCOMIDMConnectionImplT<IDMConnectionImpl> TCOMIDMConnectionImpl;

// *********************************************************************//
// DispIntf:  IDMConnectionImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9B017A0F-A0BD-40F2-AB93-56901A0CA2AA}
// *********************************************************************//
template<class T>
class IDMConnectionImplDispT : public TAutoDriver<IDMConnectionImpl>
{
public:
  IDMConnectionImplDispT(){}

  IDMConnectionImplDispT(IDMConnectionImpl *pintf)
  {
    TAutoDriver<IDMConnectionImpl>::Bind(pintf, false);
  }

  IDMConnectionImplDispT(IDMConnectionImplPtr pintf)
  {
    TAutoDriver<IDMConnectionImpl>::Bind(pintf, true);
  }

  IDMConnectionImplDispT& operator=(IDMConnectionImpl *pintf)
  {
    TAutoDriver<IDMConnectionImpl>::Bind(pintf, false);
    return *this;
  }

  IDMConnectionImplDispT& operator=(IDMConnectionImplPtr pintf)
  {
    TAutoDriver<IDMConnectionImpl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DMConnectionImpl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DMConnectionImpl);
  }

  HRESULT         __fastcall get_flError(int* Value/*[out,retval]*/);
  int             __fastcall get_flError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_ConnectString(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ConnectString(void);
  HRESULT         __fastcall set_ConnectString(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_UserName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall set_UserName(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_UserName2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_UserName2(void);
  HRESULT         __fastcall set_UserName2(BSTR Value/*[in]*/);
  HRESULT         __fastcall set_Password(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_RoleName(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RoleName(void);
  HRESULT         __fastcall set_RoleName(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CharSet(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_CharSet(void);
  HRESULT         __fastcall set_CharSet(BSTR Value/*[in]*/);
  HRESULT         __fastcall ConnectBase(int* result/*[out,retval]*/);
  int             __fastcall ConnectBase(void);
  HRESULT         __fastcall DisconnectBase();
  HRESULT         __fastcall get_flConnected(int* Value/*[out,retval]*/);
  int             __fastcall get_flConnected(void);

  __property   int             flError = {read = get_flError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   BSTR            ConnectString = {read = get_ConnectString, write = set_ConnectString};
  __property   BSTR            UserName = {read = get_UserName, write = set_UserName};
  __property   BSTR            UserName2 = {read = get_UserName2, write = set_UserName2};
  __property   BSTR            Password = {write = set_Password};
  __property   BSTR            RoleName = {read = get_RoleName, write = set_RoleName};
  __property   BSTR            CharSet = {read = get_CharSet, write = set_CharSet};
  __property   int             flConnected = {read = get_flConnected};
};
typedef IDMConnectionImplDispT<IDMConnectionImpl> IDMConnectionImplDisp;

// *********************************************************************//
// SmartIntf: TCOMIQueryRead
// Interface: IQueryRead
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIQueryReadT<T>::get_flError(int* result/*[out,retval]*/)
{
  return (*this)->get_flError(result);
}

template <class T> int __fastcall
TCOMIQueryReadT<T>::get_flError(void)
{
  int result;
  OLECHECK(this->get_flError((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIQueryReadT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIQueryReadT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIQueryReadT<T>::get_RecordCount(int* Value/*[out,retval]*/)
{
  return (*this)->get_RecordCount(Value);
}

template <class T> int __fastcall
TCOMIQueryReadT<T>::get_RecordCount(void)
{
  int Value;
  OLECHECK(this->get_RecordCount((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIQueryReadT<T>::get_EOF_(int* result/*[out,retval]*/)
{
  return (*this)->get_EOF_(result);
}

template <class T> int __fastcall
TCOMIQueryReadT<T>::get_EOF_(void)
{
  int result;
  OLECHECK(this->get_EOF_((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIQueryReadT<T>::CloseQuery(void)
{
  return (*this)->CloseQuery();
}

template <class T> HRESULT __fastcall
TCOMIQueryReadT<T>::ClearTextSQL(void)
{
  return (*this)->ClearTextSQL();
}

template <class T> HRESULT __fastcall
TCOMIQueryReadT<T>::SetTextSQL(BSTR text_sql/*[in]*/)
{
  return (*this)->SetTextSQL(text_sql);
}

template <class T> HRESULT __fastcall
TCOMIQueryReadT<T>::SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/,
                                        int* result/*[out,retval]*/)
{
  return (*this)->SetStringParamQuery(param_name, param_value, result);
}

template <class T> int __fastcall
TCOMIQueryReadT<T>::SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/)
{
  int result;
  OLECHECK(this->SetStringParamQuery(param_name/*[in]*/, param_value/*[in]*/, (int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIQueryReadT<T>::ExecQuery(int* result/*[out,retval]*/)
{
  return (*this)->ExecQuery(result);
}

template <class T> int __fastcall
TCOMIQueryReadT<T>::ExecQuery(void)
{
  int result;
  OLECHECK(this->ExecQuery((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIQueryReadT<T>::ExecProc(int* result/*[out,retval]*/)
{
  return (*this)->ExecProc(result);
}

template <class T> int __fastcall
TCOMIQueryReadT<T>::ExecProc(void)
{
  int result;
  OLECHECK(this->ExecProc((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIQueryReadT<T>::NextRecord(int* result/*[out,retval]*/)
{
  return (*this)->NextRecord(result);
}

template <class T> int __fastcall
TCOMIQueryReadT<T>::NextRecord(void)
{
  int result;
  OLECHECK(this->NextRecord((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIQueryReadT<T>::GetStringValueField(BSTR field_name/*[in]*/, BSTR* result/*[out,retval]*/)
{
  return (*this)->GetStringValueField(field_name, result);
}

template <class T> BSTR __fastcall
TCOMIQueryReadT<T>::GetStringValueField(BSTR field_name/*[in]*/)
{
  BSTR result = 0;
  OLECHECK(this->GetStringValueField(field_name/*[in]*/, (BSTR*)&result));
  return result;
}

// *********************************************************************//
// DispIntf:  IQueryRead
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9067E6F0-E409-4886-972F-0A94E859DC18}
// *********************************************************************//
template <class T> HRESULT __fastcall
IQueryReadDispT<T>::get_flError(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("flError"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IQueryReadDispT<T>::get_flError(void)
{
  int result;
  this->get_flError((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IQueryReadDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQueryReadDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IQueryReadDispT<T>::get_RecordCount(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordCount"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IQueryReadDispT<T>::get_RecordCount(void)
{
  int Value;
  this->get_RecordCount((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IQueryReadDispT<T>::get_EOF_(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Eof"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IQueryReadDispT<T>::get_EOF_(void)
{
  int result;
  this->get_EOF_((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IQueryReadDispT<T>::CloseQuery()
{
  _TDispID _dispid(*this, OLETEXT("CloseQuery"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IQueryReadDispT<T>::ClearTextSQL()
{
  _TDispID _dispid(*this, OLETEXT("ClearTextSQL"), DISPID(206));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IQueryReadDispT<T>::SetTextSQL(BSTR text_sql/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTextSQL"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = text_sql /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IQueryReadDispT<T>::SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/,
                                        int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetStringParamQuery"), DISPID(208));
  TAutoArgs<2> _args;
  _args[1] = param_name /*[VT_BSTR:0]*/;
  _args[2] = param_value /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IQueryReadDispT<T>::SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/)
{
  int result;
  this->SetStringParamQuery(param_name, param_value, (int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IQueryReadDispT<T>::ExecQuery(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExecQuery"), DISPID(209));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IQueryReadDispT<T>::ExecQuery(void)
{
  int result;
  this->ExecQuery((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IQueryReadDispT<T>::ExecProc(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExecProc"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IQueryReadDispT<T>::ExecProc(void)
{
  int result;
  this->ExecProc((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IQueryReadDispT<T>::NextRecord(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NextRecord"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IQueryReadDispT<T>::NextRecord(void)
{
  int result;
  this->NextRecord((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IQueryReadDispT<T>::GetStringValueField(BSTR field_name/*[in]*/, BSTR* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetStringValueField"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = field_name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IQueryReadDispT<T>::GetStringValueField(BSTR field_name/*[in]*/)
{
  BSTR result;
  this->GetStringValueField(field_name, (BSTR*)&result);
  return result;
}

// *********************************************************************//
// SmartIntf: TCOMIQueryUpdate
// Interface: IQueryUpdate
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIQueryUpdateT<T>::get_flError(int* Value/*[out,retval]*/)
{
  return (*this)->get_flError(Value);
}

template <class T> int __fastcall
TCOMIQueryUpdateT<T>::get_flError(void)
{
  int Value;
  OLECHECK(this->get_flError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIQueryUpdateT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIQueryUpdateT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIQueryUpdateT<T>::get_RecordCount(int* Value/*[out,retval]*/)
{
  return (*this)->get_RecordCount(Value);
}

template <class T> int __fastcall
TCOMIQueryUpdateT<T>::get_RecordCount(void)
{
  int Value;
  OLECHECK(this->get_RecordCount((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIQueryUpdateT<T>::get_EOF_(int* Value/*[out,retval]*/)
{
  return (*this)->get_EOF_(Value);
}

template <class T> int __fastcall
TCOMIQueryUpdateT<T>::get_EOF_(void)
{
  int Value;
  OLECHECK(this->get_EOF_((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIQueryUpdateT<T>::CloseQuery(void)
{
  return (*this)->CloseQuery();
}

template <class T> HRESULT __fastcall
TCOMIQueryUpdateT<T>::ClearTextSQL(void)
{
  return (*this)->ClearTextSQL();
}

template <class T> HRESULT __fastcall
TCOMIQueryUpdateT<T>::SetTextSQL(BSTR text_sql/*[in]*/)
{
  return (*this)->SetTextSQL(text_sql);
}

template <class T> HRESULT __fastcall
TCOMIQueryUpdateT<T>::SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/,
                                          int* result/*[out,retval]*/)
{
  return (*this)->SetStringParamQuery(param_name, param_value, result);
}

template <class T> int __fastcall
TCOMIQueryUpdateT<T>::SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/)
{
  int result;
  OLECHECK(this->SetStringParamQuery(param_name/*[in]*/, param_value/*[in]*/, (int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIQueryUpdateT<T>::ExecQuery(int* result/*[out,retval]*/)
{
  return (*this)->ExecQuery(result);
}

template <class T> int __fastcall
TCOMIQueryUpdateT<T>::ExecQuery(void)
{
  int result;
  OLECHECK(this->ExecQuery((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIQueryUpdateT<T>::ExecProc(int* result/*[out,retval]*/)
{
  return (*this)->ExecProc(result);
}

template <class T> int __fastcall
TCOMIQueryUpdateT<T>::ExecProc(void)
{
  int result;
  OLECHECK(this->ExecProc((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIQueryUpdateT<T>::NextRecord(int* result/*[out,retval]*/)
{
  return (*this)->NextRecord(result);
}

template <class T> int __fastcall
TCOMIQueryUpdateT<T>::NextRecord(void)
{
  int result;
  OLECHECK(this->NextRecord((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIQueryUpdateT<T>::GetStringValueField(BSTR field_name/*[in]*/, BSTR* result/*[out,retval]*/)
{
  return (*this)->GetStringValueField(field_name, result);
}

template <class T> BSTR __fastcall
TCOMIQueryUpdateT<T>::GetStringValueField(BSTR field_name/*[in]*/)
{
  BSTR result = 0;
  OLECHECK(this->GetStringValueField(field_name/*[in]*/, (BSTR*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIQueryUpdateT<T>::StartTransaction(int* result/*[out,retval]*/)
{
  return (*this)->StartTransaction(result);
}

template <class T> int __fastcall
TCOMIQueryUpdateT<T>::StartTransaction(void)
{
  int result;
  OLECHECK(this->StartTransaction((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIQueryUpdateT<T>::CommitTransaction(int* result/*[out,retval]*/)
{
  return (*this)->CommitTransaction(result);
}

template <class T> int __fastcall
TCOMIQueryUpdateT<T>::CommitTransaction(void)
{
  int result;
  OLECHECK(this->CommitTransaction((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIQueryUpdateT<T>::RollbackTransaction(int* result/*[out,retval]*/)
{
  return (*this)->RollbackTransaction(result);
}

template <class T> int __fastcall
TCOMIQueryUpdateT<T>::RollbackTransaction(void)
{
  int result;
  OLECHECK(this->RollbackTransaction((int*)&result));
  return result;
}

// *********************************************************************//
// DispIntf:  IQueryUpdate
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A9CCA631-C937-4356-B893-B9A5FB0A35BC}
// *********************************************************************//
template <class T> HRESULT __fastcall
IQueryUpdateDispT<T>::get_flError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("flError"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IQueryUpdateDispT<T>::get_flError(void)
{
  int Value;
  this->get_flError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IQueryUpdateDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQueryUpdateDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IQueryUpdateDispT<T>::get_RecordCount(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordCount"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IQueryUpdateDispT<T>::get_RecordCount(void)
{
  int Value;
  this->get_RecordCount((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IQueryUpdateDispT<T>::get_EOF_(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Eof"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IQueryUpdateDispT<T>::get_EOF_(void)
{
  int Value;
  this->get_EOF_((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IQueryUpdateDispT<T>::CloseQuery()
{
  _TDispID _dispid(*this, OLETEXT("CloseQuery"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IQueryUpdateDispT<T>::ClearTextSQL()
{
  _TDispID _dispid(*this, OLETEXT("ClearTextSQL"), DISPID(206));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IQueryUpdateDispT<T>::SetTextSQL(BSTR text_sql/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTextSQL"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = text_sql /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IQueryUpdateDispT<T>::SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/,
                                          int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetStringParamQuery"), DISPID(208));
  TAutoArgs<2> _args;
  _args[1] = param_name /*[VT_BSTR:0]*/;
  _args[2] = param_value /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IQueryUpdateDispT<T>::SetStringParamQuery(BSTR param_name/*[in]*/, BSTR param_value/*[in]*/)
{
  int result;
  this->SetStringParamQuery(param_name, param_value, (int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IQueryUpdateDispT<T>::ExecQuery(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExecQuery"), DISPID(209));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IQueryUpdateDispT<T>::ExecQuery(void)
{
  int result;
  this->ExecQuery((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IQueryUpdateDispT<T>::ExecProc(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExecProc"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IQueryUpdateDispT<T>::ExecProc(void)
{
  int result;
  this->ExecProc((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IQueryUpdateDispT<T>::NextRecord(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NextRecord"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IQueryUpdateDispT<T>::NextRecord(void)
{
  int result;
  this->NextRecord((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IQueryUpdateDispT<T>::GetStringValueField(BSTR field_name/*[in]*/, BSTR* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetStringValueField"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = field_name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IQueryUpdateDispT<T>::GetStringValueField(BSTR field_name/*[in]*/)
{
  BSTR result;
  this->GetStringValueField(field_name, (BSTR*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IQueryUpdateDispT<T>::StartTransaction(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartTransaction"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IQueryUpdateDispT<T>::StartTransaction(void)
{
  int result;
  this->StartTransaction((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IQueryUpdateDispT<T>::CommitTransaction(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommitTransaction"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IQueryUpdateDispT<T>::CommitTransaction(void)
{
  int result;
  this->CommitTransaction((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IQueryUpdateDispT<T>::RollbackTransaction(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RollbackTransaction"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IQueryUpdateDispT<T>::RollbackTransaction(void)
{
  int result;
  this->RollbackTransaction((int*)&result);
  return result;
}

// *********************************************************************//
// SmartIntf: TCOMIDMConnectionImpl
// Interface: IDMConnectionImpl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIDMConnectionImplT<T>::get_flError(int* Value/*[out,retval]*/)
{
  return (*this)->get_flError(Value);
}

template <class T> int __fastcall
TCOMIDMConnectionImplT<T>::get_flError(void)
{
  int Value;
  OLECHECK(this->get_flError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMConnectionImplT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIDMConnectionImplT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMConnectionImplT<T>::get_ConnectString(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ConnectString(Value);
}

template <class T> BSTR __fastcall
TCOMIDMConnectionImplT<T>::get_ConnectString(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ConnectString((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMConnectionImplT<T>::set_ConnectString(BSTR Value/*[in]*/)
{
  return (*this)->set_ConnectString(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMConnectionImplT<T>::get_UserName(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_UserName(Value);
}

template <class T> BSTR __fastcall
TCOMIDMConnectionImplT<T>::get_UserName(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_UserName((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMConnectionImplT<T>::set_UserName(BSTR Value/*[in]*/)
{
  return (*this)->set_UserName(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMConnectionImplT<T>::get_UserName2(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_UserName2(Value);
}

template <class T> BSTR __fastcall
TCOMIDMConnectionImplT<T>::get_UserName2(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_UserName2((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMConnectionImplT<T>::set_UserName2(BSTR Value/*[in]*/)
{
  return (*this)->set_UserName2(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMConnectionImplT<T>::set_Password(BSTR Value/*[in]*/)
{
  return (*this)->set_Password(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMConnectionImplT<T>::get_RoleName(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_RoleName(Value);
}

template <class T> BSTR __fastcall
TCOMIDMConnectionImplT<T>::get_RoleName(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_RoleName((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMConnectionImplT<T>::set_RoleName(BSTR Value/*[in]*/)
{
  return (*this)->set_RoleName(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMConnectionImplT<T>::get_CharSet(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_CharSet(Value);
}

template <class T> BSTR __fastcall
TCOMIDMConnectionImplT<T>::get_CharSet(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_CharSet((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMConnectionImplT<T>::set_CharSet(BSTR Value/*[in]*/)
{
  return (*this)->set_CharSet(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMConnectionImplT<T>::ConnectBase(int* result/*[out,retval]*/)
{
  return (*this)->ConnectBase(result);
}

template <class T> int __fastcall
TCOMIDMConnectionImplT<T>::ConnectBase(void)
{
  int result;
  OLECHECK(this->ConnectBase((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIDMConnectionImplT<T>::DisconnectBase(void)
{
  return (*this)->DisconnectBase();
}

template <class T> HRESULT __fastcall
TCOMIDMConnectionImplT<T>::get_flConnected(int* Value/*[out,retval]*/)
{
  return (*this)->get_flConnected(Value);
}

template <class T> int __fastcall
TCOMIDMConnectionImplT<T>::get_flConnected(void)
{
  int Value;
  OLECHECK(this->get_flConnected((int*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IDMConnectionImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9B017A0F-A0BD-40F2-AB93-56901A0CA2AA}
// *********************************************************************//
template <class T> HRESULT __fastcall
IDMConnectionImplDispT<T>::get_flError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("flError"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IDMConnectionImplDispT<T>::get_flError(void)
{
  int Value;
  this->get_flError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMConnectionImplDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDMConnectionImplDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMConnectionImplDispT<T>::get_ConnectString(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectString"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDMConnectionImplDispT<T>::get_ConnectString(void)
{
  BSTR Value;
  this->get_ConnectString((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMConnectionImplDispT<T>::set_ConnectString(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectString"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMConnectionImplDispT<T>::get_UserName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDMConnectionImplDispT<T>::get_UserName(void)
{
  BSTR Value;
  this->get_UserName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMConnectionImplDispT<T>::set_UserName(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMConnectionImplDispT<T>::get_UserName2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName2"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDMConnectionImplDispT<T>::get_UserName2(void)
{
  BSTR Value;
  this->get_UserName2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMConnectionImplDispT<T>::set_UserName2(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName2"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMConnectionImplDispT<T>::set_Password(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMConnectionImplDispT<T>::get_RoleName(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RoleName"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDMConnectionImplDispT<T>::get_RoleName(void)
{
  BSTR Value;
  this->get_RoleName((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMConnectionImplDispT<T>::set_RoleName(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RoleName"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMConnectionImplDispT<T>::get_CharSet(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CharSet"), DISPID(208));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDMConnectionImplDispT<T>::get_CharSet(void)
{
  BSTR Value;
  this->get_CharSet((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMConnectionImplDispT<T>::set_CharSet(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CharSet"), DISPID(208));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMConnectionImplDispT<T>::ConnectBase(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectBase"), DISPID(209));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IDMConnectionImplDispT<T>::ConnectBase(void)
{
  int result;
  this->ConnectBase((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IDMConnectionImplDispT<T>::DisconnectBase()
{
  _TDispID _dispid(*this, OLETEXT("DisconnectBase"), DISPID(210));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IDMConnectionImplDispT<T>::get_flConnected(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("flConnected"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IDMConnectionImplDispT<T>::get_flConnected(void)
{
  int Value;
  this->get_flConnected((int*)&Value);
  return Value;
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that
// provide static Create() and CreateRemote(LPWSTR machineName) methods
// for creating an instance of an exposed object. These functions can
// be used by client wishing to automate CoClasses exposed by this
// typelibrary.
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : QueryRead
// Interface: TCOMIQueryRead
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIQueryRead, IQueryRead, &CLSID_QueryRead, &IID_IQueryRead> CoQueryRead;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : QueryUpdate
// Interface: TCOMIQueryUpdate
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIQueryUpdate, IQueryUpdate, &CLSID_QueryUpdate, &IID_IQueryUpdate> CoQueryUpdate;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DMConnectionImpl
// Interface: TCOMIDMConnectionImpl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIDMConnectionImpl, IDMConnectionImpl, &CLSID_DMConnectionImpl, &IID_IDMConnectionImpl> CoDMConnectionImpl;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Fibprovider_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Fibprovider_tlb;
#endif

#pragma option pop

#endif // FibProvider_TLBH

