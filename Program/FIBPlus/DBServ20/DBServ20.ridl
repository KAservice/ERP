// ************************************************************************ //
// WARNING
// -------
// This file is generated by the Type Library importer or Type Libary Editor.
// Barring syntax errors, the Editor will parse modifications made to the file.
// However, when applying changes via the Editor this file will be regenerated
// and comments or formatting changes will be lost.
// ************************************************************************ //
// File generated on 09.09.2010 11:03:37 (- $Rev: 12980 $, 7238187).

[
  uuid(67436983-B658-40C7-AD92-CAD54DCB46AB),
  version(1.0),
  helpstring("DBServ20 Library")

]
library DBServ20
{

  importlib("stdole2.tlb");

  interface IOleDM;
  coclass OleDM;
  interface IOleDMGurAllDoc;
  coclass OleDMGurAllDoc;
  interface IOleDMSprSklad;
  coclass OleDMSprSklad;
  interface IOleDMSprFirm;
  coclass OleDMSprFirm;
  interface IOleDMSprInfBase;
  coclass OleDMSprInfBase;
  interface IOleDMSprEd;
  coclass OleDMSprEd;
  interface IOleDMSprGrpNom;
  coclass OleDMSprGrpNom;
  interface IOleDMSprNom;
  coclass OleDMSprNom;
  interface IOleDMSprTypePrice;
  coclass OleDMSprTypePrice;
  interface IOleDMSprPrice;
  coclass OleDMSprPrice;
  interface IOleDMDocReal;
  coclass OleDMDocReal;


  [
    uuid(74F3797D-8754-4353-9F62-A786056ADDE4),
    version(1.0),
    helpstring("Dispatch interface for OleDM Object"),
    dual,
    oleautomation
  ]
  interface IOleDM: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall ConnectString([out, retval] BSTR* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall ConnectString([in] BSTR Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall PasswordUser([in] BSTR Param1);
    [propget, id(0x000000CD)]
    HRESULT _stdcall NameUser([out, retval] BSTR* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall NameUser([in] BSTR Value);
    [id(0x000000CE)]
    HRESULT _stdcall GlobConnect(void);
    [propget, id(0x000000CF)]
    HRESULT _stdcall ConnectOK([out, retval] int* Value);
  };

  [
    uuid(76C6259A-F143-4E40-9EBE-838B44404770),
    version(1.0),
    helpstring("Dispatch interface for OleDMGurAllDoc Object"),
    dual,
    oleautomation
  ]
  interface IOleDMGurAllDoc: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall PosNach([out, retval] BSTR* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall PosNach([in] BSTR Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall PosCon([out, retval] BSTR* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall PosCon([in] BSTR Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall IdDoc([out, retval] BSTR* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall IdDoc([in] BSTR Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall IdKlient([out, retval] BSTR* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall IdKlient([in] BSTR Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall IdSklad([out, retval] BSTR* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall IdSklad([in] BSTR Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall IdFirm([out, retval] BSTR* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall IdFirm([in] BSTR Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall StringTypeDoc([out, retval] BSTR* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall StringTypeDoc([in] BSTR Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall OtborVkl([out, retval] int* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall OtborVkl([in] int Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall NoCheck([out, retval] int* Value);
    [propput, id(0x000000D3)]
    HRESULT _stdcall NoCheck([in] int Value);
    [id(0x000000D4)]
    HRESULT _stdcall OpenTable(void);
    [id(0x000000D5)]
    HRESULT _stdcall UpdateTable(void);
    [id(0x000000D6)]
    HRESULT _stdcall TableFirst(void);
    [id(0x000000D7)]
    HRESULT _stdcall TableNext(void);
    [propget, id(0x000000D8)]
    HRESULT _stdcall TableEof([out, retval] int* Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall TablePRDOC([out, retval] int* Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall TableTDOC([out, retval] BSTR* Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall TableNUMDOC([out, retval] int* Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall TableSUMDOC([out, retval] double* Value);
    [propget, id(0x000000DD)]
    HRESULT _stdcall TableNAMEFIRM([out, retval] BSTR* Value);
    [propget, id(0x000000DE)]
    HRESULT _stdcall TableNAMESKLAD([out, retval] BSTR* Value);
    [propget, id(0x000000DF)]
    HRESULT _stdcall TableNAMEKLIENT([out, retval] BSTR* Value);
    [propget, id(0x000000E0)]
    HRESULT _stdcall TableNAME_USER([out, retval] BSTR* Value);
    [propget, id(0x000000E1)]
    HRESULT _stdcall TablePOSDOC([out, retval] BSTR* Value);
    [propget, id(0x000000E2)]
    HRESULT _stdcall TableIDDOC([out, retval] BSTR* Value);
    [propget, id(0x000000E3)]
    HRESULT _stdcall TableIDFIRMDOC([out, retval] BSTR* Value);
    [propget, id(0x000000E4)]
    HRESULT _stdcall TableIDSKLDOC([out, retval] BSTR* Value);
    [propget, id(0x000000E5)]
    HRESULT _stdcall TableIDKLDOC([out, retval] BSTR* Value);
    [propget, id(0x000000E6)]
    HRESULT _stdcall TableIDDOGDOC([out, retval] BSTR* Value);
    [propget, id(0x000000E7)]
    HRESULT _stdcall TableIDUSERDOC([out, retval] BSTR* Value);
    [propget, id(0x000000E8)]
    HRESULT _stdcall TableIDDOCOSNDOC([out, retval] BSTR* Value);
    [propget, id(0x000000E9)]
    HRESULT _stdcall TableIDBASE_GALLDOC([out, retval] BSTR* Value);
  };

  [
    uuid(1094236B-2344-47A0-8EF7-C36F82B71B48),
    version(1.0),
    helpstring("Dispatch interface for OleDMSprSklad Object"),
    dual,
    oleautomation
  ]
  interface IOleDMSprSklad: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [id(0x000000CB)]
    HRESULT _stdcall OpenTable(void);
    [id(0x000000CC)]
    HRESULT _stdcall OpenElement([in] BSTR id, [out, retval] int* result);
    [id(0x000000CD)]
    HRESULT _stdcall NewElement(void);
    [id(0x000000CE)]
    HRESULT _stdcall SaveElement(void);
    [id(0x000000CF)]
    HRESULT _stdcall GetIdElement([in] BSTR gid, [out, retval] BSTR* id);
    [id(0x000000D0)]
    HRESULT _stdcall GetGidElement([in] BSTR id, [out, retval] BSTR* gid);
    [id(0x000000D1)]
    HRESULT _stdcall DeleteElement([in] BSTR id);
    [id(0x000000D2)]
    HRESULT _stdcall TableFirst(void);
    [id(0x000000D3)]
    HRESULT _stdcall TableNext(void);
    [propget, id(0x000000D4)]
    HRESULT _stdcall TableEof([out, retval] int* Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall TableNAMESKLAD([out, retval] BSTR* Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall TableMOLSKLAD([out, retval] BSTR* Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall TableADRSKLAD([out, retval] BSTR* Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall TableTSklad([out, retval] int* Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall TableIDSKLAD([out, retval] BSTR* Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall TableGID_SSKLAD([out, retval] BSTR* Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall ElementNAMESKLAD([out, retval] BSTR* Value);
    [propput, id(0x000000DB)]
    HRESULT _stdcall ElementNAMESKLAD([in] BSTR Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall ElementMOLSKLAD([out, retval] BSTR* Value);
    [propput, id(0x000000DC)]
    HRESULT _stdcall ElementMOLSKLAD([in] BSTR Value);
    [propget, id(0x000000DD)]
    HRESULT _stdcall ElementADRSKLAD([out, retval] BSTR* Value);
    [propput, id(0x000000DD)]
    HRESULT _stdcall ElementADRSKLAD([in] BSTR Value);
    [propget, id(0x000000DE)]
    HRESULT _stdcall ElementTSKLAD([out, retval] int* Value);
    [propput, id(0x000000DE)]
    HRESULT _stdcall ElementTSKLAD([in] int Value);
    [propget, id(0x000000DF)]
    HRESULT _stdcall ElementIDSKLAD([out, retval] BSTR* Value);
    [propput, id(0x000000DF)]
    HRESULT _stdcall ElementIDSKLAD([in] BSTR Value);
    [propget, id(0x000000E0)]
    HRESULT _stdcall ElementGID_SSKLAD([out, retval] BSTR* Value);
    [propput, id(0x000000E0)]
    HRESULT _stdcall ElementGID_SSKLAD([in] BSTR Value);
  };

  [
    uuid(6537D36E-E877-40F4-8BA1-EA8018256082),
    version(1.0),
    helpstring("Dispatch interface for OleDMSprFirm Object"),
    dual,
    oleautomation
  ]
  interface IOleDMSprFirm: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [id(0x000000CB)]
    HRESULT _stdcall OpenTable(void);
    [id(0x000000CC)]
    HRESULT _stdcall OpenElement([in] BSTR id, [out, retval] int* result);
    [id(0x000000CD)]
    HRESULT _stdcall NewElement(void);
    [id(0x000000CE)]
    HRESULT _stdcall SaveElement([out, retval] int* result);
    [id(0x000000CF)]
    HRESULT _stdcall DeleteElement([in] BSTR id);
    [id(0x000000D0)]
    HRESULT _stdcall GetGidElement([in] BSTR id, [out, retval] BSTR* gid);
    [id(0x000000D1)]
    HRESULT _stdcall GetIdElement([in] BSTR gid, [out, retval] BSTR* id);
    [propget, id(0x000000D2)]
    HRESULT _stdcall TableINNFIRM([out, retval] BSTR* Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall TableNAMEFIRM([out, retval] BSTR* Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall TableIDFIRM([out, retval] BSTR* Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall ElementIDFIRM([out, retval] BSTR* Value);
    [propput, id(0x000000D5)]
    HRESULT _stdcall ElementIDFIRM([in] BSTR Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall ElementNAMEFIRM([out, retval] BSTR* Value);
    [propput, id(0x000000D6)]
    HRESULT _stdcall ElementNAMEFIRM([in] BSTR Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall ElementINNFIRM([out, retval] BSTR* Value);
    [propput, id(0x000000D7)]
    HRESULT _stdcall ElementINNFIRM([in] BSTR Value);
    [id(0x000000D8)]
    HRESULT _stdcall TableFirst(void);
    [id(0x000000D9)]
    HRESULT _stdcall TableNext(void);
    [propget, id(0x000000DA)]
    HRESULT _stdcall TableEof([out, retval] int* Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall TableGID_SFIRM([out, retval] BSTR* Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall ElementGID_SFIRM([out, retval] BSTR* Value);
    [propput, id(0x000000DC)]
    HRESULT _stdcall ElementGID_SFIRM([in] BSTR Value);
  };

  [
    uuid(1C1C010E-C0C9-4871-BC0E-7A93E2CB6AD9),
    version(1.0),
    helpstring("Dispatch interface for OleDMSprInfBase Object"),
    dual,
    oleautomation
  ]
  interface IOleDMSprInfBase: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [id(0x000000CB)]
    HRESULT _stdcall OpenTable(void);
    [id(0x000000CC)]
    HRESULT _stdcall OpenElement([in] BSTR id, [out, retval] int* result);
    [id(0x000000CD)]
    HRESULT _stdcall NewElement(void);
    [id(0x000000CE)]
    HRESULT _stdcall SaveElement([out, retval] int* result);
    [id(0x000000CF)]
    HRESULT _stdcall DeleteElement([in] BSTR id);
    [id(0x000000D0)]
    HRESULT _stdcall GetIdPoName([in] BSTR name, [out, retval] BSTR* id);
    [id(0x000000D1)]
    HRESULT _stdcall TableFirst(void);
    [id(0x000000D2)]
    HRESULT _stdcall TableNext(void);
    [propget, id(0x000000D3)]
    HRESULT _stdcall TableEof([out, retval] int* Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall TableNAME_SINFBASE_OBMEN([out, retval] BSTR* Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall TableID_SINFBASE_OBMEN([out, retval] BSTR* Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall TableGID_SINFBASE_OBMEN([out, retval] BSTR* Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall ElementNAME_SINFBASE_OBMEN([out, retval] BSTR* Value);
    [propput, id(0x000000D7)]
    HRESULT _stdcall ElementNAME_SINFBASE_OBMEN([in] BSTR Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall ElementID_SINFBASE_OBMEN([out, retval] BSTR* Value);
    [propput, id(0x000000D8)]
    HRESULT _stdcall ElementID_SINFBASE_OBMEN([in] BSTR Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall ElementGID_SINFBASE_OBMEN([out, retval] BSTR* Value);
    [propput, id(0x000000D9)]
    HRESULT _stdcall ElementGID_SINFBASE_OBMEN([in] BSTR Value);
  };

  [
    uuid(D28F8AE3-3B91-49E0-BE35-1133F9362791),
    version(1.0),
    helpstring("Dispatch interface for OleDMSprEd Object"),
    dual,
    oleautomation
  ]
  interface IOleDMSprEd: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [id(0x000000CB)]
    HRESULT _stdcall OpenTable([in] BSTR id_nom);
    [id(0x000000CD)]
    HRESULT _stdcall NewElement([in] BSTR id_nom, [out, retval] int* result);
    [id(0x000000CE)]
    HRESULT _stdcall SaveElement([out, retval] int* result);
    [id(0x000000D0)]
    HRESULT _stdcall FindEdPoSh([in] BSTR sh, [out, retval] BSTR* result);
    [id(0x000000D1)]
    HRESULT _stdcall GetIdElement([in] BSTR gid, [out, retval] BSTR* id);
    [id(0x000000D2)]
    HRESULT _stdcall GetGidElement([in] BSTR id, [out, retval] BSTR* gid);
    [id(0x000000D3)]
    HRESULT _stdcall TableFirst(void);
    [id(0x000000D4)]
    HRESULT _stdcall TableNext(void);
    [propget, id(0x000000D5)]
    HRESULT _stdcall TableEof([out, retval] int* Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall TableNAMEED([out, retval] BSTR* Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall TableKFED([out, retval] double* Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall TableTSHED([out, retval] int* Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall TableSHED([out, retval] BSTR* Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall TableIDED([out, retval] BSTR* Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall TableIDNOMED([out, retval] BSTR* Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall TableIDOKEIED([out, retval] BSTR* Value);
    [propget, id(0x000000DD)]
    HRESULT _stdcall TableGID_SED([out, retval] BSTR* Value);
    [propget, id(0x000000DE)]
    HRESULT _stdcall TableCODE_SED([out, retval] int* Value);
    [propget, id(0x000000DF)]
    HRESULT _stdcall ElementNAMEED([out, retval] BSTR* Value);
    [propput, id(0x000000DF)]
    HRESULT _stdcall ElementNAMEED([in] BSTR Value);
    [propget, id(0x000000E0)]
    HRESULT _stdcall ElementKFED([out, retval] double* Value);
    [propput, id(0x000000E0)]
    HRESULT _stdcall ElementKFED([in] double Value);
    [propget, id(0x000000E1)]
    HRESULT _stdcall ElementTSHED([out, retval] int* Value);
    [propput, id(0x000000E1)]
    HRESULT _stdcall ElementTSHED([in] int Value);
    [propget, id(0x000000E2)]
    HRESULT _stdcall ElementSHED([out, retval] BSTR* Value);
    [propput, id(0x000000E2)]
    HRESULT _stdcall ElementSHED([in] BSTR Value);
    [propget, id(0x000000E3)]
    HRESULT _stdcall ElementIDED([out, retval] BSTR* Value);
    [propput, id(0x000000E3)]
    HRESULT _stdcall ElementIDED([in] BSTR Value);
    [propget, id(0x000000E4)]
    HRESULT _stdcall ElementIDOKEIED([out, retval] BSTR* Value);
    [propput, id(0x000000E4)]
    HRESULT _stdcall ElementIDOKEIED([in] BSTR Value);
    [propget, id(0x000000E5)]
    HRESULT _stdcall ElementGID_SED([out, retval] BSTR* Value);
    [propput, id(0x000000E5)]
    HRESULT _stdcall ElementGID_SED([in] BSTR Value);
    [propget, id(0x000000E6)]
    HRESULT _stdcall ElementCODE_SED([out, retval] int* Value);
    [propput, id(0x000000E6)]
    HRESULT _stdcall ElementCODE_SED([in] int Value);
    [propget, id(0x000000E7)]
    HRESULT _stdcall ElementNAMEOKEI([out, retval] BSTR* Value);
    [propput, id(0x000000E7)]
    HRESULT _stdcall ElementNAMEOKEI([in] BSTR Value);
    [id(0x000000CC)]
    HRESULT _stdcall OpenElement([in] BSTR id, [out, retval] int* result);
    [id(0x000000CF)]
    HRESULT _stdcall DeleteElement([in] BSTR id, [out, retval] int* result);
  };

  [
    uuid(E00B40C2-1DED-4F6C-8D31-FA94C078691E),
    version(1.0),
    helpstring("Dispatch interface for OleDMSprGrpNom Object"),
    dual,
    oleautomation
  ]
  interface IOleDMSprGrpNom: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [id(0x000000CB)]
    HRESULT _stdcall NewElement([in] BSTR id_grp);
    [id(0x000000CC)]
    HRESULT _stdcall SaveElement([out, retval] int* result);
    [id(0x000000CD)]
    HRESULT _stdcall OpenElement([in] BSTR id, [out, retval] int* result);
    [id(0x000000CE)]
    HRESULT _stdcall DeleteElement([in] BSTR id, [out, retval] int* result);
    [id(0x000000CF)]
    HRESULT _stdcall OpenTable(void);
    [id(0x000000D0)]
    HRESULT _stdcall TableFirst(void);
    [id(0x000000D1)]
    HRESULT _stdcall TableNext(void);
    [propget, id(0x000000D2)]
    HRESULT _stdcall TableEof([out, retval] int* Value);
    [id(0x000000D3)]
    HRESULT _stdcall GetIdElement([in] BSTR gid, [out, retval] BSTR* id);
    [id(0x000000D4)]
    HRESULT _stdcall GetGidElement([in] BSTR id, [out, retval] BSTR* gid);
    [propget, id(0x000000D5)]
    HRESULT _stdcall TableIDGN([out, retval] BSTR* Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall TableIDGRPGN([out, retval] BSTR* Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall TableNAMEGN([out, retval] BSTR* Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall TableGID_SGRPNOM([out, retval] BSTR* Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall ElementIDGN([out, retval] BSTR* Value);
    [propput, id(0x000000D9)]
    HRESULT _stdcall ElementIDGN([in] BSTR Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall ElementIDGRPGN([out, retval] BSTR* Value);
    [propput, id(0x000000DA)]
    HRESULT _stdcall ElementIDGRPGN([in] BSTR Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall ElementNAMEGN([out, retval] BSTR* Value);
    [propput, id(0x000000DB)]
    HRESULT _stdcall ElementNAMEGN([in] BSTR Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall ElementGID_SGRPNOM([out, retval] BSTR* Value);
    [propput, id(0x000000DC)]
    HRESULT _stdcall ElementGID_SGRPNOM([in] BSTR Value);
  };

  [
    uuid(5023B6C6-594F-4337-B907-E71269058E57),
    version(1.0),
    helpstring("Dispatch interface for OleDMSprNom Object"),
    dual,
    oleautomation
  ]
  interface IOleDMSprNom: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [id(0x000000CB)]
    HRESULT _stdcall NewElement([in] BSTR id_grp, [out, retval] int* result);
    [id(0x000000CC)]
    HRESULT _stdcall SaveElement([out, retval] int* result);
    [id(0x000000CD)]
    HRESULT _stdcall OpenElement([in] BSTR id, [out, retval] int* result);
    [id(0x000000CE)]
    HRESULT _stdcall DeleteElement([in] BSTR id, [out, retval] int* result);
    [id(0x000000CF)]
    HRESULT _stdcall OpenTable([in] BSTR id_grp, [in] int all);
    [id(0x000000D0)]
    HRESULT _stdcall TableFirst(void);
    [id(0x000000D1)]
    HRESULT _stdcall TableNext(void);
    [propget, id(0x000000D2)]
    HRESULT _stdcall TableEof([out, retval] int* Value);
    [id(0x000000D3)]
    HRESULT _stdcall GetIdElement([in] BSTR gid, [out, retval] BSTR* id);
    [id(0x000000D4)]
    HRESULT _stdcall GetGidElement([in] BSTR id, [out, retval] BSTR* gid);
    [propget, id(0x000000D5)]
    HRESULT _stdcall TableCODENOM([out, retval] int* Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall TableTNOM([out, retval] int* Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall TableNAMENOM([out, retval] BSTR* Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall TableNAMEED([out, retval] BSTR* Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall TableIDNOM([out, retval] BSTR* Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall TableIDGRPNOM([out, retval] BSTR* Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall ElementTNOM([out, retval] int* Value);
    [propput, id(0x000000DB)]
    HRESULT _stdcall ElementTNOM([in] int Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall ElementCODENOM([out, retval] int* Value);
    [propput, id(0x000000DC)]
    HRESULT _stdcall ElementCODENOM([in] int Value);
    [propget, id(0x000000DD)]
    HRESULT _stdcall ElementNAMENOM([out, retval] BSTR* Value);
    [propput, id(0x000000DD)]
    HRESULT _stdcall ElementNAMENOM([in] BSTR Value);
    [propget, id(0x000000DE)]
    HRESULT _stdcall ElementFNAMENOM([out, retval] BSTR* Value);
    [propput, id(0x000000DE)]
    HRESULT _stdcall ElementFNAMENOM([in] BSTR Value);
    [propget, id(0x000000DF)]
    HRESULT _stdcall ElementKRNAMENOM([out, retval] BSTR* Value);
    [propput, id(0x000000DF)]
    HRESULT _stdcall ElementKRNAMENOM([in] BSTR Value);
    [propget, id(0x000000E0)]
    HRESULT _stdcall ElementARTNOM([out, retval] BSTR* Value);
    [propput, id(0x000000E0)]
    HRESULT _stdcall ElementARTNOM([in] BSTR Value);
    [propget, id(0x000000E1)]
    HRESULT _stdcall ElementSTNDSNOM([out, retval] double* Value);
    [propput, id(0x000000E1)]
    HRESULT _stdcall ElementSTNDSNOM([in] double Value);
    [propget, id(0x000000E2)]
    HRESULT _stdcall ElementIDBASEDNOM([out, retval] BSTR* Value);
    [propput, id(0x000000E2)]
    HRESULT _stdcall ElementIDBASEDNOM([in] BSTR Value);
    [propget, id(0x000000E3)]
    HRESULT _stdcall ElementIDOSNEDNOM([out, retval] BSTR* Value);
    [propput, id(0x000000E3)]
    HRESULT _stdcall ElementIDOSNEDNOM([in] BSTR Value);
    [propget, id(0x000000E4)]
    HRESULT _stdcall ElementIDNOM([out, retval] BSTR* Value);
    [propput, id(0x000000E4)]
    HRESULT _stdcall ElementIDNOM([in] BSTR Value);
    [propget, id(0x000000E5)]
    HRESULT _stdcall ElementIDGRPNOM([out, retval] BSTR* Value);
    [propput, id(0x000000E5)]
    HRESULT _stdcall ElementIDGRPNOM([in] BSTR Value);
    [propget, id(0x000000E6)]
    HRESULT _stdcall ElementIDFIRMNOM([out, retval] BSTR* Value);
    [propput, id(0x000000E6)]
    HRESULT _stdcall ElementIDFIRMNOM([in] BSTR Value);
    [propget, id(0x000000E7)]
    HRESULT _stdcall ElementIDCOUNTRYNOM([out, retval] BSTR* Value);
    [propput, id(0x000000E7)]
    HRESULT _stdcall ElementIDCOUNTRYNOM([in] BSTR Value);
    [propget, id(0x000000E8)]
    HRESULT _stdcall ElementGID_SNOM([out, retval] BSTR* Value);
    [propput, id(0x000000E8)]
    HRESULT _stdcall ElementGID_SNOM([in] BSTR Value);
    [propget, id(0x000000E9)]
    HRESULT _stdcall ElementIDVID_SNOM([out, retval] BSTR* Value);
    [propput, id(0x000000E9)]
    HRESULT _stdcall ElementIDVID_SNOM([in] BSTR Value);
  };

  [
    uuid(DA8FD0DF-AD0F-411A-B455-D9E2EC4DF13D),
    version(1.0),
    helpstring("Dispatch interface for OleDMSprTypePrice Object"),
    dual,
    oleautomation
  ]
  interface IOleDMSprTypePrice: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [id(0x000000CB)]
    HRESULT _stdcall NewElement(void);
    [id(0x000000CC)]
    HRESULT _stdcall SaveElement([out, retval] int* result);
    [id(0x000000CD)]
    HRESULT _stdcall OpenElement([in] BSTR id, [out, retval] int* result);
    [id(0x000000CE)]
    HRESULT _stdcall DeleteElement([in] BSTR id);
    [id(0x000000CF)]
    HRESULT _stdcall OpenTable(void);
    [id(0x000000D0)]
    HRESULT _stdcall TableFirst(void);
    [id(0x000000D1)]
    HRESULT _stdcall TableNext(void);
    [propget, id(0x000000D2)]
    HRESULT _stdcall TableEof([out, retval] int* Value);
    [id(0x000000D3)]
    HRESULT _stdcall GetIdElement([in] BSTR gid, [out, retval] BSTR* id);
    [id(0x000000D4)]
    HRESULT _stdcall GetGidElement([in] BSTR id, [out, retval] BSTR* gid);
    [propget, id(0x000000D5)]
    HRESULT _stdcall TableNAME_TPRICE([out, retval] BSTR* Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall TableID_TPRICE([out, retval] BSTR* Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall TableGID_STPRICE([out, retval] BSTR* Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall ElementNAME_TPRICE([out, retval] BSTR* Value);
    [propput, id(0x000000D8)]
    HRESULT _stdcall ElementNAME_TPRICE([in] BSTR Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall ElementID_TPRICE([out, retval] BSTR* Value);
    [propput, id(0x000000D9)]
    HRESULT _stdcall ElementID_TPRICE([in] BSTR Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall ElementGID_STPRICE([out, retval] BSTR* Value);
    [propput, id(0x000000DA)]
    HRESULT _stdcall ElementGID_STPRICE([in] BSTR Value);
  };

  [
    uuid(8FAC9484-DAC5-4142-B381-BB4AAFA0ECF8),
    version(1.0),
    helpstring("Dispatch interface for OleDMSprPrice Object"),
    dual,
    oleautomation
  ]
  interface IOleDMSprPrice: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [id(0x000000CB)]
    HRESULT _stdcall NewElement([in] BSTR id_nom, [in] BSTR id_type_price);
    [id(0x000000CC)]
    HRESULT _stdcall SaveElement([out, retval] int* result);
    [id(0x000000CD)]
    HRESULT _stdcall OpenElement([in] BSTR id, [out, retval] int* result);
    [id(0x000000CE)]
    HRESULT _stdcall DeleteElement([in] BSTR id);
    [id(0x000000CF)]
    HRESULT _stdcall OpenTable([in] BSTR id_nom);
    [id(0x000000D0)]
    HRESULT _stdcall TableFirst(void);
    [id(0x000000D1)]
    HRESULT _stdcall TableNext(void);
    [propget, id(0x000000D2)]
    HRESULT _stdcall TableEof([out, retval] int* Value);
    [id(0x000000D3)]
    HRESULT _stdcall GetIdElement([in] BSTR gid, [out, retval] BSTR* id);
    [id(0x000000D4)]
    HRESULT _stdcall GetGidElement([in] BSTR id, [out, retval] BSTR* gid);
    [propget, id(0x000000D6)]
    HRESULT _stdcall TableNAME_TPRICE([out, retval] BSTR* Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall TableID_PRICE([out, retval] BSTR* Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall TableIDNOM_PRICE([out, retval] BSTR* Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall TableIDTYPE_PRICE([out, retval] BSTR* Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall TableGID_SPRICE([out, retval] BSTR* Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall ElementZNACH_PRICE([out, retval] double* Value);
    [propput, id(0x000000DB)]
    HRESULT _stdcall ElementZNACH_PRICE([in] double Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall ElementID_PRICE([out, retval] BSTR* Value);
    [propput, id(0x000000DC)]
    HRESULT _stdcall ElementID_PRICE([in] BSTR Value);
    [propget, id(0x000000DD)]
    HRESULT _stdcall ElementIDNOM_PRICE([out, retval] BSTR* Value);
    [propput, id(0x000000DD)]
    HRESULT _stdcall ElementIDNOM_PRICE([in] BSTR Value);
    [propget, id(0x000000DE)]
    HRESULT _stdcall ElementIDTYPE_PRICE([out, retval] BSTR* Value);
    [propput, id(0x000000DE)]
    HRESULT _stdcall ElementIDTYPE_PRICE([in] BSTR Value);
    [propget, id(0x000000DF)]
    HRESULT _stdcall ElementGID_SPRICE([out, retval] BSTR* Value);
    [propput, id(0x000000DF)]
    HRESULT _stdcall ElementGID_SPRICE([in] BSTR Value);
    [id(0x000000E0)]
    HRESULT _stdcall FindElement([in] BSTR id_type_price, [in] BSTR id_nom, [out, retval] BSTR* result);
    [propget, id(0x000000D5)]
    HRESULT _stdcall TableZNACH_PRICE([out, retval] double* Value);
  };

  [
    uuid(C03B1E3C-DE78-4569-9A1D-A9C348DD9687),
    version(1.0),
    helpstring("Dispatch interface for OleDMDocReal Object"),
    dual,
    oleautomation
  ]
  interface IOleDMDocReal: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall CodeError([out, retval] int* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall TextError([out, retval] BSTR* Value);
    [id(0x000000CB)]
    HRESULT _stdcall NewDoc(void);
    [id(0x000000CC)]
    HRESULT _stdcall OpenDoc([in] BSTR id);
    [id(0x000000CD)]
    HRESULT _stdcall SaveDoc([out, retval] int* result);
    [id(0x000000CE)]
    HRESULT _stdcall CloseDoc(void);
    [id(0x000000CF)]
    HRESULT _stdcall DeleteDoc([in] BSTR id, [out, retval] int* result);
    [id(0x000000D0)]
    HRESULT _stdcall DocTFirst(void);
    [id(0x000000D1)]
    HRESULT _stdcall DocTNext(void);
    [propget, id(0x000000D2)]
    HRESULT _stdcall DocTEof([out, retval] int* Value);
    [id(0x000000D3)]
    HRESULT _stdcall GetIdDoc([in] int number_doc, [in] BSTR date_doc, [out, retval] BSTR* id);
    [propget, id(0x000000D4)]
    HRESULT _stdcall DocAllPOSDOC([out, retval] BSTR* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall DocAllPOSDOC([in] BSTR Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall DocAllTDOC([out, retval] BSTR* Value);
    [propput, id(0x000000D5)]
    HRESULT _stdcall DocAllTDOC([in] BSTR Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall DocAllNUMDOC([out, retval] int* Value);
    [propput, id(0x000000D6)]
    HRESULT _stdcall DocAllNUMDOC([in] int Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall DocAllSUMDOC([out, retval] double* Value);
    [propput, id(0x000000D7)]
    HRESULT _stdcall DocAllSUMDOC([in] double Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall DocAllIDDOC([out, retval] BSTR* Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall DocAllIDFIRMDOC([out, retval] BSTR* Value);
    [propput, id(0x000000D9)]
    HRESULT _stdcall DocAllIDFIRMDOC([in] BSTR Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall DocAllIDSKLDOC([out, retval] BSTR* Value);
    [propput, id(0x000000DA)]
    HRESULT _stdcall DocAllIDSKLDOC([in] BSTR Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall DocAllIDKLDOC([out, retval] BSTR* Value);
    [propput, id(0x000000DB)]
    HRESULT _stdcall DocAllIDKLDOC([in] BSTR Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall DocAllIDBASE_GALLDOC([out, retval] BSTR* Value);
    [propput, id(0x000000DC)]
    HRESULT _stdcall DocAllIDBASE_GALLDOC([in] BSTR Value);
    [propget, id(0x000000DD)]
    HRESULT _stdcall DocPRIMREA([out, retval] BSTR* Value);
    [propput, id(0x000000DD)]
    HRESULT _stdcall DocPRIMREA([in] BSTR Value);
    [propget, id(0x000000DE)]
    HRESULT _stdcall DocIDREA([out, retval] BSTR* Value);
    [propput, id(0x000000DE)]
    HRESULT _stdcall DocIDREA([in] BSTR Value);
    [propget, id(0x000000DF)]
    HRESULT _stdcall DocIDDOCREA([out, retval] BSTR* Value);
    [propput, id(0x000000DF)]
    HRESULT _stdcall DocIDDOCREA([in] BSTR Value);
    [propget, id(0x000000E0)]
    HRESULT _stdcall DocIDTPRICEREA([out, retval] BSTR* Value);
    [propput, id(0x000000E0)]
    HRESULT _stdcall DocIDTPRICEREA([in] BSTR Value);
    [propget, id(0x000000E1)]
    HRESULT _stdcall DocIDGRPOLREA([out, retval] BSTR* Value);
    [propput, id(0x000000E1)]
    HRESULT _stdcall DocIDGRPOLREA([in] BSTR Value);
    [propget, id(0x000000E2)]
    HRESULT _stdcall DocIDBSCHETREA([out, retval] BSTR* Value);
    [propput, id(0x000000E2)]
    HRESULT _stdcall DocIDBSCHETREA([in] BSTR Value);
    [propget, id(0x000000E3)]
    HRESULT _stdcall DocTIDREAT([out, retval] BSTR* Value);
    [propput, id(0x000000E3)]
    HRESULT _stdcall DocTIDREAT([in] BSTR Value);
    [propget, id(0x000000E4)]
    HRESULT _stdcall DocTIDDOCREAT([out, retval] BSTR* Value);
    [propput, id(0x000000E4)]
    HRESULT _stdcall DocTIDDOCREAT([in] BSTR Value);
    [propget, id(0x000000E5)]
    HRESULT _stdcall DocTIDNOMREAT([out, retval] BSTR* Value);
    [propput, id(0x000000E5)]
    HRESULT _stdcall DocTIDNOMREAT([in] BSTR Value);
    [propget, id(0x000000E6)]
    HRESULT _stdcall DocTIDEDREAT([out, retval] BSTR* Value);
    [propput, id(0x000000E6)]
    HRESULT _stdcall DocTIDEDREAT([in] BSTR Value);
    [propget, id(0x000000E7)]
    HRESULT _stdcall DocTKOLREAT([out, retval] double* Value);
    [propput, id(0x000000E7)]
    HRESULT _stdcall DocTKOLREAT([in] double Value);
    [propget, id(0x000000E8)]
    HRESULT _stdcall DocTKFREAT([out, retval] double* Value);
    [propput, id(0x000000E8)]
    HRESULT _stdcall DocTKFREAT([in] double Value);
    [propget, id(0x000000E9)]
    HRESULT _stdcall DocTPRICEREAT([out, retval] double* Value);
    [propput, id(0x000000E9)]
    HRESULT _stdcall DocTPRICEREAT([in] double Value);
    [propget, id(0x000000EA)]
    HRESULT _stdcall DocTSUMREAT([out, retval] double* Value);
    [propput, id(0x000000EA)]
    HRESULT _stdcall DocTSUMREAT([in] double Value);
    [id(0x000000EB)]
    HRESULT _stdcall DocTAppend(void);
    [id(0x000000EC)]
    HRESULT _stdcall DocTDelete(void);
  };

  [
    uuid(E1697EFF-540A-410C-9ABC-80841702B33F),
    version(1.0),
    helpstring("OleDM Object")
  ]
  coclass OleDM
  {
    [default] interface IOleDM;
  };

  [
    uuid(B4D56577-B867-4D50-BC7F-3827672665C9),
    version(1.0),
    helpstring("OleDMGurAllDoc Object")
  ]
  coclass OleDMGurAllDoc
  {
    [default] interface IOleDMGurAllDoc;
  };

  [
    uuid(13B97FAE-E818-424B-A637-F6914F7D5FBB),
    version(1.0),
    helpstring("OleDMSprSklad Object")
  ]
  coclass OleDMSprSklad
  {
    [default] interface IOleDMSprSklad;
  };

  [
    uuid(51730083-11CD-4941-A581-9BEE20F88F55),
    version(1.0),
    helpstring("OleDMSprFirm Object")
  ]
  coclass OleDMSprFirm
  {
    [default] interface IOleDMSprFirm;
  };

  [
    uuid(B3F3DEE4-6750-432F-9B23-F332A8BEEF89),
    version(1.0),
    helpstring("OleDMSprInfBase Object")
  ]
  coclass OleDMSprInfBase
  {
    [default] interface IOleDMSprInfBase;
  };

  [
    uuid(505A0FE0-291B-4E4E-9E6D-55F9C414B344),
    version(1.0),
    helpstring("OleDMSprEd Object")
  ]
  coclass OleDMSprEd
  {
    [default] interface IOleDMSprEd;
  };

  [
    uuid(0659145F-D916-4364-9543-03626950D59D),
    version(1.0),
    helpstring("OleDMSprGrpNom Object")
  ]
  coclass OleDMSprGrpNom
  {
    [default] interface IOleDMSprGrpNom;
  };

  [
    uuid(16B5B746-F053-4C44-AB11-9186CC678DEA),
    version(1.0),
    helpstring("OleDMSprNom Object")
  ]
  coclass OleDMSprNom
  {
    [default] interface IOleDMSprNom;
  };

  [
    uuid(26A5740D-B2F6-4EA5-A8AB-24621F0B9C6F),
    version(1.0),
    helpstring("OleDMSprTypePrice Object")
  ]
  coclass OleDMSprTypePrice
  {
    [default] interface IOleDMSprTypePrice;
  };

  [
    uuid(FE0C2C6D-3C6E-4790-B179-26D3650BBF36),
    version(1.0),
    helpstring("OleDMSprPrice Object")
  ]
  coclass OleDMSprPrice
  {
    [default] interface IOleDMSprPrice;
  };

  [
    uuid(4D026F48-5F35-416D-97A0-2E5CBCDF54C0),
    version(1.0),
    helpstring("OleDMDocReal Object")
  ]
  coclass OleDMDocReal
  {
    [default] interface IOleDMDocReal;
  };

};
