// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 5081 $
// File generated on 26.11.2009 10:50:36 from Type Library described below.

// ************************************************************************  //
// Type Lib: K:\Program\FIBPlus\DBServ20\DBServ20.tlb (1)
// LIBID: {67436983-B658-40C7-AD92-CAD54DCB46AB}
// LCID: 0
// Helpfile: 
// HelpString: DBServ20 Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   DBServ20_TLBH
#define   DBServ20_TLBH

#pragma option push -b -w-inl

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Dbserv20_tlb
{

// *********************************************************************//
// HelpString: DBServ20 Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_DBServ20;
extern __declspec (package) const GUID IID_IOleDM;
extern __declspec (package) const GUID CLSID_OleDM;
extern __declspec (package) const GUID IID_IOleDMGurAllDoc;
extern __declspec (package) const GUID CLSID_OleDMGurAllDoc;
extern __declspec (package) const GUID IID_IOleDMSprSklad;
extern __declspec (package) const GUID CLSID_OleDMSprSklad;
extern __declspec (package) const GUID IID_IOleDMSprFirm;
extern __declspec (package) const GUID CLSID_OleDMSprFirm;
extern __declspec (package) const GUID IID_IOleDMSprInfBase;
extern __declspec (package) const GUID CLSID_OleDMSprInfBase;
extern __declspec (package) const GUID IID_IOleDMSprEd;
extern __declspec (package) const GUID CLSID_OleDMSprEd;
extern __declspec (package) const GUID IID_IOleDMSprGrpNom;
extern __declspec (package) const GUID CLSID_OleDMSprGrpNom;
extern __declspec (package) const GUID IID_IOleDMSprNom;
extern __declspec (package) const GUID CLSID_OleDMSprNom;
extern __declspec (package) const GUID IID_IOleDMSprTypePrice;
extern __declspec (package) const GUID CLSID_OleDMSprTypePrice;
extern __declspec (package) const GUID IID_IOleDMSprPrice;
extern __declspec (package) const GUID CLSID_OleDMSprPrice;
extern __declspec (package) const GUID IID_IOleDMDocReal;
extern __declspec (package) const GUID CLSID_OleDMDocReal;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{74F3797D-8754-4353-9F62-A786056ADDE4}") IOleDM;
typedef TComInterface<IOleDM, &IID_IOleDM> IOleDMPtr;

interface DECLSPEC_UUID("{76C6259A-F143-4E40-9EBE-838B44404770}") IOleDMGurAllDoc;
typedef TComInterface<IOleDMGurAllDoc, &IID_IOleDMGurAllDoc> IOleDMGurAllDocPtr;

interface DECLSPEC_UUID("{1094236B-2344-47A0-8EF7-C36F82B71B48}") IOleDMSprSklad;
typedef TComInterface<IOleDMSprSklad, &IID_IOleDMSprSklad> IOleDMSprSkladPtr;

interface DECLSPEC_UUID("{6537D36E-E877-40F4-8BA1-EA8018256082}") IOleDMSprFirm;
typedef TComInterface<IOleDMSprFirm, &IID_IOleDMSprFirm> IOleDMSprFirmPtr;

interface DECLSPEC_UUID("{1C1C010E-C0C9-4871-BC0E-7A93E2CB6AD9}") IOleDMSprInfBase;
typedef TComInterface<IOleDMSprInfBase, &IID_IOleDMSprInfBase> IOleDMSprInfBasePtr;

interface DECLSPEC_UUID("{D28F8AE3-3B91-49E0-BE35-1133F9362791}") IOleDMSprEd;
typedef TComInterface<IOleDMSprEd, &IID_IOleDMSprEd> IOleDMSprEdPtr;

interface DECLSPEC_UUID("{E00B40C2-1DED-4F6C-8D31-FA94C078691E}") IOleDMSprGrpNom;
typedef TComInterface<IOleDMSprGrpNom, &IID_IOleDMSprGrpNom> IOleDMSprGrpNomPtr;

interface DECLSPEC_UUID("{5023B6C6-594F-4337-B907-E71269058E57}") IOleDMSprNom;
typedef TComInterface<IOleDMSprNom, &IID_IOleDMSprNom> IOleDMSprNomPtr;

interface DECLSPEC_UUID("{DA8FD0DF-AD0F-411A-B455-D9E2EC4DF13D}") IOleDMSprTypePrice;
typedef TComInterface<IOleDMSprTypePrice, &IID_IOleDMSprTypePrice> IOleDMSprTypePricePtr;

interface DECLSPEC_UUID("{8FAC9484-DAC5-4142-B381-BB4AAFA0ECF8}") IOleDMSprPrice;
typedef TComInterface<IOleDMSprPrice, &IID_IOleDMSprPrice> IOleDMSprPricePtr;

interface DECLSPEC_UUID("{C03B1E3C-DE78-4569-9A1D-A9C348DD9687}") IOleDMDocReal;
typedef TComInterface<IOleDMDocReal, &IID_IOleDMDocReal> IOleDMDocRealPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IOleDM OleDM;
typedef IOleDMPtr OleDMPtr;
typedef IOleDMGurAllDoc OleDMGurAllDoc;
typedef IOleDMGurAllDocPtr OleDMGurAllDocPtr;
typedef IOleDMSprSklad OleDMSprSklad;
typedef IOleDMSprSkladPtr OleDMSprSkladPtr;
typedef IOleDMSprFirm OleDMSprFirm;
typedef IOleDMSprFirmPtr OleDMSprFirmPtr;
typedef IOleDMSprInfBase OleDMSprInfBase;
typedef IOleDMSprInfBasePtr OleDMSprInfBasePtr;
typedef IOleDMSprEd OleDMSprEd;
typedef IOleDMSprEdPtr OleDMSprEdPtr;
typedef IOleDMSprGrpNom OleDMSprGrpNom;
typedef IOleDMSprGrpNomPtr OleDMSprGrpNomPtr;
typedef IOleDMSprNom OleDMSprNom;
typedef IOleDMSprNomPtr OleDMSprNomPtr;
typedef IOleDMSprTypePrice OleDMSprTypePrice;
typedef IOleDMSprTypePricePtr OleDMSprTypePricePtr;
typedef IOleDMSprPrice OleDMSprPrice;
typedef IOleDMSprPricePtr OleDMSprPricePtr;
typedef IOleDMDocReal OleDMDocReal;
typedef IOleDMDocRealPtr OleDMDocRealPtr;

#define LIBID_OF_OleDM (&LIBID_DBServ20)
#define LIBID_OF_OleDMGurAllDoc (&LIBID_DBServ20)
#define LIBID_OF_OleDMSprSklad (&LIBID_DBServ20)
#define LIBID_OF_OleDMSprFirm (&LIBID_DBServ20)
#define LIBID_OF_OleDMSprInfBase (&LIBID_DBServ20)
#define LIBID_OF_OleDMSprEd (&LIBID_DBServ20)
#define LIBID_OF_OleDMSprGrpNom (&LIBID_DBServ20)
#define LIBID_OF_OleDMSprNom (&LIBID_DBServ20)
#define LIBID_OF_OleDMSprTypePrice (&LIBID_DBServ20)
#define LIBID_OF_OleDMSprPrice (&LIBID_DBServ20)
#define LIBID_OF_OleDMDocReal (&LIBID_DBServ20)
// *********************************************************************//
// Interface: IOleDM
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {74F3797D-8754-4353-9F62-A786056ADDE4}
// *********************************************************************//
interface IOleDM  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectString(BSTR* Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_ConnectString(BSTR Value/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_PasswordUser(BSTR Param1/*[in]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE get_NameUser(BSTR* Value/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE set_NameUser(BSTR Value/*[in]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE GlobConnect(void) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectOK(int* Value/*[out,retval]*/) = 0; // [207]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ConnectString(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ConnectString((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_NameUser(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NameUser((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_ConnectOK(void)
  {
    int Value;
    OLECHECK(this->get_ConnectOK((int*)&Value));
    return Value;
  }


  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   BSTR            ConnectString = {read = get_ConnectString, write = set_ConnectString};
  __property   BSTR            PasswordUser = {write = set_PasswordUser};
  __property   BSTR            NameUser = {read = get_NameUser, write = set_NameUser};
  __property   int             ConnectOK = {read = get_ConnectOK};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMGurAllDoc
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {76C6259A-F143-4E40-9EBE-838B44404770}
// *********************************************************************//
interface IOleDMGurAllDoc  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_PosNach(BSTR* Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_PosNach(BSTR Value/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_PosCon(BSTR* Value/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE set_PosCon(BSTR Value/*[in]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE get_IdDoc(BSTR* Value/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE set_IdDoc(BSTR Value/*[in]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE get_IdKlient(BSTR* Value/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE set_IdKlient(BSTR Value/*[in]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE get_IdSklad(BSTR* Value/*[out,retval]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE set_IdSklad(BSTR Value/*[in]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE get_IdFirm(BSTR* Value/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE set_IdFirm(BSTR Value/*[in]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE get_StringTypeDoc(BSTR* Value/*[out,retval]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE set_StringTypeDoc(BSTR Value/*[in]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE get_OtborVkl(int* Value/*[out,retval]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE set_OtborVkl(int Value/*[in]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE get_NoCheck(int* Value/*[out,retval]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE set_NoCheck(int Value/*[in]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(void) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE UpdateTable(void) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE get_TableEof(int* Value/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE get_TablePRDOC(int* Value/*[out,retval]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE get_TableTDOC(BSTR* Value/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_TableNUMDOC(int* Value/*[out,retval]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE get_TableSUMDOC(double* Value/*[out,retval]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE get_TableNAMEFIRM(BSTR* Value/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_TableNAMESKLAD(BSTR* Value/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_TableNAMEKLIENT(BSTR* Value/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_TableNAME_USER(BSTR* Value/*[out,retval]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE get_TablePOSDOC(BSTR* Value/*[out,retval]*/) = 0; // [225]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDDOC(BSTR* Value/*[out,retval]*/) = 0; // [226]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDFIRMDOC(BSTR* Value/*[out,retval]*/) = 0; // [227]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDSKLDOC(BSTR* Value/*[out,retval]*/) = 0; // [228]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDKLDOC(BSTR* Value/*[out,retval]*/) = 0; // [229]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDDOGDOC(BSTR* Value/*[out,retval]*/) = 0; // [230]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDUSERDOC(BSTR* Value/*[out,retval]*/) = 0; // [231]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDDOCOSNDOC(BSTR* Value/*[out,retval]*/) = 0; // [232]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/) = 0; // [233]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_PosNach(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_PosNach((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_PosCon(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_PosCon((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_IdDoc(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdDoc((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_IdKlient(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdKlient((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_IdSklad(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdSklad((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_IdFirm(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IdFirm((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_StringTypeDoc(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_StringTypeDoc((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_OtborVkl(void)
  {
    int Value;
    OLECHECK(this->get_OtborVkl((int*)&Value));
    return Value;
  }

  int __fastcall get_NoCheck(void)
  {
    int Value;
    OLECHECK(this->get_NoCheck((int*)&Value));
    return Value;
  }

  int __fastcall get_TableEof(void)
  {
    int Value;
    OLECHECK(this->get_TableEof((int*)&Value));
    return Value;
  }

  int __fastcall get_TablePRDOC(void)
  {
    int Value;
    OLECHECK(this->get_TablePRDOC((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableTDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableTDOC((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_TableNUMDOC(void)
  {
    int Value;
    OLECHECK(this->get_TableNUMDOC((int*)&Value));
    return Value;
  }

  double __fastcall get_TableSUMDOC(void)
  {
    double Value;
    OLECHECK(this->get_TableSUMDOC((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableNAMEFIRM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableNAMEFIRM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableNAMESKLAD(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableNAMESKLAD((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableNAMEKLIENT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableNAMEKLIENT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableNAME_USER(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableNAME_USER((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TablePOSDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TablePOSDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDFIRMDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDFIRMDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDSKLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDSKLDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDKLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDKLDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDDOGDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDDOGDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDUSERDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDUSERDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDDOCOSNDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDDOCOSNDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDBASE_GALLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDBASE_GALLDOC((BSTR*)&Value));
    return Value;
  }


  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   BSTR            PosNach = {read = get_PosNach, write = set_PosNach};
  __property   BSTR            PosCon = {read = get_PosCon, write = set_PosCon};
  __property   BSTR            IdDoc = {read = get_IdDoc, write = set_IdDoc};
  __property   BSTR            IdKlient = {read = get_IdKlient, write = set_IdKlient};
  __property   BSTR            IdSklad = {read = get_IdSklad, write = set_IdSklad};
  __property   BSTR            IdFirm = {read = get_IdFirm, write = set_IdFirm};
  __property   BSTR            StringTypeDoc = {read = get_StringTypeDoc, write = set_StringTypeDoc};
  __property   int             OtborVkl = {read = get_OtborVkl, write = set_OtborVkl};
  __property   int             NoCheck = {read = get_NoCheck, write = set_NoCheck};
  __property   int             TableEof = {read = get_TableEof};
  __property   int             TablePRDOC = {read = get_TablePRDOC};
  __property   BSTR            TableTDOC = {read = get_TableTDOC};
  __property   int             TableNUMDOC = {read = get_TableNUMDOC};
  __property   double          TableSUMDOC = {read = get_TableSUMDOC};
  __property   BSTR            TableNAMEFIRM = {read = get_TableNAMEFIRM};
  __property   BSTR            TableNAMESKLAD = {read = get_TableNAMESKLAD};
  __property   BSTR            TableNAMEKLIENT = {read = get_TableNAMEKLIENT};
  __property   BSTR            TableNAME_USER = {read = get_TableNAME_USER};
  __property   BSTR            TablePOSDOC = {read = get_TablePOSDOC};
  __property   BSTR            TableIDDOC = {read = get_TableIDDOC};
  __property   BSTR            TableIDFIRMDOC = {read = get_TableIDFIRMDOC};
  __property   BSTR            TableIDSKLDOC = {read = get_TableIDSKLDOC};
  __property   BSTR            TableIDKLDOC = {read = get_TableIDKLDOC};
  __property   BSTR            TableIDDOGDOC = {read = get_TableIDDOGDOC};
  __property   BSTR            TableIDUSERDOC = {read = get_TableIDUSERDOC};
  __property   BSTR            TableIDDOCOSNDOC = {read = get_TableIDDOCOSNDOC};
  __property   BSTR            TableIDBASE_GALLDOC = {read = get_TableIDBASE_GALLDOC};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMSprSklad
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1094236B-2344-47A0-8EF7-C36F82B71B48}
// *********************************************************************//
interface IOleDMSprSklad  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(void) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE NewElement(void) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE SaveElement(void) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE DeleteElement(BSTR id/*[in]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE get_TableEof(int* Value/*[out,retval]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE get_TableNAMESKLAD(BSTR* Value/*[out,retval]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE get_TableMOLSKLAD(BSTR* Value/*[out,retval]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE get_TableADRSKLAD(BSTR* Value/*[out,retval]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE get_TableTSklad(int* Value/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDSKLAD(BSTR* Value/*[out,retval]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE get_TableGID_SSKLAD(BSTR* Value/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_ElementNAMESKLAD(BSTR* Value/*[out,retval]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE set_ElementNAMESKLAD(BSTR Value/*[in]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE get_ElementMOLSKLAD(BSTR* Value/*[out,retval]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE set_ElementMOLSKLAD(BSTR Value/*[in]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE get_ElementADRSKLAD(BSTR* Value/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_ElementADRSKLAD(BSTR Value/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_ElementTSKLAD(int* Value/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_ElementTSKLAD(int Value/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_ElementIDSKLAD(BSTR* Value/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_ElementIDSKLAD(BSTR Value/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_ElementGID_SSKLAD(BSTR* Value/*[out,retval]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE set_ElementGID_SSKLAD(BSTR Value/*[in]*/) = 0; // [224]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall OpenElement(BSTR id/*[in]*/)
  {
    int result;
    OLECHECK(this->OpenElement(id, (int*)&result));
    return result;
  }

  BSTR __fastcall GetIdElement(BSTR gid/*[in]*/)
  {
    BSTR id = 0;
    OLECHECK(this->GetIdElement(gid, (BSTR*)&id));
    return id;
  }

  BSTR __fastcall GetGidElement(BSTR id/*[in]*/)
  {
    BSTR gid = 0;
    OLECHECK(this->GetGidElement(id, (BSTR*)&gid));
    return gid;
  }

  int __fastcall get_TableEof(void)
  {
    int Value;
    OLECHECK(this->get_TableEof((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableNAMESKLAD(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableNAMESKLAD((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableMOLSKLAD(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableMOLSKLAD((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableADRSKLAD(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableADRSKLAD((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_TableTSklad(void)
  {
    int Value;
    OLECHECK(this->get_TableTSklad((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDSKLAD(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDSKLAD((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableGID_SSKLAD(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableGID_SSKLAD((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementNAMESKLAD(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementNAMESKLAD((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementMOLSKLAD(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementMOLSKLAD((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementADRSKLAD(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementADRSKLAD((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_ElementTSKLAD(void)
  {
    int Value;
    OLECHECK(this->get_ElementTSKLAD((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementIDSKLAD(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementIDSKLAD((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementGID_SSKLAD(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementGID_SSKLAD((BSTR*)&Value));
    return Value;
  }


  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableNAMESKLAD = {read = get_TableNAMESKLAD};
  __property   BSTR            TableMOLSKLAD = {read = get_TableMOLSKLAD};
  __property   BSTR            TableADRSKLAD = {read = get_TableADRSKLAD};
  __property   int             TableTSklad = {read = get_TableTSklad};
  __property   BSTR            TableIDSKLAD = {read = get_TableIDSKLAD};
  __property   BSTR            TableGID_SSKLAD = {read = get_TableGID_SSKLAD};
  __property   BSTR            ElementNAMESKLAD = {read = get_ElementNAMESKLAD, write = set_ElementNAMESKLAD};
  __property   BSTR            ElementMOLSKLAD = {read = get_ElementMOLSKLAD, write = set_ElementMOLSKLAD};
  __property   BSTR            ElementADRSKLAD = {read = get_ElementADRSKLAD, write = set_ElementADRSKLAD};
  __property   int             ElementTSKLAD = {read = get_ElementTSKLAD, write = set_ElementTSKLAD};
  __property   BSTR            ElementIDSKLAD = {read = get_ElementIDSKLAD, write = set_ElementIDSKLAD};
  __property   BSTR            ElementGID_SSKLAD = {read = get_ElementGID_SSKLAD, write = set_ElementGID_SSKLAD};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMSprFirm
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6537D36E-E877-40F4-8BA1-EA8018256082}
// *********************************************************************//
interface IOleDMSprFirm  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(void) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE NewElement(void) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE SaveElement(int* result/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE DeleteElement(BSTR id/*[in]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE get_TableINNFIRM(BSTR* Value/*[out,retval]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE get_TableNAMEFIRM(BSTR* Value/*[out,retval]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDFIRM(BSTR* Value/*[out,retval]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE get_ElementIDFIRM(BSTR* Value/*[out,retval]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE set_ElementIDFIRM(BSTR Value/*[in]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE get_ElementNAMEFIRM(BSTR* Value/*[out,retval]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE set_ElementNAMEFIRM(BSTR Value/*[in]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE get_ElementINNFIRM(BSTR* Value/*[out,retval]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE set_ElementINNFIRM(BSTR Value/*[in]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE get_TableEof(int* Value/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_TableGID_SFIRM(BSTR* Value/*[out,retval]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE get_ElementGID_SFIRM(BSTR* Value/*[out,retval]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE set_ElementGID_SFIRM(BSTR Value/*[in]*/) = 0; // [220]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall OpenElement(BSTR id/*[in]*/)
  {
    int result;
    OLECHECK(this->OpenElement(id, (int*)&result));
    return result;
  }

  int __fastcall SaveElement(void)
  {
    int result;
    OLECHECK(this->SaveElement((int*)&result));
    return result;
  }

  BSTR __fastcall GetGidElement(BSTR id/*[in]*/)
  {
    BSTR gid = 0;
    OLECHECK(this->GetGidElement(id, (BSTR*)&gid));
    return gid;
  }

  BSTR __fastcall GetIdElement(BSTR gid/*[in]*/)
  {
    BSTR id = 0;
    OLECHECK(this->GetIdElement(gid, (BSTR*)&id));
    return id;
  }

  BSTR __fastcall get_TableINNFIRM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableINNFIRM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableNAMEFIRM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableNAMEFIRM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDFIRM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDFIRM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementIDFIRM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementIDFIRM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementNAMEFIRM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementNAMEFIRM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementINNFIRM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementINNFIRM((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_TableEof(void)
  {
    int Value;
    OLECHECK(this->get_TableEof((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableGID_SFIRM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableGID_SFIRM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementGID_SFIRM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementGID_SFIRM((BSTR*)&Value));
    return Value;
  }


  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   BSTR            TableINNFIRM = {read = get_TableINNFIRM};
  __property   BSTR            TableNAMEFIRM = {read = get_TableNAMEFIRM};
  __property   BSTR            TableIDFIRM = {read = get_TableIDFIRM};
  __property   BSTR            ElementIDFIRM = {read = get_ElementIDFIRM, write = set_ElementIDFIRM};
  __property   BSTR            ElementNAMEFIRM = {read = get_ElementNAMEFIRM, write = set_ElementNAMEFIRM};
  __property   BSTR            ElementINNFIRM = {read = get_ElementINNFIRM, write = set_ElementINNFIRM};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableGID_SFIRM = {read = get_TableGID_SFIRM};
  __property   BSTR            ElementGID_SFIRM = {read = get_ElementGID_SFIRM, write = set_ElementGID_SFIRM};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMSprInfBase
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1C1C010E-C0C9-4871-BC0E-7A93E2CB6AD9}
// *********************************************************************//
interface IOleDMSprInfBase  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(void) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE NewElement(void) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE SaveElement(int* result/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE DeleteElement(BSTR id/*[in]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE GetIdPoName(BSTR name/*[in]*/, BSTR* id/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE get_TableEof(int* Value/*[out,retval]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE get_TableNAME_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE get_TableID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE get_TableGID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE get_ElementNAME_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE set_ElementNAME_SINFBASE_OBMEN(BSTR Value/*[in]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE get_ElementID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE set_ElementID_SINFBASE_OBMEN(BSTR Value/*[in]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE get_ElementGID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE set_ElementGID_SINFBASE_OBMEN(BSTR Value/*[in]*/) = 0; // [217]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall OpenElement(BSTR id/*[in]*/)
  {
    int result;
    OLECHECK(this->OpenElement(id, (int*)&result));
    return result;
  }

  int __fastcall SaveElement(void)
  {
    int result;
    OLECHECK(this->SaveElement((int*)&result));
    return result;
  }

  BSTR __fastcall GetIdPoName(BSTR name/*[in]*/)
  {
    BSTR id = 0;
    OLECHECK(this->GetIdPoName(name, (BSTR*)&id));
    return id;
  }

  int __fastcall get_TableEof(void)
  {
    int Value;
    OLECHECK(this->get_TableEof((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableNAME_SINFBASE_OBMEN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableNAME_SINFBASE_OBMEN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableID_SINFBASE_OBMEN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableID_SINFBASE_OBMEN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableGID_SINFBASE_OBMEN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableGID_SINFBASE_OBMEN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementNAME_SINFBASE_OBMEN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementNAME_SINFBASE_OBMEN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementID_SINFBASE_OBMEN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementID_SINFBASE_OBMEN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementGID_SINFBASE_OBMEN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementGID_SINFBASE_OBMEN((BSTR*)&Value));
    return Value;
  }


  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableNAME_SINFBASE_OBMEN = {read = get_TableNAME_SINFBASE_OBMEN};
  __property   BSTR            TableID_SINFBASE_OBMEN = {read = get_TableID_SINFBASE_OBMEN};
  __property   BSTR            TableGID_SINFBASE_OBMEN = {read = get_TableGID_SINFBASE_OBMEN};
  __property   BSTR            ElementNAME_SINFBASE_OBMEN = {read = get_ElementNAME_SINFBASE_OBMEN, write = set_ElementNAME_SINFBASE_OBMEN};
  __property   BSTR            ElementID_SINFBASE_OBMEN = {read = get_ElementID_SINFBASE_OBMEN, write = set_ElementID_SINFBASE_OBMEN};
  __property   BSTR            ElementGID_SINFBASE_OBMEN = {read = get_ElementGID_SINFBASE_OBMEN, write = set_ElementGID_SINFBASE_OBMEN};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMSprEd
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D28F8AE3-3B91-49E0-BE35-1133F9362791}
// *********************************************************************//
interface IOleDMSprEd  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(BSTR id_nom/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE NewElement(BSTR id_nom/*[in]*/, int* result/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE SaveElement(int* result/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE FindEdPoSh(BSTR sh/*[in]*/, BSTR* result/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE get_TableEof(int* Value/*[out,retval]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE get_TableNAMEED(BSTR* Value/*[out,retval]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE get_TableKFED(double* Value/*[out,retval]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE get_TableTSHED(int* Value/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE get_TableSHED(BSTR* Value/*[out,retval]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDED(BSTR* Value/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDNOMED(BSTR* Value/*[out,retval]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDOKEIED(BSTR* Value/*[out,retval]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE get_TableGID_SED(BSTR* Value/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_TableCODE_SED(int* Value/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_ElementNAMEED(BSTR* Value/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_ElementNAMEED(BSTR Value/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_ElementKFED(double* Value/*[out,retval]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE set_ElementKFED(double Value/*[in]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE get_ElementTSHED(int* Value/*[out,retval]*/) = 0; // [225]
  virtual HRESULT STDMETHODCALLTYPE set_ElementTSHED(int Value/*[in]*/) = 0; // [225]
  virtual HRESULT STDMETHODCALLTYPE get_ElementSHED(BSTR* Value/*[out,retval]*/) = 0; // [226]
  virtual HRESULT STDMETHODCALLTYPE set_ElementSHED(BSTR Value/*[in]*/) = 0; // [226]
  virtual HRESULT STDMETHODCALLTYPE get_ElementIDED(BSTR* Value/*[out,retval]*/) = 0; // [227]
  virtual HRESULT STDMETHODCALLTYPE set_ElementIDED(BSTR Value/*[in]*/) = 0; // [227]
  virtual HRESULT STDMETHODCALLTYPE get_ElementIDOKEIED(BSTR* Value/*[out,retval]*/) = 0; // [228]
  virtual HRESULT STDMETHODCALLTYPE set_ElementIDOKEIED(BSTR Value/*[in]*/) = 0; // [228]
  virtual HRESULT STDMETHODCALLTYPE get_ElementGID_SED(BSTR* Value/*[out,retval]*/) = 0; // [229]
  virtual HRESULT STDMETHODCALLTYPE set_ElementGID_SED(BSTR Value/*[in]*/) = 0; // [229]
  virtual HRESULT STDMETHODCALLTYPE get_ElementCODE_SED(int* Value/*[out,retval]*/) = 0; // [230]
  virtual HRESULT STDMETHODCALLTYPE set_ElementCODE_SED(int Value/*[in]*/) = 0; // [230]
  virtual HRESULT STDMETHODCALLTYPE get_ElementNAMEOKEI(BSTR* Value/*[out,retval]*/) = 0; // [231]
  virtual HRESULT STDMETHODCALLTYPE set_ElementNAMEOKEI(BSTR Value/*[in]*/) = 0; // [231]
  virtual HRESULT STDMETHODCALLTYPE OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE DeleteElement(BSTR id/*[in]*/, int* result/*[out,retval]*/) = 0; // [207]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall NewElement(BSTR id_nom/*[in]*/)
  {
    int result;
    OLECHECK(this->NewElement(id_nom, (int*)&result));
    return result;
  }

  int __fastcall SaveElement(void)
  {
    int result;
    OLECHECK(this->SaveElement((int*)&result));
    return result;
  }

  BSTR __fastcall FindEdPoSh(BSTR sh/*[in]*/)
  {
    BSTR result = 0;
    OLECHECK(this->FindEdPoSh(sh, (BSTR*)&result));
    return result;
  }

  BSTR __fastcall GetIdElement(BSTR gid/*[in]*/)
  {
    BSTR id = 0;
    OLECHECK(this->GetIdElement(gid, (BSTR*)&id));
    return id;
  }

  BSTR __fastcall GetGidElement(BSTR id/*[in]*/)
  {
    BSTR gid = 0;
    OLECHECK(this->GetGidElement(id, (BSTR*)&gid));
    return gid;
  }

  int __fastcall get_TableEof(void)
  {
    int Value;
    OLECHECK(this->get_TableEof((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableNAMEED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableNAMEED((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_TableKFED(void)
  {
    double Value;
    OLECHECK(this->get_TableKFED((double*)&Value));
    return Value;
  }

  int __fastcall get_TableTSHED(void)
  {
    int Value;
    OLECHECK(this->get_TableTSHED((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableSHED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableSHED((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDED((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDNOMED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDNOMED((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDOKEIED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDOKEIED((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableGID_SED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableGID_SED((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_TableCODE_SED(void)
  {
    int Value;
    OLECHECK(this->get_TableCODE_SED((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementNAMEED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementNAMEED((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_ElementKFED(void)
  {
    double Value;
    OLECHECK(this->get_ElementKFED((double*)&Value));
    return Value;
  }

  int __fastcall get_ElementTSHED(void)
  {
    int Value;
    OLECHECK(this->get_ElementTSHED((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementSHED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementSHED((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementIDED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementIDED((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementIDOKEIED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementIDOKEIED((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementGID_SED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementGID_SED((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_ElementCODE_SED(void)
  {
    int Value;
    OLECHECK(this->get_ElementCODE_SED((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementNAMEOKEI(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementNAMEOKEI((BSTR*)&Value));
    return Value;
  }

  int __fastcall OpenElement(BSTR id/*[in]*/)
  {
    int result;
    OLECHECK(this->OpenElement(id, (int*)&result));
    return result;
  }

  int __fastcall DeleteElement(BSTR id/*[in]*/)
  {
    int result;
    OLECHECK(this->DeleteElement(id, (int*)&result));
    return result;
  }


  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableNAMEED = {read = get_TableNAMEED};
  __property   double          TableKFED = {read = get_TableKFED};
  __property   int             TableTSHED = {read = get_TableTSHED};
  __property   BSTR            TableSHED = {read = get_TableSHED};
  __property   BSTR            TableIDED = {read = get_TableIDED};
  __property   BSTR            TableIDNOMED = {read = get_TableIDNOMED};
  __property   BSTR            TableIDOKEIED = {read = get_TableIDOKEIED};
  __property   BSTR            TableGID_SED = {read = get_TableGID_SED};
  __property   int             TableCODE_SED = {read = get_TableCODE_SED};
  __property   BSTR            ElementNAMEED = {read = get_ElementNAMEED, write = set_ElementNAMEED};
  __property   double          ElementKFED = {read = get_ElementKFED, write = set_ElementKFED};
  __property   int             ElementTSHED = {read = get_ElementTSHED, write = set_ElementTSHED};
  __property   BSTR            ElementSHED = {read = get_ElementSHED, write = set_ElementSHED};
  __property   BSTR            ElementIDED = {read = get_ElementIDED, write = set_ElementIDED};
  __property   BSTR            ElementIDOKEIED = {read = get_ElementIDOKEIED, write = set_ElementIDOKEIED};
  __property   BSTR            ElementGID_SED = {read = get_ElementGID_SED, write = set_ElementGID_SED};
  __property   int             ElementCODE_SED = {read = get_ElementCODE_SED, write = set_ElementCODE_SED};
  __property   BSTR            ElementNAMEOKEI = {read = get_ElementNAMEOKEI, write = set_ElementNAMEOKEI};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMSprGrpNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E00B40C2-1DED-4F6C-8D31-FA94C078691E}
// *********************************************************************//
interface IOleDMSprGrpNom  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE NewElement(BSTR id_grp/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE SaveElement(int* result/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE DeleteElement(BSTR id/*[in]*/, int* result/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(void) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE get_TableEof(int* Value/*[out,retval]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDGN(BSTR* Value/*[out,retval]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDGRPGN(BSTR* Value/*[out,retval]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE get_TableNAMEGN(BSTR* Value/*[out,retval]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE get_TableGID_SGRPNOM(BSTR* Value/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE get_ElementIDGN(BSTR* Value/*[out,retval]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE set_ElementIDGN(BSTR Value/*[in]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE get_ElementIDGRPGN(BSTR* Value/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_ElementIDGRPGN(BSTR Value/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_ElementNAMEGN(BSTR* Value/*[out,retval]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE set_ElementNAMEGN(BSTR Value/*[in]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE get_ElementGID_SGRPNOM(BSTR* Value/*[out,retval]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE set_ElementGID_SGRPNOM(BSTR Value/*[in]*/) = 0; // [220]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall SaveElement(void)
  {
    int result;
    OLECHECK(this->SaveElement((int*)&result));
    return result;
  }

  int __fastcall OpenElement(BSTR id/*[in]*/)
  {
    int result;
    OLECHECK(this->OpenElement(id, (int*)&result));
    return result;
  }

  int __fastcall DeleteElement(BSTR id/*[in]*/)
  {
    int result;
    OLECHECK(this->DeleteElement(id, (int*)&result));
    return result;
  }

  int __fastcall get_TableEof(void)
  {
    int Value;
    OLECHECK(this->get_TableEof((int*)&Value));
    return Value;
  }

  BSTR __fastcall GetIdElement(BSTR gid/*[in]*/)
  {
    BSTR id = 0;
    OLECHECK(this->GetIdElement(gid, (BSTR*)&id));
    return id;
  }

  BSTR __fastcall GetGidElement(BSTR id/*[in]*/)
  {
    BSTR gid = 0;
    OLECHECK(this->GetGidElement(id, (BSTR*)&gid));
    return gid;
  }

  BSTR __fastcall get_TableIDGN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDGN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDGRPGN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDGRPGN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableNAMEGN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableNAMEGN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableGID_SGRPNOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableGID_SGRPNOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementIDGN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementIDGN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementIDGRPGN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementIDGRPGN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementNAMEGN(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementNAMEGN((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementGID_SGRPNOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementGID_SGRPNOM((BSTR*)&Value));
    return Value;
  }


  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableIDGN = {read = get_TableIDGN};
  __property   BSTR            TableIDGRPGN = {read = get_TableIDGRPGN};
  __property   BSTR            TableNAMEGN = {read = get_TableNAMEGN};
  __property   BSTR            TableGID_SGRPNOM = {read = get_TableGID_SGRPNOM};
  __property   BSTR            ElementIDGN = {read = get_ElementIDGN, write = set_ElementIDGN};
  __property   BSTR            ElementIDGRPGN = {read = get_ElementIDGRPGN, write = set_ElementIDGRPGN};
  __property   BSTR            ElementNAMEGN = {read = get_ElementNAMEGN, write = set_ElementNAMEGN};
  __property   BSTR            ElementGID_SGRPNOM = {read = get_ElementGID_SGRPNOM, write = set_ElementGID_SGRPNOM};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMSprNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5023B6C6-594F-4337-B907-E71269058E57}
// *********************************************************************//
interface IOleDMSprNom  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE NewElement(BSTR id_grp/*[in]*/, int* result/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE SaveElement(int* result/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE DeleteElement(BSTR id/*[in]*/, int* result/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(BSTR id_grp/*[in]*/, int all/*[in]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE get_TableEof(int* Value/*[out,retval]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE get_TableCODENOM(int* Value/*[out,retval]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE get_TableTNOM(int* Value/*[out,retval]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE get_TableNAMENOM(BSTR* Value/*[out,retval]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE get_TableNAMEED(BSTR* Value/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDNOM(BSTR* Value/*[out,retval]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDGRPNOM(BSTR* Value/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_ElementTNOM(int* Value/*[out,retval]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE set_ElementTNOM(int Value/*[in]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE get_ElementCODENOM(int* Value/*[out,retval]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE set_ElementCODENOM(int Value/*[in]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE get_ElementNAMENOM(BSTR* Value/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_ElementNAMENOM(BSTR Value/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_ElementFNAMENOM(BSTR* Value/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_ElementFNAMENOM(BSTR Value/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_ElementKRNAMENOM(BSTR* Value/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_ElementKRNAMENOM(BSTR Value/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_ElementARTNOM(BSTR* Value/*[out,retval]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE set_ElementARTNOM(BSTR Value/*[in]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE get_ElementSTNDSNOM(double* Value/*[out,retval]*/) = 0; // [225]
  virtual HRESULT STDMETHODCALLTYPE set_ElementSTNDSNOM(double Value/*[in]*/) = 0; // [225]
  virtual HRESULT STDMETHODCALLTYPE get_ElementIDBASEDNOM(BSTR* Value/*[out,retval]*/) = 0; // [226]
  virtual HRESULT STDMETHODCALLTYPE set_ElementIDBASEDNOM(BSTR Value/*[in]*/) = 0; // [226]
  virtual HRESULT STDMETHODCALLTYPE get_ElementIDOSNEDNOM(BSTR* Value/*[out,retval]*/) = 0; // [227]
  virtual HRESULT STDMETHODCALLTYPE set_ElementIDOSNEDNOM(BSTR Value/*[in]*/) = 0; // [227]
  virtual HRESULT STDMETHODCALLTYPE get_ElementIDNOM(BSTR* Value/*[out,retval]*/) = 0; // [228]
  virtual HRESULT STDMETHODCALLTYPE set_ElementIDNOM(BSTR Value/*[in]*/) = 0; // [228]
  virtual HRESULT STDMETHODCALLTYPE get_ElementIDGRPNOM(BSTR* Value/*[out,retval]*/) = 0; // [229]
  virtual HRESULT STDMETHODCALLTYPE set_ElementIDGRPNOM(BSTR Value/*[in]*/) = 0; // [229]
  virtual HRESULT STDMETHODCALLTYPE get_ElementIDFIRMNOM(BSTR* Value/*[out,retval]*/) = 0; // [230]
  virtual HRESULT STDMETHODCALLTYPE set_ElementIDFIRMNOM(BSTR Value/*[in]*/) = 0; // [230]
  virtual HRESULT STDMETHODCALLTYPE get_ElementIDCOUNTRYNOM(BSTR* Value/*[out,retval]*/) = 0; // [231]
  virtual HRESULT STDMETHODCALLTYPE set_ElementIDCOUNTRYNOM(BSTR Value/*[in]*/) = 0; // [231]
  virtual HRESULT STDMETHODCALLTYPE get_ElementGID_SNOM(BSTR* Value/*[out,retval]*/) = 0; // [232]
  virtual HRESULT STDMETHODCALLTYPE set_ElementGID_SNOM(BSTR Value/*[in]*/) = 0; // [232]
  virtual HRESULT STDMETHODCALLTYPE get_ElementIDVID_SNOM(BSTR* Value/*[out,retval]*/) = 0; // [233]
  virtual HRESULT STDMETHODCALLTYPE set_ElementIDVID_SNOM(BSTR Value/*[in]*/) = 0; // [233]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall NewElement(BSTR id_grp/*[in]*/)
  {
    int result;
    OLECHECK(this->NewElement(id_grp, (int*)&result));
    return result;
  }

  int __fastcall SaveElement(void)
  {
    int result;
    OLECHECK(this->SaveElement((int*)&result));
    return result;
  }

  int __fastcall OpenElement(BSTR id/*[in]*/)
  {
    int result;
    OLECHECK(this->OpenElement(id, (int*)&result));
    return result;
  }

  int __fastcall DeleteElement(BSTR id/*[in]*/)
  {
    int result;
    OLECHECK(this->DeleteElement(id, (int*)&result));
    return result;
  }

  int __fastcall get_TableEof(void)
  {
    int Value;
    OLECHECK(this->get_TableEof((int*)&Value));
    return Value;
  }

  BSTR __fastcall GetIdElement(BSTR gid/*[in]*/)
  {
    BSTR id = 0;
    OLECHECK(this->GetIdElement(gid, (BSTR*)&id));
    return id;
  }

  BSTR __fastcall GetGidElement(BSTR id/*[in]*/)
  {
    BSTR gid = 0;
    OLECHECK(this->GetGidElement(id, (BSTR*)&gid));
    return gid;
  }

  int __fastcall get_TableCODENOM(void)
  {
    int Value;
    OLECHECK(this->get_TableCODENOM((int*)&Value));
    return Value;
  }

  int __fastcall get_TableTNOM(void)
  {
    int Value;
    OLECHECK(this->get_TableTNOM((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableNAMENOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableNAMENOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableNAMEED(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableNAMEED((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDNOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDNOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDGRPNOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDGRPNOM((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_ElementTNOM(void)
  {
    int Value;
    OLECHECK(this->get_ElementTNOM((int*)&Value));
    return Value;
  }

  int __fastcall get_ElementCODENOM(void)
  {
    int Value;
    OLECHECK(this->get_ElementCODENOM((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementNAMENOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementNAMENOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementFNAMENOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementFNAMENOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementKRNAMENOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementKRNAMENOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementARTNOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementARTNOM((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_ElementSTNDSNOM(void)
  {
    double Value;
    OLECHECK(this->get_ElementSTNDSNOM((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementIDBASEDNOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementIDBASEDNOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementIDOSNEDNOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementIDOSNEDNOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementIDNOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementIDNOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementIDGRPNOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementIDGRPNOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementIDFIRMNOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementIDFIRMNOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementIDCOUNTRYNOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementIDCOUNTRYNOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementGID_SNOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementGID_SNOM((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementIDVID_SNOM(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementIDVID_SNOM((BSTR*)&Value));
    return Value;
  }


  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   int             TableCODENOM = {read = get_TableCODENOM};
  __property   int             TableTNOM = {read = get_TableTNOM};
  __property   BSTR            TableNAMENOM = {read = get_TableNAMENOM};
  __property   BSTR            TableNAMEED = {read = get_TableNAMEED};
  __property   BSTR            TableIDNOM = {read = get_TableIDNOM};
  __property   BSTR            TableIDGRPNOM = {read = get_TableIDGRPNOM};
  __property   int             ElementTNOM = {read = get_ElementTNOM, write = set_ElementTNOM};
  __property   int             ElementCODENOM = {read = get_ElementCODENOM, write = set_ElementCODENOM};
  __property   BSTR            ElementNAMENOM = {read = get_ElementNAMENOM, write = set_ElementNAMENOM};
  __property   BSTR            ElementFNAMENOM = {read = get_ElementFNAMENOM, write = set_ElementFNAMENOM};
  __property   BSTR            ElementKRNAMENOM = {read = get_ElementKRNAMENOM, write = set_ElementKRNAMENOM};
  __property   BSTR            ElementARTNOM = {read = get_ElementARTNOM, write = set_ElementARTNOM};
  __property   double          ElementSTNDSNOM = {read = get_ElementSTNDSNOM, write = set_ElementSTNDSNOM};
  __property   BSTR            ElementIDBASEDNOM = {read = get_ElementIDBASEDNOM, write = set_ElementIDBASEDNOM};
  __property   BSTR            ElementIDOSNEDNOM = {read = get_ElementIDOSNEDNOM, write = set_ElementIDOSNEDNOM};
  __property   BSTR            ElementIDNOM = {read = get_ElementIDNOM, write = set_ElementIDNOM};
  __property   BSTR            ElementIDGRPNOM = {read = get_ElementIDGRPNOM, write = set_ElementIDGRPNOM};
  __property   BSTR            ElementIDFIRMNOM = {read = get_ElementIDFIRMNOM, write = set_ElementIDFIRMNOM};
  __property   BSTR            ElementIDCOUNTRYNOM = {read = get_ElementIDCOUNTRYNOM, write = set_ElementIDCOUNTRYNOM};
  __property   BSTR            ElementGID_SNOM = {read = get_ElementGID_SNOM, write = set_ElementGID_SNOM};
  __property   BSTR            ElementIDVID_SNOM = {read = get_ElementIDVID_SNOM, write = set_ElementIDVID_SNOM};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMSprTypePrice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DA8FD0DF-AD0F-411A-B455-D9E2EC4DF13D}
// *********************************************************************//
interface IOleDMSprTypePrice  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE NewElement(void) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE SaveElement(int* result/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE DeleteElement(BSTR id/*[in]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(void) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE get_TableEof(int* Value/*[out,retval]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE get_TableNAME_TPRICE(BSTR* Value/*[out,retval]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE get_TableID_TPRICE(BSTR* Value/*[out,retval]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE get_TableGID_STPRICE(BSTR* Value/*[out,retval]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE get_ElementNAME_TPRICE(BSTR* Value/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE set_ElementNAME_TPRICE(BSTR Value/*[in]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE get_ElementID_TPRICE(BSTR* Value/*[out,retval]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE set_ElementID_TPRICE(BSTR Value/*[in]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE get_ElementGID_STPRICE(BSTR* Value/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_ElementGID_STPRICE(BSTR Value/*[in]*/) = 0; // [218]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall SaveElement(void)
  {
    int result;
    OLECHECK(this->SaveElement((int*)&result));
    return result;
  }

  int __fastcall OpenElement(BSTR id/*[in]*/)
  {
    int result;
    OLECHECK(this->OpenElement(id, (int*)&result));
    return result;
  }

  int __fastcall get_TableEof(void)
  {
    int Value;
    OLECHECK(this->get_TableEof((int*)&Value));
    return Value;
  }

  BSTR __fastcall GetIdElement(BSTR gid/*[in]*/)
  {
    BSTR id = 0;
    OLECHECK(this->GetIdElement(gid, (BSTR*)&id));
    return id;
  }

  BSTR __fastcall GetGidElement(BSTR id/*[in]*/)
  {
    BSTR gid = 0;
    OLECHECK(this->GetGidElement(id, (BSTR*)&gid));
    return gid;
  }

  BSTR __fastcall get_TableNAME_TPRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableNAME_TPRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableID_TPRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableID_TPRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableGID_STPRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableGID_STPRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementNAME_TPRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementNAME_TPRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementID_TPRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementID_TPRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementGID_STPRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementGID_STPRICE((BSTR*)&Value));
    return Value;
  }


  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableNAME_TPRICE = {read = get_TableNAME_TPRICE};
  __property   BSTR            TableID_TPRICE = {read = get_TableID_TPRICE};
  __property   BSTR            TableGID_STPRICE = {read = get_TableGID_STPRICE};
  __property   BSTR            ElementNAME_TPRICE = {read = get_ElementNAME_TPRICE, write = set_ElementNAME_TPRICE};
  __property   BSTR            ElementID_TPRICE = {read = get_ElementID_TPRICE, write = set_ElementID_TPRICE};
  __property   BSTR            ElementGID_STPRICE = {read = get_ElementGID_STPRICE, write = set_ElementGID_STPRICE};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMSprPrice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8FAC9484-DAC5-4142-B381-BB4AAFA0ECF8}
// *********************************************************************//
interface IOleDMSprPrice  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE NewElement(BSTR id_nom/*[in]*/, BSTR id_type_price/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE SaveElement(int* result/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE DeleteElement(BSTR id/*[in]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(BSTR id_nom/*[in]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE TableFirst(void) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE TableNext(void) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE get_TableEof(int* Value/*[out,retval]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE get_TableNAME_TPRICE(BSTR* Value/*[out,retval]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE get_TableID_PRICE(BSTR* Value/*[out,retval]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDNOM_PRICE(BSTR* Value/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE get_TableIDTYPE_PRICE(BSTR* Value/*[out,retval]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE get_TableGID_SPRICE(BSTR* Value/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_ElementZNACH_PRICE(double* Value/*[out,retval]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE set_ElementZNACH_PRICE(double Value/*[in]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE get_ElementID_PRICE(BSTR* Value/*[out,retval]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE set_ElementID_PRICE(BSTR Value/*[in]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE get_ElementIDNOM_PRICE(BSTR* Value/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_ElementIDNOM_PRICE(BSTR Value/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_ElementIDTYPE_PRICE(BSTR* Value/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_ElementIDTYPE_PRICE(BSTR Value/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_ElementGID_SPRICE(BSTR* Value/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_ElementGID_SPRICE(BSTR Value/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE FindElement(BSTR id_type_price/*[in]*/, BSTR id_nom/*[in]*/, 
                                                BSTR* result/*[out,retval]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE get_TableZNACH_PRICE(double* Value/*[out,retval]*/) = 0; // [213]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall SaveElement(void)
  {
    int result;
    OLECHECK(this->SaveElement((int*)&result));
    return result;
  }

  int __fastcall OpenElement(BSTR id/*[in]*/)
  {
    int result;
    OLECHECK(this->OpenElement(id, (int*)&result));
    return result;
  }

  int __fastcall get_TableEof(void)
  {
    int Value;
    OLECHECK(this->get_TableEof((int*)&Value));
    return Value;
  }

  BSTR __fastcall GetIdElement(BSTR gid/*[in]*/)
  {
    BSTR id = 0;
    OLECHECK(this->GetIdElement(gid, (BSTR*)&id));
    return id;
  }

  BSTR __fastcall GetGidElement(BSTR id/*[in]*/)
  {
    BSTR gid = 0;
    OLECHECK(this->GetGidElement(id, (BSTR*)&gid));
    return gid;
  }

  BSTR __fastcall get_TableNAME_TPRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableNAME_TPRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableID_PRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableID_PRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDNOM_PRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDNOM_PRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableIDTYPE_PRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableIDTYPE_PRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_TableGID_SPRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TableGID_SPRICE((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_ElementZNACH_PRICE(void)
  {
    double Value;
    OLECHECK(this->get_ElementZNACH_PRICE((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementID_PRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementID_PRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementIDNOM_PRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementIDNOM_PRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementIDTYPE_PRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementIDTYPE_PRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_ElementGID_SPRICE(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ElementGID_SPRICE((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall FindElement(BSTR id_type_price/*[in]*/, BSTR id_nom/*[in]*/)
  {
    BSTR result = 0;
    OLECHECK(this->FindElement(id_type_price, id_nom, (BSTR*)&result));
    return result;
  }

  double __fastcall get_TableZNACH_PRICE(void)
  {
    double Value;
    OLECHECK(this->get_TableZNACH_PRICE((double*)&Value));
    return Value;
  }


  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableNAME_TPRICE = {read = get_TableNAME_TPRICE};
  __property   BSTR            TableID_PRICE = {read = get_TableID_PRICE};
  __property   BSTR            TableIDNOM_PRICE = {read = get_TableIDNOM_PRICE};
  __property   BSTR            TableIDTYPE_PRICE = {read = get_TableIDTYPE_PRICE};
  __property   BSTR            TableGID_SPRICE = {read = get_TableGID_SPRICE};
  __property   double          ElementZNACH_PRICE = {read = get_ElementZNACH_PRICE, write = set_ElementZNACH_PRICE};
  __property   BSTR            ElementID_PRICE = {read = get_ElementID_PRICE, write = set_ElementID_PRICE};
  __property   BSTR            ElementIDNOM_PRICE = {read = get_ElementIDNOM_PRICE, write = set_ElementIDNOM_PRICE};
  __property   BSTR            ElementIDTYPE_PRICE = {read = get_ElementIDTYPE_PRICE, write = set_ElementIDTYPE_PRICE};
  __property   BSTR            ElementGID_SPRICE = {read = get_ElementGID_SPRICE, write = set_ElementGID_SPRICE};
  __property   double          TableZNACH_PRICE = {read = get_TableZNACH_PRICE};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleDMDocReal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C03B1E3C-DE78-4569-9A1D-A9C348DD9687}
// *********************************************************************//
interface IOleDMDocReal  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CodeError(int* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_TextError(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE NewDoc(void) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE OpenDoc(BSTR id/*[in]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE SaveDoc(int* result/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE CloseDoc(void) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE DeleteDoc(BSTR id/*[in]*/, int* result/*[out,retval]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE DocTFirst(void) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE DocTNext(void) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE get_DocTEof(int* Value/*[out,retval]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE GetIdDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/, 
                                             BSTR* id/*[out,retval]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllPOSDOC(BSTR Value/*[in]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllTDOC(BSTR* Value/*[out,retval]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllTDOC(BSTR Value/*[in]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllNUMDOC(int* Value/*[out,retval]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllNUMDOC(int Value/*[in]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllSUMDOC(double* Value/*[out,retval]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllSUMDOC(double Value/*[in]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDDOC(BSTR* Value/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDFIRMDOC(BSTR Value/*[in]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDSKLDOC(BSTR Value/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDKLDOC(BSTR Value/*[in]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE get_DocPRIMREA(BSTR* Value/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_DocPRIMREA(BSTR Value/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDREA(BSTR* Value/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDREA(BSTR Value/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDDOCREA(BSTR* Value/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDDOCREA(BSTR Value/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDTPRICEREA(BSTR* Value/*[out,retval]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDTPRICEREA(BSTR Value/*[in]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDGRPOLREA(BSTR* Value/*[out,retval]*/) = 0; // [225]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDGRPOLREA(BSTR Value/*[in]*/) = 0; // [225]
  virtual HRESULT STDMETHODCALLTYPE get_DocIDBSCHETREA(BSTR* Value/*[out,retval]*/) = 0; // [226]
  virtual HRESULT STDMETHODCALLTYPE set_DocIDBSCHETREA(BSTR Value/*[in]*/) = 0; // [226]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDREAT(BSTR* Value/*[out,retval]*/) = 0; // [227]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDREAT(BSTR Value/*[in]*/) = 0; // [227]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDDOCREAT(BSTR* Value/*[out,retval]*/) = 0; // [228]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDDOCREAT(BSTR Value/*[in]*/) = 0; // [228]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDNOMREAT(BSTR* Value/*[out,retval]*/) = 0; // [229]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDNOMREAT(BSTR Value/*[in]*/) = 0; // [229]
  virtual HRESULT STDMETHODCALLTYPE get_DocTIDEDREAT(BSTR* Value/*[out,retval]*/) = 0; // [230]
  virtual HRESULT STDMETHODCALLTYPE set_DocTIDEDREAT(BSTR Value/*[in]*/) = 0; // [230]
  virtual HRESULT STDMETHODCALLTYPE get_DocTKOLREAT(double* Value/*[out,retval]*/) = 0; // [231]
  virtual HRESULT STDMETHODCALLTYPE set_DocTKOLREAT(double Value/*[in]*/) = 0; // [231]
  virtual HRESULT STDMETHODCALLTYPE get_DocTKFREAT(double* Value/*[out,retval]*/) = 0; // [232]
  virtual HRESULT STDMETHODCALLTYPE set_DocTKFREAT(double Value/*[in]*/) = 0; // [232]
  virtual HRESULT STDMETHODCALLTYPE get_DocTPRICEREAT(double* Value/*[out,retval]*/) = 0; // [233]
  virtual HRESULT STDMETHODCALLTYPE set_DocTPRICEREAT(double Value/*[in]*/) = 0; // [233]
  virtual HRESULT STDMETHODCALLTYPE get_DocTSUMREAT(double* Value/*[out,retval]*/) = 0; // [234]
  virtual HRESULT STDMETHODCALLTYPE set_DocTSUMREAT(double Value/*[in]*/) = 0; // [234]
  virtual HRESULT STDMETHODCALLTYPE DocTAppend(void) = 0; // [235]
  virtual HRESULT STDMETHODCALLTYPE DocTDelete(void) = 0; // [236]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_CodeError(void)
  {
    int Value;
    OLECHECK(this->get_CodeError((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_TextError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_TextError((BSTR*)&Value));
    return Value;
  }

  int __fastcall SaveDoc(void)
  {
    int result;
    OLECHECK(this->SaveDoc((int*)&result));
    return result;
  }

  int __fastcall DeleteDoc(BSTR id/*[in]*/)
  {
    int result;
    OLECHECK(this->DeleteDoc(id, (int*)&result));
    return result;
  }

  int __fastcall get_DocTEof(void)
  {
    int Value;
    OLECHECK(this->get_DocTEof((int*)&Value));
    return Value;
  }

  BSTR __fastcall GetIdDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/)
  {
    BSTR id = 0;
    OLECHECK(this->GetIdDoc(number_doc, date_doc, (BSTR*)&id));
    return id;
  }

  BSTR __fastcall get_DocAllPOSDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllPOSDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllTDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllTDOC((BSTR*)&Value));
    return Value;
  }

  int __fastcall get_DocAllNUMDOC(void)
  {
    int Value;
    OLECHECK(this->get_DocAllNUMDOC((int*)&Value));
    return Value;
  }

  double __fastcall get_DocAllSUMDOC(void)
  {
    double Value;
    OLECHECK(this->get_DocAllSUMDOC((double*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDFIRMDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDFIRMDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDSKLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDSKLDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDKLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDKLDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocAllIDBASE_GALLDOC(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocPRIMREA(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocPRIMREA((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDREA(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDREA((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDDOCREA(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDDOCREA((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDTPRICEREA(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDTPRICEREA((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDGRPOLREA(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDGRPOLREA((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocIDBSCHETREA(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocIDBSCHETREA((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDREAT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDREAT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDDOCREAT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDDOCREAT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDNOMREAT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDNOMREAT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_DocTIDEDREAT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_DocTIDEDREAT((BSTR*)&Value));
    return Value;
  }

  double __fastcall get_DocTKOLREAT(void)
  {
    double Value;
    OLECHECK(this->get_DocTKOLREAT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTKFREAT(void)
  {
    double Value;
    OLECHECK(this->get_DocTKFREAT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTPRICEREAT(void)
  {
    double Value;
    OLECHECK(this->get_DocTPRICEREAT((double*)&Value));
    return Value;
  }

  double __fastcall get_DocTSUMREAT(void)
  {
    double Value;
    OLECHECK(this->get_DocTSUMREAT((double*)&Value));
    return Value;
  }


  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             DocTEof = {read = get_DocTEof};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};
  __property   BSTR            DocPRIMREA = {read = get_DocPRIMREA, write = set_DocPRIMREA};
  __property   BSTR            DocIDREA = {read = get_DocIDREA, write = set_DocIDREA};
  __property   BSTR            DocIDDOCREA = {read = get_DocIDDOCREA, write = set_DocIDDOCREA};
  __property   BSTR            DocIDTPRICEREA = {read = get_DocIDTPRICEREA, write = set_DocIDTPRICEREA};
  __property   BSTR            DocIDGRPOLREA = {read = get_DocIDGRPOLREA, write = set_DocIDGRPOLREA};
  __property   BSTR            DocIDBSCHETREA = {read = get_DocIDBSCHETREA, write = set_DocIDBSCHETREA};
  __property   BSTR            DocTIDREAT = {read = get_DocTIDREAT, write = set_DocTIDREAT};
  __property   BSTR            DocTIDDOCREAT = {read = get_DocTIDDOCREAT, write = set_DocTIDDOCREAT};
  __property   BSTR            DocTIDNOMREAT = {read = get_DocTIDNOMREAT, write = set_DocTIDNOMREAT};
  __property   BSTR            DocTIDEDREAT = {read = get_DocTIDEDREAT, write = set_DocTIDEDREAT};
  __property   double          DocTKOLREAT = {read = get_DocTKOLREAT, write = set_DocTKOLREAT};
  __property   double          DocTKFREAT = {read = get_DocTKFREAT, write = set_DocTKFREAT};
  __property   double          DocTPRICEREAT = {read = get_DocTPRICEREAT, write = set_DocTPRICEREAT};
  __property   double          DocTSUMREAT = {read = get_DocTSUMREAT, write = set_DocTSUMREAT};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIOleDM
// Interface: IOleDM
// *********************************************************************//
template <class T /* IOleDM */ >
class TCOMIOleDMT : public TComInterface<IOleDM>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMT() {}
  TCOMIOleDMT(IOleDM *intf, bool addRef = false) : TComInterface<IOleDM>(intf, addRef) {}
  TCOMIOleDMT(const TCOMIOleDMT& src) : TComInterface<IOleDM>(src) {}
  TCOMIOleDMT& operator=(const TCOMIOleDMT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_ConnectString(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ConnectString(void);
  HRESULT         __fastcall set_ConnectString(BSTR Value/*[in]*/);
  HRESULT         __fastcall set_PasswordUser(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_NameUser(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameUser(void);
  HRESULT         __fastcall set_NameUser(BSTR Value/*[in]*/);
  HRESULT         __fastcall GlobConnect(void);
  HRESULT         __fastcall get_ConnectOK(int* Value/*[out,retval]*/);
  int             __fastcall get_ConnectOK(void);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   BSTR            ConnectString = {read = get_ConnectString, write = set_ConnectString};
  __property   BSTR            PasswordUser = {write = set_PasswordUser};
  __property   BSTR            NameUser = {read = get_NameUser, write = set_NameUser};
  __property   int             ConnectOK = {read = get_ConnectOK};
};
typedef TCOMIOleDMT<IOleDM> TCOMIOleDM;

// *********************************************************************//
// DispIntf:  IOleDM
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {74F3797D-8754-4353-9F62-A786056ADDE4}
// *********************************************************************//
template<class T>
class IOleDMDispT : public TAutoDriver<IOleDM>
{
public:
  IOleDMDispT(){}

  IOleDMDispT(IOleDM *pintf)
  {
    TAutoDriver<IOleDM>::Bind(pintf, false);
  }

  IOleDMDispT(IOleDMPtr pintf)
  {
    TAutoDriver<IOleDM>::Bind(pintf, true);
  }

  IOleDMDispT& operator=(IOleDM *pintf)
  {
    TAutoDriver<IOleDM>::Bind(pintf, false);
    return *this;
  }

  IOleDMDispT& operator=(IOleDMPtr pintf)
  {
    TAutoDriver<IOleDM>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDM));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDM);
  }

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_ConnectString(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ConnectString(void);
  HRESULT         __fastcall set_ConnectString(BSTR Value/*[in]*/);
  HRESULT         __fastcall set_PasswordUser(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_NameUser(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NameUser(void);
  HRESULT         __fastcall set_NameUser(BSTR Value/*[in]*/);
  HRESULT         __fastcall GlobConnect();
  HRESULT         __fastcall get_ConnectOK(int* Value/*[out,retval]*/);
  int             __fastcall get_ConnectOK(void);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   BSTR            ConnectString = {read = get_ConnectString, write = set_ConnectString};
  __property   BSTR            PasswordUser = {write = set_PasswordUser};
  __property   BSTR            NameUser = {read = get_NameUser, write = set_NameUser};
  __property   int             ConnectOK = {read = get_ConnectOK};
};
typedef IOleDMDispT<IOleDM> IOleDMDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMGurAllDoc
// Interface: IOleDMGurAllDoc
// *********************************************************************//
template <class T /* IOleDMGurAllDoc */ >
class TCOMIOleDMGurAllDocT : public TComInterface<IOleDMGurAllDoc>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMGurAllDocT() {}
  TCOMIOleDMGurAllDocT(IOleDMGurAllDoc *intf, bool addRef = false) : TComInterface<IOleDMGurAllDoc>(intf, addRef) {}
  TCOMIOleDMGurAllDocT(const TCOMIOleDMGurAllDocT& src) : TComInterface<IOleDMGurAllDoc>(src) {}
  TCOMIOleDMGurAllDocT& operator=(const TCOMIOleDMGurAllDocT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_PosNach(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PosNach(void);
  HRESULT         __fastcall set_PosNach(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_PosCon(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PosCon(void);
  HRESULT         __fastcall set_PosCon(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdDoc(void);
  HRESULT         __fastcall set_IdDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdKlient(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdKlient(void);
  HRESULT         __fastcall set_IdKlient(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdSklad(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdSklad(void);
  HRESULT         __fastcall set_IdSklad(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdFirm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdFirm(void);
  HRESULT         __fastcall set_IdFirm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_StringTypeDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_StringTypeDoc(void);
  HRESULT         __fastcall set_StringTypeDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_OtborVkl(int* Value/*[out,retval]*/);
  int             __fastcall get_OtborVkl(void);
  HRESULT         __fastcall set_OtborVkl(int Value/*[in]*/);
  HRESULT         __fastcall get_NoCheck(int* Value/*[out,retval]*/);
  int             __fastcall get_NoCheck(void);
  HRESULT         __fastcall set_NoCheck(int Value/*[in]*/);
  HRESULT         __fastcall OpenTable(void);
  HRESULT         __fastcall UpdateTable(void);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall get_TablePRDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_TablePRDOC(void);
  HRESULT         __fastcall get_TableTDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableTDOC(void);
  HRESULT         __fastcall get_TableNUMDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_TableNUMDOC(void);
  HRESULT         __fastcall get_TableSUMDOC(double* Value/*[out,retval]*/);
  double          __fastcall get_TableSUMDOC(void);
  HRESULT         __fastcall get_TableNAMEFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMEFIRM(void);
  HRESULT         __fastcall get_TableNAMESKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMESKLAD(void);
  HRESULT         __fastcall get_TableNAMEKLIENT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMEKLIENT(void);
  HRESULT         __fastcall get_TableNAME_USER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAME_USER(void);
  HRESULT         __fastcall get_TablePOSDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TablePOSDOC(void);
  HRESULT         __fastcall get_TableIDDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDDOC(void);
  HRESULT         __fastcall get_TableIDFIRMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDFIRMDOC(void);
  HRESULT         __fastcall get_TableIDSKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDSKLDOC(void);
  HRESULT         __fastcall get_TableIDKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDKLDOC(void);
  HRESULT         __fastcall get_TableIDDOGDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDDOGDOC(void);
  HRESULT         __fastcall get_TableIDUSERDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDUSERDOC(void);
  HRESULT         __fastcall get_TableIDDOCOSNDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDDOCOSNDOC(void);
  HRESULT         __fastcall get_TableIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDBASE_GALLDOC(void);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   BSTR            PosNach = {read = get_PosNach, write = set_PosNach};
  __property   BSTR            PosCon = {read = get_PosCon, write = set_PosCon};
  __property   BSTR            IdDoc = {read = get_IdDoc, write = set_IdDoc};
  __property   BSTR            IdKlient = {read = get_IdKlient, write = set_IdKlient};
  __property   BSTR            IdSklad = {read = get_IdSklad, write = set_IdSklad};
  __property   BSTR            IdFirm = {read = get_IdFirm, write = set_IdFirm};
  __property   BSTR            StringTypeDoc = {read = get_StringTypeDoc, write = set_StringTypeDoc};
  __property   int             OtborVkl = {read = get_OtborVkl, write = set_OtborVkl};
  __property   int             NoCheck = {read = get_NoCheck, write = set_NoCheck};
  __property   int             TableEof = {read = get_TableEof};
  __property   int             TablePRDOC = {read = get_TablePRDOC};
  __property   BSTR            TableTDOC = {read = get_TableTDOC};
  __property   int             TableNUMDOC = {read = get_TableNUMDOC};
  __property   double          TableSUMDOC = {read = get_TableSUMDOC};
  __property   BSTR            TableNAMEFIRM = {read = get_TableNAMEFIRM};
  __property   BSTR            TableNAMESKLAD = {read = get_TableNAMESKLAD};
  __property   BSTR            TableNAMEKLIENT = {read = get_TableNAMEKLIENT};
  __property   BSTR            TableNAME_USER = {read = get_TableNAME_USER};
  __property   BSTR            TablePOSDOC = {read = get_TablePOSDOC};
  __property   BSTR            TableIDDOC = {read = get_TableIDDOC};
  __property   BSTR            TableIDFIRMDOC = {read = get_TableIDFIRMDOC};
  __property   BSTR            TableIDSKLDOC = {read = get_TableIDSKLDOC};
  __property   BSTR            TableIDKLDOC = {read = get_TableIDKLDOC};
  __property   BSTR            TableIDDOGDOC = {read = get_TableIDDOGDOC};
  __property   BSTR            TableIDUSERDOC = {read = get_TableIDUSERDOC};
  __property   BSTR            TableIDDOCOSNDOC = {read = get_TableIDDOCOSNDOC};
  __property   BSTR            TableIDBASE_GALLDOC = {read = get_TableIDBASE_GALLDOC};
};
typedef TCOMIOleDMGurAllDocT<IOleDMGurAllDoc> TCOMIOleDMGurAllDoc;

// *********************************************************************//
// DispIntf:  IOleDMGurAllDoc
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {76C6259A-F143-4E40-9EBE-838B44404770}
// *********************************************************************//
template<class T>
class IOleDMGurAllDocDispT : public TAutoDriver<IOleDMGurAllDoc>
{
public:
  IOleDMGurAllDocDispT(){}

  IOleDMGurAllDocDispT(IOleDMGurAllDoc *pintf)
  {
    TAutoDriver<IOleDMGurAllDoc>::Bind(pintf, false);
  }

  IOleDMGurAllDocDispT(IOleDMGurAllDocPtr pintf)
  {
    TAutoDriver<IOleDMGurAllDoc>::Bind(pintf, true);
  }

  IOleDMGurAllDocDispT& operator=(IOleDMGurAllDoc *pintf)
  {
    TAutoDriver<IOleDMGurAllDoc>::Bind(pintf, false);
    return *this;
  }

  IOleDMGurAllDocDispT& operator=(IOleDMGurAllDocPtr pintf)
  {
    TAutoDriver<IOleDMGurAllDoc>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMGurAllDoc));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMGurAllDoc);
  }

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall get_PosNach(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PosNach(void);
  HRESULT         __fastcall set_PosNach(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_PosCon(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PosCon(void);
  HRESULT         __fastcall set_PosCon(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdDoc(void);
  HRESULT         __fastcall set_IdDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdKlient(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdKlient(void);
  HRESULT         __fastcall set_IdKlient(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdSklad(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdSklad(void);
  HRESULT         __fastcall set_IdSklad(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_IdFirm(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IdFirm(void);
  HRESULT         __fastcall set_IdFirm(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_StringTypeDoc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_StringTypeDoc(void);
  HRESULT         __fastcall set_StringTypeDoc(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_OtborVkl(int* Value/*[out,retval]*/);
  int             __fastcall get_OtborVkl(void);
  HRESULT         __fastcall set_OtborVkl(int Value/*[in]*/);
  HRESULT         __fastcall get_NoCheck(int* Value/*[out,retval]*/);
  int             __fastcall get_NoCheck(void);
  HRESULT         __fastcall set_NoCheck(int Value/*[in]*/);
  HRESULT         __fastcall OpenTable();
  HRESULT         __fastcall UpdateTable();
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall get_TablePRDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_TablePRDOC(void);
  HRESULT         __fastcall get_TableTDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableTDOC(void);
  HRESULT         __fastcall get_TableNUMDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_TableNUMDOC(void);
  HRESULT         __fastcall get_TableSUMDOC(double* Value/*[out,retval]*/);
  double          __fastcall get_TableSUMDOC(void);
  HRESULT         __fastcall get_TableNAMEFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMEFIRM(void);
  HRESULT         __fastcall get_TableNAMESKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMESKLAD(void);
  HRESULT         __fastcall get_TableNAMEKLIENT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMEKLIENT(void);
  HRESULT         __fastcall get_TableNAME_USER(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAME_USER(void);
  HRESULT         __fastcall get_TablePOSDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TablePOSDOC(void);
  HRESULT         __fastcall get_TableIDDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDDOC(void);
  HRESULT         __fastcall get_TableIDFIRMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDFIRMDOC(void);
  HRESULT         __fastcall get_TableIDSKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDSKLDOC(void);
  HRESULT         __fastcall get_TableIDKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDKLDOC(void);
  HRESULT         __fastcall get_TableIDDOGDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDDOGDOC(void);
  HRESULT         __fastcall get_TableIDUSERDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDUSERDOC(void);
  HRESULT         __fastcall get_TableIDDOCOSNDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDDOCOSNDOC(void);
  HRESULT         __fastcall get_TableIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDBASE_GALLDOC(void);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   BSTR            PosNach = {read = get_PosNach, write = set_PosNach};
  __property   BSTR            PosCon = {read = get_PosCon, write = set_PosCon};
  __property   BSTR            IdDoc = {read = get_IdDoc, write = set_IdDoc};
  __property   BSTR            IdKlient = {read = get_IdKlient, write = set_IdKlient};
  __property   BSTR            IdSklad = {read = get_IdSklad, write = set_IdSklad};
  __property   BSTR            IdFirm = {read = get_IdFirm, write = set_IdFirm};
  __property   BSTR            StringTypeDoc = {read = get_StringTypeDoc, write = set_StringTypeDoc};
  __property   int             OtborVkl = {read = get_OtborVkl, write = set_OtborVkl};
  __property   int             NoCheck = {read = get_NoCheck, write = set_NoCheck};
  __property   int             TableEof = {read = get_TableEof};
  __property   int             TablePRDOC = {read = get_TablePRDOC};
  __property   BSTR            TableTDOC = {read = get_TableTDOC};
  __property   int             TableNUMDOC = {read = get_TableNUMDOC};
  __property   double          TableSUMDOC = {read = get_TableSUMDOC};
  __property   BSTR            TableNAMEFIRM = {read = get_TableNAMEFIRM};
  __property   BSTR            TableNAMESKLAD = {read = get_TableNAMESKLAD};
  __property   BSTR            TableNAMEKLIENT = {read = get_TableNAMEKLIENT};
  __property   BSTR            TableNAME_USER = {read = get_TableNAME_USER};
  __property   BSTR            TablePOSDOC = {read = get_TablePOSDOC};
  __property   BSTR            TableIDDOC = {read = get_TableIDDOC};
  __property   BSTR            TableIDFIRMDOC = {read = get_TableIDFIRMDOC};
  __property   BSTR            TableIDSKLDOC = {read = get_TableIDSKLDOC};
  __property   BSTR            TableIDKLDOC = {read = get_TableIDKLDOC};
  __property   BSTR            TableIDDOGDOC = {read = get_TableIDDOGDOC};
  __property   BSTR            TableIDUSERDOC = {read = get_TableIDUSERDOC};
  __property   BSTR            TableIDDOCOSNDOC = {read = get_TableIDDOCOSNDOC};
  __property   BSTR            TableIDBASE_GALLDOC = {read = get_TableIDBASE_GALLDOC};
};
typedef IOleDMGurAllDocDispT<IOleDMGurAllDoc> IOleDMGurAllDocDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprSklad
// Interface: IOleDMSprSklad
// *********************************************************************//
template <class T /* IOleDMSprSklad */ >
class TCOMIOleDMSprSkladT : public TComInterface<IOleDMSprSklad>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMSprSkladT() {}
  TCOMIOleDMSprSkladT(IOleDMSprSklad *intf, bool addRef = false) : TComInterface<IOleDMSprSklad>(intf, addRef) {}
  TCOMIOleDMSprSkladT(const TCOMIOleDMSprSkladT& src) : TComInterface<IOleDMSprSklad>(src) {}
  TCOMIOleDMSprSkladT& operator=(const TCOMIOleDMSprSkladT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall OpenTable(void);
  HRESULT         __fastcall OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall OpenElement(BSTR id/*[in]*/);
  HRESULT         __fastcall NewElement(void);
  HRESULT         __fastcall SaveElement(void);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR id/*[in]*/);
  HRESULT         __fastcall DeleteElement(BSTR id/*[in]*/);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall get_TableNAMESKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMESKLAD(void);
  HRESULT         __fastcall get_TableMOLSKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableMOLSKLAD(void);
  HRESULT         __fastcall get_TableADRSKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableADRSKLAD(void);
  HRESULT         __fastcall get_TableTSklad(int* Value/*[out,retval]*/);
  int             __fastcall get_TableTSklad(void);
  HRESULT         __fastcall get_TableIDSKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDSKLAD(void);
  HRESULT         __fastcall get_TableGID_SSKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableGID_SSKLAD(void);
  HRESULT         __fastcall get_ElementNAMESKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementNAMESKLAD(void);
  HRESULT         __fastcall set_ElementNAMESKLAD(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementMOLSKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementMOLSKLAD(void);
  HRESULT         __fastcall set_ElementMOLSKLAD(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementADRSKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementADRSKLAD(void);
  HRESULT         __fastcall set_ElementADRSKLAD(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementTSKLAD(int* Value/*[out,retval]*/);
  int             __fastcall get_ElementTSKLAD(void);
  HRESULT         __fastcall set_ElementTSKLAD(int Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDSKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDSKLAD(void);
  HRESULT         __fastcall set_ElementIDSKLAD(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementGID_SSKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementGID_SSKLAD(void);
  HRESULT         __fastcall set_ElementGID_SSKLAD(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableNAMESKLAD = {read = get_TableNAMESKLAD};
  __property   BSTR            TableMOLSKLAD = {read = get_TableMOLSKLAD};
  __property   BSTR            TableADRSKLAD = {read = get_TableADRSKLAD};
  __property   int             TableTSklad = {read = get_TableTSklad};
  __property   BSTR            TableIDSKLAD = {read = get_TableIDSKLAD};
  __property   BSTR            TableGID_SSKLAD = {read = get_TableGID_SSKLAD};
  __property   BSTR            ElementNAMESKLAD = {read = get_ElementNAMESKLAD, write = set_ElementNAMESKLAD};
  __property   BSTR            ElementMOLSKLAD = {read = get_ElementMOLSKLAD, write = set_ElementMOLSKLAD};
  __property   BSTR            ElementADRSKLAD = {read = get_ElementADRSKLAD, write = set_ElementADRSKLAD};
  __property   int             ElementTSKLAD = {read = get_ElementTSKLAD, write = set_ElementTSKLAD};
  __property   BSTR            ElementIDSKLAD = {read = get_ElementIDSKLAD, write = set_ElementIDSKLAD};
  __property   BSTR            ElementGID_SSKLAD = {read = get_ElementGID_SSKLAD, write = set_ElementGID_SSKLAD};
};
typedef TCOMIOleDMSprSkladT<IOleDMSprSklad> TCOMIOleDMSprSklad;

// *********************************************************************//
// DispIntf:  IOleDMSprSklad
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1094236B-2344-47A0-8EF7-C36F82B71B48}
// *********************************************************************//
template<class T>
class IOleDMSprSkladDispT : public TAutoDriver<IOleDMSprSklad>
{
public:
  IOleDMSprSkladDispT(){}

  IOleDMSprSkladDispT(IOleDMSprSklad *pintf)
  {
    TAutoDriver<IOleDMSprSklad>::Bind(pintf, false);
  }

  IOleDMSprSkladDispT(IOleDMSprSkladPtr pintf)
  {
    TAutoDriver<IOleDMSprSklad>::Bind(pintf, true);
  }

  IOleDMSprSkladDispT& operator=(IOleDMSprSklad *pintf)
  {
    TAutoDriver<IOleDMSprSklad>::Bind(pintf, false);
    return *this;
  }

  IOleDMSprSkladDispT& operator=(IOleDMSprSkladPtr pintf)
  {
    TAutoDriver<IOleDMSprSklad>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMSprSklad));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMSprSklad);
  }

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall OpenTable();
  HRESULT         __fastcall OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall OpenElement(BSTR id/*[in]*/);
  HRESULT         __fastcall NewElement();
  HRESULT         __fastcall SaveElement();
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR id/*[in]*/);
  HRESULT         __fastcall DeleteElement(BSTR id/*[in]*/);
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall get_TableNAMESKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMESKLAD(void);
  HRESULT         __fastcall get_TableMOLSKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableMOLSKLAD(void);
  HRESULT         __fastcall get_TableADRSKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableADRSKLAD(void);
  HRESULT         __fastcall get_TableTSklad(int* Value/*[out,retval]*/);
  int             __fastcall get_TableTSklad(void);
  HRESULT         __fastcall get_TableIDSKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDSKLAD(void);
  HRESULT         __fastcall get_TableGID_SSKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableGID_SSKLAD(void);
  HRESULT         __fastcall get_ElementNAMESKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementNAMESKLAD(void);
  HRESULT         __fastcall set_ElementNAMESKLAD(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementMOLSKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementMOLSKLAD(void);
  HRESULT         __fastcall set_ElementMOLSKLAD(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementADRSKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementADRSKLAD(void);
  HRESULT         __fastcall set_ElementADRSKLAD(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementTSKLAD(int* Value/*[out,retval]*/);
  int             __fastcall get_ElementTSKLAD(void);
  HRESULT         __fastcall set_ElementTSKLAD(int Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDSKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDSKLAD(void);
  HRESULT         __fastcall set_ElementIDSKLAD(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementGID_SSKLAD(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementGID_SSKLAD(void);
  HRESULT         __fastcall set_ElementGID_SSKLAD(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableNAMESKLAD = {read = get_TableNAMESKLAD};
  __property   BSTR            TableMOLSKLAD = {read = get_TableMOLSKLAD};
  __property   BSTR            TableADRSKLAD = {read = get_TableADRSKLAD};
  __property   int             TableTSklad = {read = get_TableTSklad};
  __property   BSTR            TableIDSKLAD = {read = get_TableIDSKLAD};
  __property   BSTR            TableGID_SSKLAD = {read = get_TableGID_SSKLAD};
  __property   BSTR            ElementNAMESKLAD = {read = get_ElementNAMESKLAD, write = set_ElementNAMESKLAD};
  __property   BSTR            ElementMOLSKLAD = {read = get_ElementMOLSKLAD, write = set_ElementMOLSKLAD};
  __property   BSTR            ElementADRSKLAD = {read = get_ElementADRSKLAD, write = set_ElementADRSKLAD};
  __property   int             ElementTSKLAD = {read = get_ElementTSKLAD, write = set_ElementTSKLAD};
  __property   BSTR            ElementIDSKLAD = {read = get_ElementIDSKLAD, write = set_ElementIDSKLAD};
  __property   BSTR            ElementGID_SSKLAD = {read = get_ElementGID_SSKLAD, write = set_ElementGID_SSKLAD};
};
typedef IOleDMSprSkladDispT<IOleDMSprSklad> IOleDMSprSkladDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprFirm
// Interface: IOleDMSprFirm
// *********************************************************************//
template <class T /* IOleDMSprFirm */ >
class TCOMIOleDMSprFirmT : public TComInterface<IOleDMSprFirm>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMSprFirmT() {}
  TCOMIOleDMSprFirmT(IOleDMSprFirm *intf, bool addRef = false) : TComInterface<IOleDMSprFirm>(intf, addRef) {}
  TCOMIOleDMSprFirmT(const TCOMIOleDMSprFirmT& src) : TComInterface<IOleDMSprFirm>(src) {}
  TCOMIOleDMSprFirmT& operator=(const TCOMIOleDMSprFirmT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall OpenTable(void);
  HRESULT         __fastcall OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall OpenElement(BSTR id/*[in]*/);
  HRESULT         __fastcall NewElement(void);
  HRESULT         __fastcall SaveElement(int* result/*[out,retval]*/);
  int             __fastcall SaveElement(void);
  HRESULT         __fastcall DeleteElement(BSTR id/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR id/*[in]*/);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall get_TableINNFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableINNFIRM(void);
  HRESULT         __fastcall get_TableNAMEFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMEFIRM(void);
  HRESULT         __fastcall get_TableIDFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDFIRM(void);
  HRESULT         __fastcall get_ElementIDFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDFIRM(void);
  HRESULT         __fastcall set_ElementIDFIRM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementNAMEFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementNAMEFIRM(void);
  HRESULT         __fastcall set_ElementNAMEFIRM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementINNFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementINNFIRM(void);
  HRESULT         __fastcall set_ElementINNFIRM(BSTR Value/*[in]*/);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall get_TableGID_SFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableGID_SFIRM(void);
  HRESULT         __fastcall get_ElementGID_SFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementGID_SFIRM(void);
  HRESULT         __fastcall set_ElementGID_SFIRM(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   BSTR            TableINNFIRM = {read = get_TableINNFIRM};
  __property   BSTR            TableNAMEFIRM = {read = get_TableNAMEFIRM};
  __property   BSTR            TableIDFIRM = {read = get_TableIDFIRM};
  __property   BSTR            ElementIDFIRM = {read = get_ElementIDFIRM, write = set_ElementIDFIRM};
  __property   BSTR            ElementNAMEFIRM = {read = get_ElementNAMEFIRM, write = set_ElementNAMEFIRM};
  __property   BSTR            ElementINNFIRM = {read = get_ElementINNFIRM, write = set_ElementINNFIRM};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableGID_SFIRM = {read = get_TableGID_SFIRM};
  __property   BSTR            ElementGID_SFIRM = {read = get_ElementGID_SFIRM, write = set_ElementGID_SFIRM};
};
typedef TCOMIOleDMSprFirmT<IOleDMSprFirm> TCOMIOleDMSprFirm;

// *********************************************************************//
// DispIntf:  IOleDMSprFirm
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6537D36E-E877-40F4-8BA1-EA8018256082}
// *********************************************************************//
template<class T>
class IOleDMSprFirmDispT : public TAutoDriver<IOleDMSprFirm>
{
public:
  IOleDMSprFirmDispT(){}

  IOleDMSprFirmDispT(IOleDMSprFirm *pintf)
  {
    TAutoDriver<IOleDMSprFirm>::Bind(pintf, false);
  }

  IOleDMSprFirmDispT(IOleDMSprFirmPtr pintf)
  {
    TAutoDriver<IOleDMSprFirm>::Bind(pintf, true);
  }

  IOleDMSprFirmDispT& operator=(IOleDMSprFirm *pintf)
  {
    TAutoDriver<IOleDMSprFirm>::Bind(pintf, false);
    return *this;
  }

  IOleDMSprFirmDispT& operator=(IOleDMSprFirmPtr pintf)
  {
    TAutoDriver<IOleDMSprFirm>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMSprFirm));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMSprFirm);
  }

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall OpenTable();
  HRESULT         __fastcall OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall OpenElement(BSTR id/*[in]*/);
  HRESULT         __fastcall NewElement();
  HRESULT         __fastcall SaveElement(int* result/*[out,retval]*/);
  int             __fastcall SaveElement(void);
  HRESULT         __fastcall DeleteElement(BSTR id/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR id/*[in]*/);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall get_TableINNFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableINNFIRM(void);
  HRESULT         __fastcall get_TableNAMEFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMEFIRM(void);
  HRESULT         __fastcall get_TableIDFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDFIRM(void);
  HRESULT         __fastcall get_ElementIDFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDFIRM(void);
  HRESULT         __fastcall set_ElementIDFIRM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementNAMEFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementNAMEFIRM(void);
  HRESULT         __fastcall set_ElementNAMEFIRM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementINNFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementINNFIRM(void);
  HRESULT         __fastcall set_ElementINNFIRM(BSTR Value/*[in]*/);
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall get_TableGID_SFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableGID_SFIRM(void);
  HRESULT         __fastcall get_ElementGID_SFIRM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementGID_SFIRM(void);
  HRESULT         __fastcall set_ElementGID_SFIRM(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   BSTR            TableINNFIRM = {read = get_TableINNFIRM};
  __property   BSTR            TableNAMEFIRM = {read = get_TableNAMEFIRM};
  __property   BSTR            TableIDFIRM = {read = get_TableIDFIRM};
  __property   BSTR            ElementIDFIRM = {read = get_ElementIDFIRM, write = set_ElementIDFIRM};
  __property   BSTR            ElementNAMEFIRM = {read = get_ElementNAMEFIRM, write = set_ElementNAMEFIRM};
  __property   BSTR            ElementINNFIRM = {read = get_ElementINNFIRM, write = set_ElementINNFIRM};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableGID_SFIRM = {read = get_TableGID_SFIRM};
  __property   BSTR            ElementGID_SFIRM = {read = get_ElementGID_SFIRM, write = set_ElementGID_SFIRM};
};
typedef IOleDMSprFirmDispT<IOleDMSprFirm> IOleDMSprFirmDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprInfBase
// Interface: IOleDMSprInfBase
// *********************************************************************//
template <class T /* IOleDMSprInfBase */ >
class TCOMIOleDMSprInfBaseT : public TComInterface<IOleDMSprInfBase>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMSprInfBaseT() {}
  TCOMIOleDMSprInfBaseT(IOleDMSprInfBase *intf, bool addRef = false) : TComInterface<IOleDMSprInfBase>(intf, addRef) {}
  TCOMIOleDMSprInfBaseT(const TCOMIOleDMSprInfBaseT& src) : TComInterface<IOleDMSprInfBase>(src) {}
  TCOMIOleDMSprInfBaseT& operator=(const TCOMIOleDMSprInfBaseT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall OpenTable(void);
  HRESULT         __fastcall OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall OpenElement(BSTR id/*[in]*/);
  HRESULT         __fastcall NewElement(void);
  HRESULT         __fastcall SaveElement(int* result/*[out,retval]*/);
  int             __fastcall SaveElement(void);
  HRESULT         __fastcall DeleteElement(BSTR id/*[in]*/);
  HRESULT         __fastcall GetIdPoName(BSTR name/*[in]*/, BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdPoName(BSTR name/*[in]*/);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall get_TableNAME_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAME_SINFBASE_OBMEN(void);
  HRESULT         __fastcall get_TableID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableID_SINFBASE_OBMEN(void);
  HRESULT         __fastcall get_TableGID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableGID_SINFBASE_OBMEN(void);
  HRESULT         __fastcall get_ElementNAME_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementNAME_SINFBASE_OBMEN(void);
  HRESULT         __fastcall set_ElementNAME_SINFBASE_OBMEN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementID_SINFBASE_OBMEN(void);
  HRESULT         __fastcall set_ElementID_SINFBASE_OBMEN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementGID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementGID_SINFBASE_OBMEN(void);
  HRESULT         __fastcall set_ElementGID_SINFBASE_OBMEN(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableNAME_SINFBASE_OBMEN = {read = get_TableNAME_SINFBASE_OBMEN};
  __property   BSTR            TableID_SINFBASE_OBMEN = {read = get_TableID_SINFBASE_OBMEN};
  __property   BSTR            TableGID_SINFBASE_OBMEN = {read = get_TableGID_SINFBASE_OBMEN};
  __property   BSTR            ElementNAME_SINFBASE_OBMEN = {read = get_ElementNAME_SINFBASE_OBMEN, write = set_ElementNAME_SINFBASE_OBMEN};
  __property   BSTR            ElementID_SINFBASE_OBMEN = {read = get_ElementID_SINFBASE_OBMEN, write = set_ElementID_SINFBASE_OBMEN};
  __property   BSTR            ElementGID_SINFBASE_OBMEN = {read = get_ElementGID_SINFBASE_OBMEN, write = set_ElementGID_SINFBASE_OBMEN};
};
typedef TCOMIOleDMSprInfBaseT<IOleDMSprInfBase> TCOMIOleDMSprInfBase;

// *********************************************************************//
// DispIntf:  IOleDMSprInfBase
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1C1C010E-C0C9-4871-BC0E-7A93E2CB6AD9}
// *********************************************************************//
template<class T>
class IOleDMSprInfBaseDispT : public TAutoDriver<IOleDMSprInfBase>
{
public:
  IOleDMSprInfBaseDispT(){}

  IOleDMSprInfBaseDispT(IOleDMSprInfBase *pintf)
  {
    TAutoDriver<IOleDMSprInfBase>::Bind(pintf, false);
  }

  IOleDMSprInfBaseDispT(IOleDMSprInfBasePtr pintf)
  {
    TAutoDriver<IOleDMSprInfBase>::Bind(pintf, true);
  }

  IOleDMSprInfBaseDispT& operator=(IOleDMSprInfBase *pintf)
  {
    TAutoDriver<IOleDMSprInfBase>::Bind(pintf, false);
    return *this;
  }

  IOleDMSprInfBaseDispT& operator=(IOleDMSprInfBasePtr pintf)
  {
    TAutoDriver<IOleDMSprInfBase>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMSprInfBase));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMSprInfBase);
  }

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall OpenTable();
  HRESULT         __fastcall OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall OpenElement(BSTR id/*[in]*/);
  HRESULT         __fastcall NewElement();
  HRESULT         __fastcall SaveElement(int* result/*[out,retval]*/);
  int             __fastcall SaveElement(void);
  HRESULT         __fastcall DeleteElement(BSTR id/*[in]*/);
  HRESULT         __fastcall GetIdPoName(BSTR name/*[in]*/, BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdPoName(BSTR name/*[in]*/);
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall get_TableNAME_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAME_SINFBASE_OBMEN(void);
  HRESULT         __fastcall get_TableID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableID_SINFBASE_OBMEN(void);
  HRESULT         __fastcall get_TableGID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableGID_SINFBASE_OBMEN(void);
  HRESULT         __fastcall get_ElementNAME_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementNAME_SINFBASE_OBMEN(void);
  HRESULT         __fastcall set_ElementNAME_SINFBASE_OBMEN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementID_SINFBASE_OBMEN(void);
  HRESULT         __fastcall set_ElementID_SINFBASE_OBMEN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementGID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementGID_SINFBASE_OBMEN(void);
  HRESULT         __fastcall set_ElementGID_SINFBASE_OBMEN(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableNAME_SINFBASE_OBMEN = {read = get_TableNAME_SINFBASE_OBMEN};
  __property   BSTR            TableID_SINFBASE_OBMEN = {read = get_TableID_SINFBASE_OBMEN};
  __property   BSTR            TableGID_SINFBASE_OBMEN = {read = get_TableGID_SINFBASE_OBMEN};
  __property   BSTR            ElementNAME_SINFBASE_OBMEN = {read = get_ElementNAME_SINFBASE_OBMEN, write = set_ElementNAME_SINFBASE_OBMEN};
  __property   BSTR            ElementID_SINFBASE_OBMEN = {read = get_ElementID_SINFBASE_OBMEN, write = set_ElementID_SINFBASE_OBMEN};
  __property   BSTR            ElementGID_SINFBASE_OBMEN = {read = get_ElementGID_SINFBASE_OBMEN, write = set_ElementGID_SINFBASE_OBMEN};
};
typedef IOleDMSprInfBaseDispT<IOleDMSprInfBase> IOleDMSprInfBaseDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprEd
// Interface: IOleDMSprEd
// *********************************************************************//
template <class T /* IOleDMSprEd */ >
class TCOMIOleDMSprEdT : public TComInterface<IOleDMSprEd>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMSprEdT() {}
  TCOMIOleDMSprEdT(IOleDMSprEd *intf, bool addRef = false) : TComInterface<IOleDMSprEd>(intf, addRef) {}
  TCOMIOleDMSprEdT(const TCOMIOleDMSprEdT& src) : TComInterface<IOleDMSprEd>(src) {}
  TCOMIOleDMSprEdT& operator=(const TCOMIOleDMSprEdT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall OpenTable(BSTR id_nom/*[in]*/);
  HRESULT         __fastcall NewElement(BSTR id_nom/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall NewElement(BSTR id_nom/*[in]*/);
  HRESULT         __fastcall SaveElement(int* result/*[out,retval]*/);
  int             __fastcall SaveElement(void);
  HRESULT         __fastcall FindEdPoSh(BSTR sh/*[in]*/, BSTR* result/*[out,retval]*/);
  BSTR            __fastcall FindEdPoSh(BSTR sh/*[in]*/);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR id/*[in]*/);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall get_TableNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMEED(void);
  HRESULT         __fastcall get_TableKFED(double* Value/*[out,retval]*/);
  double          __fastcall get_TableKFED(void);
  HRESULT         __fastcall get_TableTSHED(int* Value/*[out,retval]*/);
  int             __fastcall get_TableTSHED(void);
  HRESULT         __fastcall get_TableSHED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableSHED(void);
  HRESULT         __fastcall get_TableIDED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDED(void);
  HRESULT         __fastcall get_TableIDNOMED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDNOMED(void);
  HRESULT         __fastcall get_TableIDOKEIED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDOKEIED(void);
  HRESULT         __fastcall get_TableGID_SED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableGID_SED(void);
  HRESULT         __fastcall get_TableCODE_SED(int* Value/*[out,retval]*/);
  int             __fastcall get_TableCODE_SED(void);
  HRESULT         __fastcall get_ElementNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementNAMEED(void);
  HRESULT         __fastcall set_ElementNAMEED(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementKFED(double* Value/*[out,retval]*/);
  double          __fastcall get_ElementKFED(void);
  HRESULT         __fastcall set_ElementKFED(double Value/*[in]*/);
  HRESULT         __fastcall get_ElementTSHED(int* Value/*[out,retval]*/);
  int             __fastcall get_ElementTSHED(void);
  HRESULT         __fastcall set_ElementTSHED(int Value/*[in]*/);
  HRESULT         __fastcall get_ElementSHED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementSHED(void);
  HRESULT         __fastcall set_ElementSHED(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDED(void);
  HRESULT         __fastcall set_ElementIDED(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDOKEIED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDOKEIED(void);
  HRESULT         __fastcall set_ElementIDOKEIED(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementGID_SED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementGID_SED(void);
  HRESULT         __fastcall set_ElementGID_SED(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementCODE_SED(int* Value/*[out,retval]*/);
  int             __fastcall get_ElementCODE_SED(void);
  HRESULT         __fastcall set_ElementCODE_SED(int Value/*[in]*/);
  HRESULT         __fastcall get_ElementNAMEOKEI(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementNAMEOKEI(void);
  HRESULT         __fastcall set_ElementNAMEOKEI(BSTR Value/*[in]*/);
  HRESULT         __fastcall OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall OpenElement(BSTR id/*[in]*/);
  HRESULT         __fastcall DeleteElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall DeleteElement(BSTR id/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableNAMEED = {read = get_TableNAMEED};
  __property   double          TableKFED = {read = get_TableKFED};
  __property   int             TableTSHED = {read = get_TableTSHED};
  __property   BSTR            TableSHED = {read = get_TableSHED};
  __property   BSTR            TableIDED = {read = get_TableIDED};
  __property   BSTR            TableIDNOMED = {read = get_TableIDNOMED};
  __property   BSTR            TableIDOKEIED = {read = get_TableIDOKEIED};
  __property   BSTR            TableGID_SED = {read = get_TableGID_SED};
  __property   int             TableCODE_SED = {read = get_TableCODE_SED};
  __property   BSTR            ElementNAMEED = {read = get_ElementNAMEED, write = set_ElementNAMEED};
  __property   double          ElementKFED = {read = get_ElementKFED, write = set_ElementKFED};
  __property   int             ElementTSHED = {read = get_ElementTSHED, write = set_ElementTSHED};
  __property   BSTR            ElementSHED = {read = get_ElementSHED, write = set_ElementSHED};
  __property   BSTR            ElementIDED = {read = get_ElementIDED, write = set_ElementIDED};
  __property   BSTR            ElementIDOKEIED = {read = get_ElementIDOKEIED, write = set_ElementIDOKEIED};
  __property   BSTR            ElementGID_SED = {read = get_ElementGID_SED, write = set_ElementGID_SED};
  __property   int             ElementCODE_SED = {read = get_ElementCODE_SED, write = set_ElementCODE_SED};
  __property   BSTR            ElementNAMEOKEI = {read = get_ElementNAMEOKEI, write = set_ElementNAMEOKEI};
};
typedef TCOMIOleDMSprEdT<IOleDMSprEd> TCOMIOleDMSprEd;

// *********************************************************************//
// DispIntf:  IOleDMSprEd
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D28F8AE3-3B91-49E0-BE35-1133F9362791}
// *********************************************************************//
template<class T>
class IOleDMSprEdDispT : public TAutoDriver<IOleDMSprEd>
{
public:
  IOleDMSprEdDispT(){}

  IOleDMSprEdDispT(IOleDMSprEd *pintf)
  {
    TAutoDriver<IOleDMSprEd>::Bind(pintf, false);
  }

  IOleDMSprEdDispT(IOleDMSprEdPtr pintf)
  {
    TAutoDriver<IOleDMSprEd>::Bind(pintf, true);
  }

  IOleDMSprEdDispT& operator=(IOleDMSprEd *pintf)
  {
    TAutoDriver<IOleDMSprEd>::Bind(pintf, false);
    return *this;
  }

  IOleDMSprEdDispT& operator=(IOleDMSprEdPtr pintf)
  {
    TAutoDriver<IOleDMSprEd>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMSprEd));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMSprEd);
  }

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall OpenTable(BSTR id_nom/*[in]*/);
  HRESULT         __fastcall NewElement(BSTR id_nom/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall NewElement(BSTR id_nom/*[in]*/);
  HRESULT         __fastcall SaveElement(int* result/*[out,retval]*/);
  int             __fastcall SaveElement(void);
  HRESULT         __fastcall FindEdPoSh(BSTR sh/*[in]*/, BSTR* result/*[out,retval]*/);
  BSTR            __fastcall FindEdPoSh(BSTR sh/*[in]*/);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR id/*[in]*/);
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall get_TableNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMEED(void);
  HRESULT         __fastcall get_TableKFED(double* Value/*[out,retval]*/);
  double          __fastcall get_TableKFED(void);
  HRESULT         __fastcall get_TableTSHED(int* Value/*[out,retval]*/);
  int             __fastcall get_TableTSHED(void);
  HRESULT         __fastcall get_TableSHED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableSHED(void);
  HRESULT         __fastcall get_TableIDED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDED(void);
  HRESULT         __fastcall get_TableIDNOMED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDNOMED(void);
  HRESULT         __fastcall get_TableIDOKEIED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDOKEIED(void);
  HRESULT         __fastcall get_TableGID_SED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableGID_SED(void);
  HRESULT         __fastcall get_TableCODE_SED(int* Value/*[out,retval]*/);
  int             __fastcall get_TableCODE_SED(void);
  HRESULT         __fastcall get_ElementNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementNAMEED(void);
  HRESULT         __fastcall set_ElementNAMEED(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementKFED(double* Value/*[out,retval]*/);
  double          __fastcall get_ElementKFED(void);
  HRESULT         __fastcall set_ElementKFED(double Value/*[in]*/);
  HRESULT         __fastcall get_ElementTSHED(int* Value/*[out,retval]*/);
  int             __fastcall get_ElementTSHED(void);
  HRESULT         __fastcall set_ElementTSHED(int Value/*[in]*/);
  HRESULT         __fastcall get_ElementSHED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementSHED(void);
  HRESULT         __fastcall set_ElementSHED(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDED(void);
  HRESULT         __fastcall set_ElementIDED(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDOKEIED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDOKEIED(void);
  HRESULT         __fastcall set_ElementIDOKEIED(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementGID_SED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementGID_SED(void);
  HRESULT         __fastcall set_ElementGID_SED(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementCODE_SED(int* Value/*[out,retval]*/);
  int             __fastcall get_ElementCODE_SED(void);
  HRESULT         __fastcall set_ElementCODE_SED(int Value/*[in]*/);
  HRESULT         __fastcall get_ElementNAMEOKEI(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementNAMEOKEI(void);
  HRESULT         __fastcall set_ElementNAMEOKEI(BSTR Value/*[in]*/);
  HRESULT         __fastcall OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall OpenElement(BSTR id/*[in]*/);
  HRESULT         __fastcall DeleteElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall DeleteElement(BSTR id/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableNAMEED = {read = get_TableNAMEED};
  __property   double          TableKFED = {read = get_TableKFED};
  __property   int             TableTSHED = {read = get_TableTSHED};
  __property   BSTR            TableSHED = {read = get_TableSHED};
  __property   BSTR            TableIDED = {read = get_TableIDED};
  __property   BSTR            TableIDNOMED = {read = get_TableIDNOMED};
  __property   BSTR            TableIDOKEIED = {read = get_TableIDOKEIED};
  __property   BSTR            TableGID_SED = {read = get_TableGID_SED};
  __property   int             TableCODE_SED = {read = get_TableCODE_SED};
  __property   BSTR            ElementNAMEED = {read = get_ElementNAMEED, write = set_ElementNAMEED};
  __property   double          ElementKFED = {read = get_ElementKFED, write = set_ElementKFED};
  __property   int             ElementTSHED = {read = get_ElementTSHED, write = set_ElementTSHED};
  __property   BSTR            ElementSHED = {read = get_ElementSHED, write = set_ElementSHED};
  __property   BSTR            ElementIDED = {read = get_ElementIDED, write = set_ElementIDED};
  __property   BSTR            ElementIDOKEIED = {read = get_ElementIDOKEIED, write = set_ElementIDOKEIED};
  __property   BSTR            ElementGID_SED = {read = get_ElementGID_SED, write = set_ElementGID_SED};
  __property   int             ElementCODE_SED = {read = get_ElementCODE_SED, write = set_ElementCODE_SED};
  __property   BSTR            ElementNAMEOKEI = {read = get_ElementNAMEOKEI, write = set_ElementNAMEOKEI};
};
typedef IOleDMSprEdDispT<IOleDMSprEd> IOleDMSprEdDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprGrpNom
// Interface: IOleDMSprGrpNom
// *********************************************************************//
template <class T /* IOleDMSprGrpNom */ >
class TCOMIOleDMSprGrpNomT : public TComInterface<IOleDMSprGrpNom>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMSprGrpNomT() {}
  TCOMIOleDMSprGrpNomT(IOleDMSprGrpNom *intf, bool addRef = false) : TComInterface<IOleDMSprGrpNom>(intf, addRef) {}
  TCOMIOleDMSprGrpNomT(const TCOMIOleDMSprGrpNomT& src) : TComInterface<IOleDMSprGrpNom>(src) {}
  TCOMIOleDMSprGrpNomT& operator=(const TCOMIOleDMSprGrpNomT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall NewElement(BSTR id_grp/*[in]*/);
  HRESULT         __fastcall SaveElement(int* result/*[out,retval]*/);
  int             __fastcall SaveElement(void);
  HRESULT         __fastcall OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall OpenElement(BSTR id/*[in]*/);
  HRESULT         __fastcall DeleteElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall DeleteElement(BSTR id/*[in]*/);
  HRESULT         __fastcall OpenTable(void);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR id/*[in]*/);
  HRESULT         __fastcall get_TableIDGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDGN(void);
  HRESULT         __fastcall get_TableIDGRPGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDGRPGN(void);
  HRESULT         __fastcall get_TableNAMEGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMEGN(void);
  HRESULT         __fastcall get_TableGID_SGRPNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableGID_SGRPNOM(void);
  HRESULT         __fastcall get_ElementIDGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDGN(void);
  HRESULT         __fastcall set_ElementIDGN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDGRPGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDGRPGN(void);
  HRESULT         __fastcall set_ElementIDGRPGN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementNAMEGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementNAMEGN(void);
  HRESULT         __fastcall set_ElementNAMEGN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementGID_SGRPNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementGID_SGRPNOM(void);
  HRESULT         __fastcall set_ElementGID_SGRPNOM(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableIDGN = {read = get_TableIDGN};
  __property   BSTR            TableIDGRPGN = {read = get_TableIDGRPGN};
  __property   BSTR            TableNAMEGN = {read = get_TableNAMEGN};
  __property   BSTR            TableGID_SGRPNOM = {read = get_TableGID_SGRPNOM};
  __property   BSTR            ElementIDGN = {read = get_ElementIDGN, write = set_ElementIDGN};
  __property   BSTR            ElementIDGRPGN = {read = get_ElementIDGRPGN, write = set_ElementIDGRPGN};
  __property   BSTR            ElementNAMEGN = {read = get_ElementNAMEGN, write = set_ElementNAMEGN};
  __property   BSTR            ElementGID_SGRPNOM = {read = get_ElementGID_SGRPNOM, write = set_ElementGID_SGRPNOM};
};
typedef TCOMIOleDMSprGrpNomT<IOleDMSprGrpNom> TCOMIOleDMSprGrpNom;

// *********************************************************************//
// DispIntf:  IOleDMSprGrpNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E00B40C2-1DED-4F6C-8D31-FA94C078691E}
// *********************************************************************//
template<class T>
class IOleDMSprGrpNomDispT : public TAutoDriver<IOleDMSprGrpNom>
{
public:
  IOleDMSprGrpNomDispT(){}

  IOleDMSprGrpNomDispT(IOleDMSprGrpNom *pintf)
  {
    TAutoDriver<IOleDMSprGrpNom>::Bind(pintf, false);
  }

  IOleDMSprGrpNomDispT(IOleDMSprGrpNomPtr pintf)
  {
    TAutoDriver<IOleDMSprGrpNom>::Bind(pintf, true);
  }

  IOleDMSprGrpNomDispT& operator=(IOleDMSprGrpNom *pintf)
  {
    TAutoDriver<IOleDMSprGrpNom>::Bind(pintf, false);
    return *this;
  }

  IOleDMSprGrpNomDispT& operator=(IOleDMSprGrpNomPtr pintf)
  {
    TAutoDriver<IOleDMSprGrpNom>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMSprGrpNom));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMSprGrpNom);
  }

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall NewElement(BSTR id_grp/*[in]*/);
  HRESULT         __fastcall SaveElement(int* result/*[out,retval]*/);
  int             __fastcall SaveElement(void);
  HRESULT         __fastcall OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall OpenElement(BSTR id/*[in]*/);
  HRESULT         __fastcall DeleteElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall DeleteElement(BSTR id/*[in]*/);
  HRESULT         __fastcall OpenTable();
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR id/*[in]*/);
  HRESULT         __fastcall get_TableIDGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDGN(void);
  HRESULT         __fastcall get_TableIDGRPGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDGRPGN(void);
  HRESULT         __fastcall get_TableNAMEGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMEGN(void);
  HRESULT         __fastcall get_TableGID_SGRPNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableGID_SGRPNOM(void);
  HRESULT         __fastcall get_ElementIDGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDGN(void);
  HRESULT         __fastcall set_ElementIDGN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDGRPGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDGRPGN(void);
  HRESULT         __fastcall set_ElementIDGRPGN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementNAMEGN(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementNAMEGN(void);
  HRESULT         __fastcall set_ElementNAMEGN(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementGID_SGRPNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementGID_SGRPNOM(void);
  HRESULT         __fastcall set_ElementGID_SGRPNOM(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableIDGN = {read = get_TableIDGN};
  __property   BSTR            TableIDGRPGN = {read = get_TableIDGRPGN};
  __property   BSTR            TableNAMEGN = {read = get_TableNAMEGN};
  __property   BSTR            TableGID_SGRPNOM = {read = get_TableGID_SGRPNOM};
  __property   BSTR            ElementIDGN = {read = get_ElementIDGN, write = set_ElementIDGN};
  __property   BSTR            ElementIDGRPGN = {read = get_ElementIDGRPGN, write = set_ElementIDGRPGN};
  __property   BSTR            ElementNAMEGN = {read = get_ElementNAMEGN, write = set_ElementNAMEGN};
  __property   BSTR            ElementGID_SGRPNOM = {read = get_ElementGID_SGRPNOM, write = set_ElementGID_SGRPNOM};
};
typedef IOleDMSprGrpNomDispT<IOleDMSprGrpNom> IOleDMSprGrpNomDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprNom
// Interface: IOleDMSprNom
// *********************************************************************//
template <class T /* IOleDMSprNom */ >
class TCOMIOleDMSprNomT : public TComInterface<IOleDMSprNom>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMSprNomT() {}
  TCOMIOleDMSprNomT(IOleDMSprNom *intf, bool addRef = false) : TComInterface<IOleDMSprNom>(intf, addRef) {}
  TCOMIOleDMSprNomT(const TCOMIOleDMSprNomT& src) : TComInterface<IOleDMSprNom>(src) {}
  TCOMIOleDMSprNomT& operator=(const TCOMIOleDMSprNomT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall NewElement(BSTR id_grp/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall NewElement(BSTR id_grp/*[in]*/);
  HRESULT         __fastcall SaveElement(int* result/*[out,retval]*/);
  int             __fastcall SaveElement(void);
  HRESULT         __fastcall OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall OpenElement(BSTR id/*[in]*/);
  HRESULT         __fastcall DeleteElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall DeleteElement(BSTR id/*[in]*/);
  HRESULT         __fastcall OpenTable(BSTR id_grp/*[in]*/, int all/*[in]*/);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR id/*[in]*/);
  HRESULT         __fastcall get_TableCODENOM(int* Value/*[out,retval]*/);
  int             __fastcall get_TableCODENOM(void);
  HRESULT         __fastcall get_TableTNOM(int* Value/*[out,retval]*/);
  int             __fastcall get_TableTNOM(void);
  HRESULT         __fastcall get_TableNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMENOM(void);
  HRESULT         __fastcall get_TableNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMEED(void);
  HRESULT         __fastcall get_TableIDNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDNOM(void);
  HRESULT         __fastcall get_TableIDGRPNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDGRPNOM(void);
  HRESULT         __fastcall get_ElementTNOM(int* Value/*[out,retval]*/);
  int             __fastcall get_ElementTNOM(void);
  HRESULT         __fastcall set_ElementTNOM(int Value/*[in]*/);
  HRESULT         __fastcall get_ElementCODENOM(int* Value/*[out,retval]*/);
  int             __fastcall get_ElementCODENOM(void);
  HRESULT         __fastcall set_ElementCODENOM(int Value/*[in]*/);
  HRESULT         __fastcall get_ElementNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementNAMENOM(void);
  HRESULT         __fastcall set_ElementNAMENOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementFNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementFNAMENOM(void);
  HRESULT         __fastcall set_ElementFNAMENOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementKRNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementKRNAMENOM(void);
  HRESULT         __fastcall set_ElementKRNAMENOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementARTNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementARTNOM(void);
  HRESULT         __fastcall set_ElementARTNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementSTNDSNOM(double* Value/*[out,retval]*/);
  double          __fastcall get_ElementSTNDSNOM(void);
  HRESULT         __fastcall set_ElementSTNDSNOM(double Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDBASEDNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDBASEDNOM(void);
  HRESULT         __fastcall set_ElementIDBASEDNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDOSNEDNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDOSNEDNOM(void);
  HRESULT         __fastcall set_ElementIDOSNEDNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDNOM(void);
  HRESULT         __fastcall set_ElementIDNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDGRPNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDGRPNOM(void);
  HRESULT         __fastcall set_ElementIDGRPNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDFIRMNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDFIRMNOM(void);
  HRESULT         __fastcall set_ElementIDFIRMNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDCOUNTRYNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDCOUNTRYNOM(void);
  HRESULT         __fastcall set_ElementIDCOUNTRYNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementGID_SNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementGID_SNOM(void);
  HRESULT         __fastcall set_ElementGID_SNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDVID_SNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDVID_SNOM(void);
  HRESULT         __fastcall set_ElementIDVID_SNOM(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   int             TableCODENOM = {read = get_TableCODENOM};
  __property   int             TableTNOM = {read = get_TableTNOM};
  __property   BSTR            TableNAMENOM = {read = get_TableNAMENOM};
  __property   BSTR            TableNAMEED = {read = get_TableNAMEED};
  __property   BSTR            TableIDNOM = {read = get_TableIDNOM};
  __property   BSTR            TableIDGRPNOM = {read = get_TableIDGRPNOM};
  __property   int             ElementTNOM = {read = get_ElementTNOM, write = set_ElementTNOM};
  __property   int             ElementCODENOM = {read = get_ElementCODENOM, write = set_ElementCODENOM};
  __property   BSTR            ElementNAMENOM = {read = get_ElementNAMENOM, write = set_ElementNAMENOM};
  __property   BSTR            ElementFNAMENOM = {read = get_ElementFNAMENOM, write = set_ElementFNAMENOM};
  __property   BSTR            ElementKRNAMENOM = {read = get_ElementKRNAMENOM, write = set_ElementKRNAMENOM};
  __property   BSTR            ElementARTNOM = {read = get_ElementARTNOM, write = set_ElementARTNOM};
  __property   double          ElementSTNDSNOM = {read = get_ElementSTNDSNOM, write = set_ElementSTNDSNOM};
  __property   BSTR            ElementIDBASEDNOM = {read = get_ElementIDBASEDNOM, write = set_ElementIDBASEDNOM};
  __property   BSTR            ElementIDOSNEDNOM = {read = get_ElementIDOSNEDNOM, write = set_ElementIDOSNEDNOM};
  __property   BSTR            ElementIDNOM = {read = get_ElementIDNOM, write = set_ElementIDNOM};
  __property   BSTR            ElementIDGRPNOM = {read = get_ElementIDGRPNOM, write = set_ElementIDGRPNOM};
  __property   BSTR            ElementIDFIRMNOM = {read = get_ElementIDFIRMNOM, write = set_ElementIDFIRMNOM};
  __property   BSTR            ElementIDCOUNTRYNOM = {read = get_ElementIDCOUNTRYNOM, write = set_ElementIDCOUNTRYNOM};
  __property   BSTR            ElementGID_SNOM = {read = get_ElementGID_SNOM, write = set_ElementGID_SNOM};
  __property   BSTR            ElementIDVID_SNOM = {read = get_ElementIDVID_SNOM, write = set_ElementIDVID_SNOM};
};
typedef TCOMIOleDMSprNomT<IOleDMSprNom> TCOMIOleDMSprNom;

// *********************************************************************//
// DispIntf:  IOleDMSprNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5023B6C6-594F-4337-B907-E71269058E57}
// *********************************************************************//
template<class T>
class IOleDMSprNomDispT : public TAutoDriver<IOleDMSprNom>
{
public:
  IOleDMSprNomDispT(){}

  IOleDMSprNomDispT(IOleDMSprNom *pintf)
  {
    TAutoDriver<IOleDMSprNom>::Bind(pintf, false);
  }

  IOleDMSprNomDispT(IOleDMSprNomPtr pintf)
  {
    TAutoDriver<IOleDMSprNom>::Bind(pintf, true);
  }

  IOleDMSprNomDispT& operator=(IOleDMSprNom *pintf)
  {
    TAutoDriver<IOleDMSprNom>::Bind(pintf, false);
    return *this;
  }

  IOleDMSprNomDispT& operator=(IOleDMSprNomPtr pintf)
  {
    TAutoDriver<IOleDMSprNom>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMSprNom));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMSprNom);
  }

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall NewElement(BSTR id_grp/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall NewElement(BSTR id_grp/*[in]*/);
  HRESULT         __fastcall SaveElement(int* result/*[out,retval]*/);
  int             __fastcall SaveElement(void);
  HRESULT         __fastcall OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall OpenElement(BSTR id/*[in]*/);
  HRESULT         __fastcall DeleteElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall DeleteElement(BSTR id/*[in]*/);
  HRESULT         __fastcall OpenTable(BSTR id_grp/*[in]*/, int all/*[in]*/);
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR id/*[in]*/);
  HRESULT         __fastcall get_TableCODENOM(int* Value/*[out,retval]*/);
  int             __fastcall get_TableCODENOM(void);
  HRESULT         __fastcall get_TableTNOM(int* Value/*[out,retval]*/);
  int             __fastcall get_TableTNOM(void);
  HRESULT         __fastcall get_TableNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMENOM(void);
  HRESULT         __fastcall get_TableNAMEED(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAMEED(void);
  HRESULT         __fastcall get_TableIDNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDNOM(void);
  HRESULT         __fastcall get_TableIDGRPNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDGRPNOM(void);
  HRESULT         __fastcall get_ElementTNOM(int* Value/*[out,retval]*/);
  int             __fastcall get_ElementTNOM(void);
  HRESULT         __fastcall set_ElementTNOM(int Value/*[in]*/);
  HRESULT         __fastcall get_ElementCODENOM(int* Value/*[out,retval]*/);
  int             __fastcall get_ElementCODENOM(void);
  HRESULT         __fastcall set_ElementCODENOM(int Value/*[in]*/);
  HRESULT         __fastcall get_ElementNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementNAMENOM(void);
  HRESULT         __fastcall set_ElementNAMENOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementFNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementFNAMENOM(void);
  HRESULT         __fastcall set_ElementFNAMENOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementKRNAMENOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementKRNAMENOM(void);
  HRESULT         __fastcall set_ElementKRNAMENOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementARTNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementARTNOM(void);
  HRESULT         __fastcall set_ElementARTNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementSTNDSNOM(double* Value/*[out,retval]*/);
  double          __fastcall get_ElementSTNDSNOM(void);
  HRESULT         __fastcall set_ElementSTNDSNOM(double Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDBASEDNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDBASEDNOM(void);
  HRESULT         __fastcall set_ElementIDBASEDNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDOSNEDNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDOSNEDNOM(void);
  HRESULT         __fastcall set_ElementIDOSNEDNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDNOM(void);
  HRESULT         __fastcall set_ElementIDNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDGRPNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDGRPNOM(void);
  HRESULT         __fastcall set_ElementIDGRPNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDFIRMNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDFIRMNOM(void);
  HRESULT         __fastcall set_ElementIDFIRMNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDCOUNTRYNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDCOUNTRYNOM(void);
  HRESULT         __fastcall set_ElementIDCOUNTRYNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementGID_SNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementGID_SNOM(void);
  HRESULT         __fastcall set_ElementGID_SNOM(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDVID_SNOM(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDVID_SNOM(void);
  HRESULT         __fastcall set_ElementIDVID_SNOM(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   int             TableCODENOM = {read = get_TableCODENOM};
  __property   int             TableTNOM = {read = get_TableTNOM};
  __property   BSTR            TableNAMENOM = {read = get_TableNAMENOM};
  __property   BSTR            TableNAMEED = {read = get_TableNAMEED};
  __property   BSTR            TableIDNOM = {read = get_TableIDNOM};
  __property   BSTR            TableIDGRPNOM = {read = get_TableIDGRPNOM};
  __property   int             ElementTNOM = {read = get_ElementTNOM, write = set_ElementTNOM};
  __property   int             ElementCODENOM = {read = get_ElementCODENOM, write = set_ElementCODENOM};
  __property   BSTR            ElementNAMENOM = {read = get_ElementNAMENOM, write = set_ElementNAMENOM};
  __property   BSTR            ElementFNAMENOM = {read = get_ElementFNAMENOM, write = set_ElementFNAMENOM};
  __property   BSTR            ElementKRNAMENOM = {read = get_ElementKRNAMENOM, write = set_ElementKRNAMENOM};
  __property   BSTR            ElementARTNOM = {read = get_ElementARTNOM, write = set_ElementARTNOM};
  __property   double          ElementSTNDSNOM = {read = get_ElementSTNDSNOM, write = set_ElementSTNDSNOM};
  __property   BSTR            ElementIDBASEDNOM = {read = get_ElementIDBASEDNOM, write = set_ElementIDBASEDNOM};
  __property   BSTR            ElementIDOSNEDNOM = {read = get_ElementIDOSNEDNOM, write = set_ElementIDOSNEDNOM};
  __property   BSTR            ElementIDNOM = {read = get_ElementIDNOM, write = set_ElementIDNOM};
  __property   BSTR            ElementIDGRPNOM = {read = get_ElementIDGRPNOM, write = set_ElementIDGRPNOM};
  __property   BSTR            ElementIDFIRMNOM = {read = get_ElementIDFIRMNOM, write = set_ElementIDFIRMNOM};
  __property   BSTR            ElementIDCOUNTRYNOM = {read = get_ElementIDCOUNTRYNOM, write = set_ElementIDCOUNTRYNOM};
  __property   BSTR            ElementGID_SNOM = {read = get_ElementGID_SNOM, write = set_ElementGID_SNOM};
  __property   BSTR            ElementIDVID_SNOM = {read = get_ElementIDVID_SNOM, write = set_ElementIDVID_SNOM};
};
typedef IOleDMSprNomDispT<IOleDMSprNom> IOleDMSprNomDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprTypePrice
// Interface: IOleDMSprTypePrice
// *********************************************************************//
template <class T /* IOleDMSprTypePrice */ >
class TCOMIOleDMSprTypePriceT : public TComInterface<IOleDMSprTypePrice>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMSprTypePriceT() {}
  TCOMIOleDMSprTypePriceT(IOleDMSprTypePrice *intf, bool addRef = false) : TComInterface<IOleDMSprTypePrice>(intf, addRef) {}
  TCOMIOleDMSprTypePriceT(const TCOMIOleDMSprTypePriceT& src) : TComInterface<IOleDMSprTypePrice>(src) {}
  TCOMIOleDMSprTypePriceT& operator=(const TCOMIOleDMSprTypePriceT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall NewElement(void);
  HRESULT         __fastcall SaveElement(int* result/*[out,retval]*/);
  int             __fastcall SaveElement(void);
  HRESULT         __fastcall OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall OpenElement(BSTR id/*[in]*/);
  HRESULT         __fastcall DeleteElement(BSTR id/*[in]*/);
  HRESULT         __fastcall OpenTable(void);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR id/*[in]*/);
  HRESULT         __fastcall get_TableNAME_TPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAME_TPRICE(void);
  HRESULT         __fastcall get_TableID_TPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableID_TPRICE(void);
  HRESULT         __fastcall get_TableGID_STPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableGID_STPRICE(void);
  HRESULT         __fastcall get_ElementNAME_TPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementNAME_TPRICE(void);
  HRESULT         __fastcall set_ElementNAME_TPRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementID_TPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementID_TPRICE(void);
  HRESULT         __fastcall set_ElementID_TPRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementGID_STPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementGID_STPRICE(void);
  HRESULT         __fastcall set_ElementGID_STPRICE(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableNAME_TPRICE = {read = get_TableNAME_TPRICE};
  __property   BSTR            TableID_TPRICE = {read = get_TableID_TPRICE};
  __property   BSTR            TableGID_STPRICE = {read = get_TableGID_STPRICE};
  __property   BSTR            ElementNAME_TPRICE = {read = get_ElementNAME_TPRICE, write = set_ElementNAME_TPRICE};
  __property   BSTR            ElementID_TPRICE = {read = get_ElementID_TPRICE, write = set_ElementID_TPRICE};
  __property   BSTR            ElementGID_STPRICE = {read = get_ElementGID_STPRICE, write = set_ElementGID_STPRICE};
};
typedef TCOMIOleDMSprTypePriceT<IOleDMSprTypePrice> TCOMIOleDMSprTypePrice;

// *********************************************************************//
// DispIntf:  IOleDMSprTypePrice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DA8FD0DF-AD0F-411A-B455-D9E2EC4DF13D}
// *********************************************************************//
template<class T>
class IOleDMSprTypePriceDispT : public TAutoDriver<IOleDMSprTypePrice>
{
public:
  IOleDMSprTypePriceDispT(){}

  IOleDMSprTypePriceDispT(IOleDMSprTypePrice *pintf)
  {
    TAutoDriver<IOleDMSprTypePrice>::Bind(pintf, false);
  }

  IOleDMSprTypePriceDispT(IOleDMSprTypePricePtr pintf)
  {
    TAutoDriver<IOleDMSprTypePrice>::Bind(pintf, true);
  }

  IOleDMSprTypePriceDispT& operator=(IOleDMSprTypePrice *pintf)
  {
    TAutoDriver<IOleDMSprTypePrice>::Bind(pintf, false);
    return *this;
  }

  IOleDMSprTypePriceDispT& operator=(IOleDMSprTypePricePtr pintf)
  {
    TAutoDriver<IOleDMSprTypePrice>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMSprTypePrice));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMSprTypePrice);
  }

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall NewElement();
  HRESULT         __fastcall SaveElement(int* result/*[out,retval]*/);
  int             __fastcall SaveElement(void);
  HRESULT         __fastcall OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall OpenElement(BSTR id/*[in]*/);
  HRESULT         __fastcall DeleteElement(BSTR id/*[in]*/);
  HRESULT         __fastcall OpenTable();
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR id/*[in]*/);
  HRESULT         __fastcall get_TableNAME_TPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAME_TPRICE(void);
  HRESULT         __fastcall get_TableID_TPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableID_TPRICE(void);
  HRESULT         __fastcall get_TableGID_STPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableGID_STPRICE(void);
  HRESULT         __fastcall get_ElementNAME_TPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementNAME_TPRICE(void);
  HRESULT         __fastcall set_ElementNAME_TPRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementID_TPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementID_TPRICE(void);
  HRESULT         __fastcall set_ElementID_TPRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementGID_STPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementGID_STPRICE(void);
  HRESULT         __fastcall set_ElementGID_STPRICE(BSTR Value/*[in]*/);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableNAME_TPRICE = {read = get_TableNAME_TPRICE};
  __property   BSTR            TableID_TPRICE = {read = get_TableID_TPRICE};
  __property   BSTR            TableGID_STPRICE = {read = get_TableGID_STPRICE};
  __property   BSTR            ElementNAME_TPRICE = {read = get_ElementNAME_TPRICE, write = set_ElementNAME_TPRICE};
  __property   BSTR            ElementID_TPRICE = {read = get_ElementID_TPRICE, write = set_ElementID_TPRICE};
  __property   BSTR            ElementGID_STPRICE = {read = get_ElementGID_STPRICE, write = set_ElementGID_STPRICE};
};
typedef IOleDMSprTypePriceDispT<IOleDMSprTypePrice> IOleDMSprTypePriceDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprPrice
// Interface: IOleDMSprPrice
// *********************************************************************//
template <class T /* IOleDMSprPrice */ >
class TCOMIOleDMSprPriceT : public TComInterface<IOleDMSprPrice>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMSprPriceT() {}
  TCOMIOleDMSprPriceT(IOleDMSprPrice *intf, bool addRef = false) : TComInterface<IOleDMSprPrice>(intf, addRef) {}
  TCOMIOleDMSprPriceT(const TCOMIOleDMSprPriceT& src) : TComInterface<IOleDMSprPrice>(src) {}
  TCOMIOleDMSprPriceT& operator=(const TCOMIOleDMSprPriceT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall NewElement(BSTR id_nom/*[in]*/, BSTR id_type_price/*[in]*/);
  HRESULT         __fastcall SaveElement(int* result/*[out,retval]*/);
  int             __fastcall SaveElement(void);
  HRESULT         __fastcall OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall OpenElement(BSTR id/*[in]*/);
  HRESULT         __fastcall DeleteElement(BSTR id/*[in]*/);
  HRESULT         __fastcall OpenTable(BSTR id_nom/*[in]*/);
  HRESULT         __fastcall TableFirst(void);
  HRESULT         __fastcall TableNext(void);
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR id/*[in]*/);
  HRESULT         __fastcall get_TableNAME_TPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAME_TPRICE(void);
  HRESULT         __fastcall get_TableID_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableID_PRICE(void);
  HRESULT         __fastcall get_TableIDNOM_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDNOM_PRICE(void);
  HRESULT         __fastcall get_TableIDTYPE_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDTYPE_PRICE(void);
  HRESULT         __fastcall get_TableGID_SPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableGID_SPRICE(void);
  HRESULT         __fastcall get_ElementZNACH_PRICE(double* Value/*[out,retval]*/);
  double          __fastcall get_ElementZNACH_PRICE(void);
  HRESULT         __fastcall set_ElementZNACH_PRICE(double Value/*[in]*/);
  HRESULT         __fastcall get_ElementID_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementID_PRICE(void);
  HRESULT         __fastcall set_ElementID_PRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDNOM_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDNOM_PRICE(void);
  HRESULT         __fastcall set_ElementIDNOM_PRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDTYPE_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDTYPE_PRICE(void);
  HRESULT         __fastcall set_ElementIDTYPE_PRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementGID_SPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementGID_SPRICE(void);
  HRESULT         __fastcall set_ElementGID_SPRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall FindElement(BSTR id_type_price/*[in]*/, BSTR id_nom/*[in]*/, 
                                         BSTR* result/*[out,retval]*/);
  BSTR            __fastcall FindElement(BSTR id_type_price/*[in]*/, BSTR id_nom/*[in]*/);
  HRESULT         __fastcall get_TableZNACH_PRICE(double* Value/*[out,retval]*/);
  double          __fastcall get_TableZNACH_PRICE(void);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableNAME_TPRICE = {read = get_TableNAME_TPRICE};
  __property   BSTR            TableID_PRICE = {read = get_TableID_PRICE};
  __property   BSTR            TableIDNOM_PRICE = {read = get_TableIDNOM_PRICE};
  __property   BSTR            TableIDTYPE_PRICE = {read = get_TableIDTYPE_PRICE};
  __property   BSTR            TableGID_SPRICE = {read = get_TableGID_SPRICE};
  __property   double          ElementZNACH_PRICE = {read = get_ElementZNACH_PRICE, write = set_ElementZNACH_PRICE};
  __property   BSTR            ElementID_PRICE = {read = get_ElementID_PRICE, write = set_ElementID_PRICE};
  __property   BSTR            ElementIDNOM_PRICE = {read = get_ElementIDNOM_PRICE, write = set_ElementIDNOM_PRICE};
  __property   BSTR            ElementIDTYPE_PRICE = {read = get_ElementIDTYPE_PRICE, write = set_ElementIDTYPE_PRICE};
  __property   BSTR            ElementGID_SPRICE = {read = get_ElementGID_SPRICE, write = set_ElementGID_SPRICE};
  __property   double          TableZNACH_PRICE = {read = get_TableZNACH_PRICE};
};
typedef TCOMIOleDMSprPriceT<IOleDMSprPrice> TCOMIOleDMSprPrice;

// *********************************************************************//
// DispIntf:  IOleDMSprPrice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8FAC9484-DAC5-4142-B381-BB4AAFA0ECF8}
// *********************************************************************//
template<class T>
class IOleDMSprPriceDispT : public TAutoDriver<IOleDMSprPrice>
{
public:
  IOleDMSprPriceDispT(){}

  IOleDMSprPriceDispT(IOleDMSprPrice *pintf)
  {
    TAutoDriver<IOleDMSprPrice>::Bind(pintf, false);
  }

  IOleDMSprPriceDispT(IOleDMSprPricePtr pintf)
  {
    TAutoDriver<IOleDMSprPrice>::Bind(pintf, true);
  }

  IOleDMSprPriceDispT& operator=(IOleDMSprPrice *pintf)
  {
    TAutoDriver<IOleDMSprPrice>::Bind(pintf, false);
    return *this;
  }

  IOleDMSprPriceDispT& operator=(IOleDMSprPricePtr pintf)
  {
    TAutoDriver<IOleDMSprPrice>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMSprPrice));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMSprPrice);
  }

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall NewElement(BSTR id_nom/*[in]*/, BSTR id_type_price/*[in]*/);
  HRESULT         __fastcall SaveElement(int* result/*[out,retval]*/);
  int             __fastcall SaveElement(void);
  HRESULT         __fastcall OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall OpenElement(BSTR id/*[in]*/);
  HRESULT         __fastcall DeleteElement(BSTR id/*[in]*/);
  HRESULT         __fastcall OpenTable(BSTR id_nom/*[in]*/);
  HRESULT         __fastcall TableFirst();
  HRESULT         __fastcall TableNext();
  HRESULT         __fastcall get_TableEof(int* Value/*[out,retval]*/);
  int             __fastcall get_TableEof(void);
  HRESULT         __fastcall GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdElement(BSTR gid/*[in]*/);
  HRESULT         __fastcall GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/);
  BSTR            __fastcall GetGidElement(BSTR id/*[in]*/);
  HRESULT         __fastcall get_TableNAME_TPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableNAME_TPRICE(void);
  HRESULT         __fastcall get_TableID_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableID_PRICE(void);
  HRESULT         __fastcall get_TableIDNOM_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDNOM_PRICE(void);
  HRESULT         __fastcall get_TableIDTYPE_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableIDTYPE_PRICE(void);
  HRESULT         __fastcall get_TableGID_SPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TableGID_SPRICE(void);
  HRESULT         __fastcall get_ElementZNACH_PRICE(double* Value/*[out,retval]*/);
  double          __fastcall get_ElementZNACH_PRICE(void);
  HRESULT         __fastcall set_ElementZNACH_PRICE(double Value/*[in]*/);
  HRESULT         __fastcall get_ElementID_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementID_PRICE(void);
  HRESULT         __fastcall set_ElementID_PRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDNOM_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDNOM_PRICE(void);
  HRESULT         __fastcall set_ElementIDNOM_PRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementIDTYPE_PRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementIDTYPE_PRICE(void);
  HRESULT         __fastcall set_ElementIDTYPE_PRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_ElementGID_SPRICE(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ElementGID_SPRICE(void);
  HRESULT         __fastcall set_ElementGID_SPRICE(BSTR Value/*[in]*/);
  HRESULT         __fastcall FindElement(BSTR id_type_price/*[in]*/, BSTR id_nom/*[in]*/, 
                                         BSTR* result/*[out,retval]*/);
  BSTR            __fastcall FindElement(BSTR id_type_price/*[in]*/, BSTR id_nom/*[in]*/);
  HRESULT         __fastcall get_TableZNACH_PRICE(double* Value/*[out,retval]*/);
  double          __fastcall get_TableZNACH_PRICE(void);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             TableEof = {read = get_TableEof};
  __property   BSTR            TableNAME_TPRICE = {read = get_TableNAME_TPRICE};
  __property   BSTR            TableID_PRICE = {read = get_TableID_PRICE};
  __property   BSTR            TableIDNOM_PRICE = {read = get_TableIDNOM_PRICE};
  __property   BSTR            TableIDTYPE_PRICE = {read = get_TableIDTYPE_PRICE};
  __property   BSTR            TableGID_SPRICE = {read = get_TableGID_SPRICE};
  __property   double          ElementZNACH_PRICE = {read = get_ElementZNACH_PRICE, write = set_ElementZNACH_PRICE};
  __property   BSTR            ElementID_PRICE = {read = get_ElementID_PRICE, write = set_ElementID_PRICE};
  __property   BSTR            ElementIDNOM_PRICE = {read = get_ElementIDNOM_PRICE, write = set_ElementIDNOM_PRICE};
  __property   BSTR            ElementIDTYPE_PRICE = {read = get_ElementIDTYPE_PRICE, write = set_ElementIDTYPE_PRICE};
  __property   BSTR            ElementGID_SPRICE = {read = get_ElementGID_SPRICE, write = set_ElementGID_SPRICE};
  __property   double          TableZNACH_PRICE = {read = get_TableZNACH_PRICE};
};
typedef IOleDMSprPriceDispT<IOleDMSprPrice> IOleDMSprPriceDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDMDocReal
// Interface: IOleDMDocReal
// *********************************************************************//
template <class T /* IOleDMDocReal */ >
class TCOMIOleDMDocRealT : public TComInterface<IOleDMDocReal>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOleDMDocRealT() {}
  TCOMIOleDMDocRealT(IOleDMDocReal *intf, bool addRef = false) : TComInterface<IOleDMDocReal>(intf, addRef) {}
  TCOMIOleDMDocRealT(const TCOMIOleDMDocRealT& src) : TComInterface<IOleDMDocReal>(src) {}
  TCOMIOleDMDocRealT& operator=(const TCOMIOleDMDocRealT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall NewDoc(void);
  HRESULT         __fastcall OpenDoc(BSTR id/*[in]*/);
  HRESULT         __fastcall SaveDoc(int* result/*[out,retval]*/);
  int             __fastcall SaveDoc(void);
  HRESULT         __fastcall CloseDoc(void);
  HRESULT         __fastcall DeleteDoc(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall DeleteDoc(BSTR id/*[in]*/);
  HRESULT         __fastcall DocTFirst(void);
  HRESULT         __fastcall DocTNext(void);
  HRESULT         __fastcall get_DocTEof(int* Value/*[out,retval]*/);
  int             __fastcall get_DocTEof(void);
  HRESULT         __fastcall GetIdDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/, 
                                      BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/);
  HRESULT         __fastcall get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllPOSDOC(void);
  HRESULT         __fastcall set_DocAllPOSDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllTDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllTDOC(void);
  HRESULT         __fastcall set_DocAllTDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllNUMDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllNUMDOC(void);
  HRESULT         __fastcall set_DocAllNUMDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllSUMDOC(double* Value/*[out,retval]*/);
  double          __fastcall get_DocAllSUMDOC(void);
  HRESULT         __fastcall set_DocAllSUMDOC(double Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDDOC(void);
  HRESULT         __fastcall get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDFIRMDOC(void);
  HRESULT         __fastcall set_DocAllIDFIRMDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDSKLDOC(void);
  HRESULT         __fastcall set_DocAllIDSKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDKLDOC(void);
  HRESULT         __fastcall set_DocAllIDKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDBASE_GALLDOC(void);
  HRESULT         __fastcall set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocPRIMREA(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocPRIMREA(void);
  HRESULT         __fastcall set_DocPRIMREA(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDREA(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDREA(void);
  HRESULT         __fastcall set_DocIDREA(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDDOCREA(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDDOCREA(void);
  HRESULT         __fastcall set_DocIDDOCREA(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDTPRICEREA(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDTPRICEREA(void);
  HRESULT         __fastcall set_DocIDTPRICEREA(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDGRPOLREA(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDGRPOLREA(void);
  HRESULT         __fastcall set_DocIDGRPOLREA(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDBSCHETREA(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDBSCHETREA(void);
  HRESULT         __fastcall set_DocIDBSCHETREA(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDREAT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDREAT(void);
  HRESULT         __fastcall set_DocTIDREAT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDDOCREAT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDDOCREAT(void);
  HRESULT         __fastcall set_DocTIDDOCREAT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDNOMREAT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDNOMREAT(void);
  HRESULT         __fastcall set_DocTIDNOMREAT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDEDREAT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDEDREAT(void);
  HRESULT         __fastcall set_DocTIDEDREAT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTKOLREAT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKOLREAT(void);
  HRESULT         __fastcall set_DocTKOLREAT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTKFREAT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKFREAT(void);
  HRESULT         __fastcall set_DocTKFREAT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTPRICEREAT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTPRICEREAT(void);
  HRESULT         __fastcall set_DocTPRICEREAT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTSUMREAT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTSUMREAT(void);
  HRESULT         __fastcall set_DocTSUMREAT(double Value/*[in]*/);
  HRESULT         __fastcall DocTAppend(void);
  HRESULT         __fastcall DocTDelete(void);

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             DocTEof = {read = get_DocTEof};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};
  __property   BSTR            DocPRIMREA = {read = get_DocPRIMREA, write = set_DocPRIMREA};
  __property   BSTR            DocIDREA = {read = get_DocIDREA, write = set_DocIDREA};
  __property   BSTR            DocIDDOCREA = {read = get_DocIDDOCREA, write = set_DocIDDOCREA};
  __property   BSTR            DocIDTPRICEREA = {read = get_DocIDTPRICEREA, write = set_DocIDTPRICEREA};
  __property   BSTR            DocIDGRPOLREA = {read = get_DocIDGRPOLREA, write = set_DocIDGRPOLREA};
  __property   BSTR            DocIDBSCHETREA = {read = get_DocIDBSCHETREA, write = set_DocIDBSCHETREA};
  __property   BSTR            DocTIDREAT = {read = get_DocTIDREAT, write = set_DocTIDREAT};
  __property   BSTR            DocTIDDOCREAT = {read = get_DocTIDDOCREAT, write = set_DocTIDDOCREAT};
  __property   BSTR            DocTIDNOMREAT = {read = get_DocTIDNOMREAT, write = set_DocTIDNOMREAT};
  __property   BSTR            DocTIDEDREAT = {read = get_DocTIDEDREAT, write = set_DocTIDEDREAT};
  __property   double          DocTKOLREAT = {read = get_DocTKOLREAT, write = set_DocTKOLREAT};
  __property   double          DocTKFREAT = {read = get_DocTKFREAT, write = set_DocTKFREAT};
  __property   double          DocTPRICEREAT = {read = get_DocTPRICEREAT, write = set_DocTPRICEREAT};
  __property   double          DocTSUMREAT = {read = get_DocTSUMREAT, write = set_DocTSUMREAT};
};
typedef TCOMIOleDMDocRealT<IOleDMDocReal> TCOMIOleDMDocReal;

// *********************************************************************//
// DispIntf:  IOleDMDocReal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C03B1E3C-DE78-4569-9A1D-A9C348DD9687}
// *********************************************************************//
template<class T>
class IOleDMDocRealDispT : public TAutoDriver<IOleDMDocReal>
{
public:
  IOleDMDocRealDispT(){}

  IOleDMDocRealDispT(IOleDMDocReal *pintf)
  {
    TAutoDriver<IOleDMDocReal>::Bind(pintf, false);
  }

  IOleDMDocRealDispT(IOleDMDocRealPtr pintf)
  {
    TAutoDriver<IOleDMDocReal>::Bind(pintf, true);
  }

  IOleDMDocRealDispT& operator=(IOleDMDocReal *pintf)
  {
    TAutoDriver<IOleDMDocReal>::Bind(pintf, false);
    return *this;
  }

  IOleDMDocRealDispT& operator=(IOleDMDocRealPtr pintf)
  {
    TAutoDriver<IOleDMDocReal>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OleDMDocReal));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OleDMDocReal);
  }

  HRESULT         __fastcall get_CodeError(int* Value/*[out,retval]*/);
  int             __fastcall get_CodeError(void);
  HRESULT         __fastcall get_TextError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_TextError(void);
  HRESULT         __fastcall NewDoc();
  HRESULT         __fastcall OpenDoc(BSTR id/*[in]*/);
  HRESULT         __fastcall SaveDoc(int* result/*[out,retval]*/);
  int             __fastcall SaveDoc(void);
  HRESULT         __fastcall CloseDoc();
  HRESULT         __fastcall DeleteDoc(BSTR id/*[in]*/, int* result/*[out,retval]*/);
  int             __fastcall DeleteDoc(BSTR id/*[in]*/);
  HRESULT         __fastcall DocTFirst();
  HRESULT         __fastcall DocTNext();
  HRESULT         __fastcall get_DocTEof(int* Value/*[out,retval]*/);
  int             __fastcall get_DocTEof(void);
  HRESULT         __fastcall GetIdDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/, 
                                      BSTR* id/*[out,retval]*/);
  BSTR            __fastcall GetIdDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/);
  HRESULT         __fastcall get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllPOSDOC(void);
  HRESULT         __fastcall set_DocAllPOSDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllTDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllTDOC(void);
  HRESULT         __fastcall set_DocAllTDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllNUMDOC(int* Value/*[out,retval]*/);
  int             __fastcall get_DocAllNUMDOC(void);
  HRESULT         __fastcall set_DocAllNUMDOC(int Value/*[in]*/);
  HRESULT         __fastcall get_DocAllSUMDOC(double* Value/*[out,retval]*/);
  double          __fastcall get_DocAllSUMDOC(void);
  HRESULT         __fastcall set_DocAllSUMDOC(double Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDDOC(void);
  HRESULT         __fastcall get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDFIRMDOC(void);
  HRESULT         __fastcall set_DocAllIDFIRMDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDSKLDOC(void);
  HRESULT         __fastcall set_DocAllIDSKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDKLDOC(void);
  HRESULT         __fastcall set_DocAllIDKLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocAllIDBASE_GALLDOC(void);
  HRESULT         __fastcall set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocPRIMREA(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocPRIMREA(void);
  HRESULT         __fastcall set_DocPRIMREA(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDREA(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDREA(void);
  HRESULT         __fastcall set_DocIDREA(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDDOCREA(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDDOCREA(void);
  HRESULT         __fastcall set_DocIDDOCREA(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDTPRICEREA(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDTPRICEREA(void);
  HRESULT         __fastcall set_DocIDTPRICEREA(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDGRPOLREA(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDGRPOLREA(void);
  HRESULT         __fastcall set_DocIDGRPOLREA(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocIDBSCHETREA(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocIDBSCHETREA(void);
  HRESULT         __fastcall set_DocIDBSCHETREA(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDREAT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDREAT(void);
  HRESULT         __fastcall set_DocTIDREAT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDDOCREAT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDDOCREAT(void);
  HRESULT         __fastcall set_DocTIDDOCREAT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDNOMREAT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDNOMREAT(void);
  HRESULT         __fastcall set_DocTIDNOMREAT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTIDEDREAT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_DocTIDEDREAT(void);
  HRESULT         __fastcall set_DocTIDEDREAT(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DocTKOLREAT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKOLREAT(void);
  HRESULT         __fastcall set_DocTKOLREAT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTKFREAT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTKFREAT(void);
  HRESULT         __fastcall set_DocTKFREAT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTPRICEREAT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTPRICEREAT(void);
  HRESULT         __fastcall set_DocTPRICEREAT(double Value/*[in]*/);
  HRESULT         __fastcall get_DocTSUMREAT(double* Value/*[out,retval]*/);
  double          __fastcall get_DocTSUMREAT(void);
  HRESULT         __fastcall set_DocTSUMREAT(double Value/*[in]*/);
  HRESULT         __fastcall DocTAppend();
  HRESULT         __fastcall DocTDelete();

  __property   int             CodeError = {read = get_CodeError};
  __property   BSTR            TextError = {read = get_TextError};
  __property   int             DocTEof = {read = get_DocTEof};
  __property   BSTR            DocAllPOSDOC = {read = get_DocAllPOSDOC, write = set_DocAllPOSDOC};
  __property   BSTR            DocAllTDOC = {read = get_DocAllTDOC, write = set_DocAllTDOC};
  __property   int             DocAllNUMDOC = {read = get_DocAllNUMDOC, write = set_DocAllNUMDOC};
  __property   double          DocAllSUMDOC = {read = get_DocAllSUMDOC, write = set_DocAllSUMDOC};
  __property   BSTR            DocAllIDDOC = {read = get_DocAllIDDOC};
  __property   BSTR            DocAllIDFIRMDOC = {read = get_DocAllIDFIRMDOC, write = set_DocAllIDFIRMDOC};
  __property   BSTR            DocAllIDSKLDOC = {read = get_DocAllIDSKLDOC, write = set_DocAllIDSKLDOC};
  __property   BSTR            DocAllIDKLDOC = {read = get_DocAllIDKLDOC, write = set_DocAllIDKLDOC};
  __property   BSTR            DocAllIDBASE_GALLDOC = {read = get_DocAllIDBASE_GALLDOC, write = set_DocAllIDBASE_GALLDOC};
  __property   BSTR            DocPRIMREA = {read = get_DocPRIMREA, write = set_DocPRIMREA};
  __property   BSTR            DocIDREA = {read = get_DocIDREA, write = set_DocIDREA};
  __property   BSTR            DocIDDOCREA = {read = get_DocIDDOCREA, write = set_DocIDDOCREA};
  __property   BSTR            DocIDTPRICEREA = {read = get_DocIDTPRICEREA, write = set_DocIDTPRICEREA};
  __property   BSTR            DocIDGRPOLREA = {read = get_DocIDGRPOLREA, write = set_DocIDGRPOLREA};
  __property   BSTR            DocIDBSCHETREA = {read = get_DocIDBSCHETREA, write = set_DocIDBSCHETREA};
  __property   BSTR            DocTIDREAT = {read = get_DocTIDREAT, write = set_DocTIDREAT};
  __property   BSTR            DocTIDDOCREAT = {read = get_DocTIDDOCREAT, write = set_DocTIDDOCREAT};
  __property   BSTR            DocTIDNOMREAT = {read = get_DocTIDNOMREAT, write = set_DocTIDNOMREAT};
  __property   BSTR            DocTIDEDREAT = {read = get_DocTIDEDREAT, write = set_DocTIDEDREAT};
  __property   double          DocTKOLREAT = {read = get_DocTKOLREAT, write = set_DocTKOLREAT};
  __property   double          DocTKFREAT = {read = get_DocTKFREAT, write = set_DocTKFREAT};
  __property   double          DocTPRICEREAT = {read = get_DocTPRICEREAT, write = set_DocTPRICEREAT};
  __property   double          DocTSUMREAT = {read = get_DocTSUMREAT, write = set_DocTSUMREAT};
};
typedef IOleDMDocRealDispT<IOleDMDocReal> IOleDMDocRealDisp;

// *********************************************************************//
// SmartIntf: TCOMIOleDM
// Interface: IOleDM
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::get_ConnectString(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ConnectString(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMT<T>::get_ConnectString(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ConnectString((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::set_ConnectString(BSTR Value/*[in]*/)
{
  return (*this)->set_ConnectString(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::set_PasswordUser(BSTR Param1/*[in]*/)
{
  return (*this)->set_PasswordUser(Param1);
}

template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::get_NameUser(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NameUser(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMT<T>::get_NameUser(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NameUser((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::set_NameUser(BSTR Value/*[in]*/)
{
  return (*this)->set_NameUser(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::GlobConnect(void)
{
  return (*this)->GlobConnect();
}

template <class T> HRESULT __fastcall
TCOMIOleDMT<T>::get_ConnectOK(int* Value/*[out,retval]*/)
{
  return (*this)->get_ConnectOK(Value);
}

template <class T> int __fastcall
TCOMIOleDMT<T>::get_ConnectOK(void)
{
  int Value;
  OLECHECK(this->get_ConnectOK((int*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IOleDM
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {74F3797D-8754-4353-9F62-A786056ADDE4}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDispT<T>::get_ConnectString(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectString"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDispT<T>::get_ConnectString(void)
{
  BSTR Value;
  this->get_ConnectString((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDispT<T>::set_ConnectString(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectString"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDispT<T>::set_PasswordUser(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PasswordUser"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDispT<T>::get_NameUser(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameUser"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDispT<T>::get_NameUser(void)
{
  BSTR Value;
  this->get_NameUser((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDispT<T>::set_NameUser(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameUser"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDispT<T>::GlobConnect()
{
  _TDispID _dispid(*this, OLETEXT("GlobConnect"), DISPID(206));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDispT<T>::get_ConnectOK(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectOK"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDispT<T>::get_ConnectOK(void)
{
  int Value;
  this->get_ConnectOK((int*)&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMGurAllDoc
// Interface: IOleDMGurAllDoc
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMGurAllDocT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_PosNach(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_PosNach(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_PosNach(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_PosNach((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_PosNach(BSTR Value/*[in]*/)
{
  return (*this)->set_PosNach(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_PosCon(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_PosCon(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_PosCon(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_PosCon((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_PosCon(BSTR Value/*[in]*/)
{
  return (*this)->set_PosCon(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdDoc(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdDoc(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdDoc(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdDoc((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_IdDoc(BSTR Value/*[in]*/)
{
  return (*this)->set_IdDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdKlient(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdKlient(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdKlient(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdKlient((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_IdKlient(BSTR Value/*[in]*/)
{
  return (*this)->set_IdKlient(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdSklad(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdSklad(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdSklad(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdSklad((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_IdSklad(BSTR Value/*[in]*/)
{
  return (*this)->set_IdSklad(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdFirm(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IdFirm(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_IdFirm(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IdFirm((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_IdFirm(BSTR Value/*[in]*/)
{
  return (*this)->set_IdFirm(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_StringTypeDoc(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_StringTypeDoc(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_StringTypeDoc(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_StringTypeDoc((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_StringTypeDoc(BSTR Value/*[in]*/)
{
  return (*this)->set_StringTypeDoc(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_OtborVkl(int* Value/*[out,retval]*/)
{
  return (*this)->get_OtborVkl(Value);
}

template <class T> int __fastcall
TCOMIOleDMGurAllDocT<T>::get_OtborVkl(void)
{
  int Value;
  OLECHECK(this->get_OtborVkl((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_OtborVkl(int Value/*[in]*/)
{
  return (*this)->set_OtborVkl(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_NoCheck(int* Value/*[out,retval]*/)
{
  return (*this)->get_NoCheck(Value);
}

template <class T> int __fastcall
TCOMIOleDMGurAllDocT<T>::get_NoCheck(void)
{
  int Value;
  OLECHECK(this->get_NoCheck((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::set_NoCheck(int Value/*[in]*/)
{
  return (*this)->set_NoCheck(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::OpenTable(void)
{
  return (*this)->OpenTable();
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::UpdateTable(void)
{
  return (*this)->UpdateTable();
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEof(Value);
}

template <class T> int __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableEof(void)
{
  int Value;
  OLECHECK(this->get_TableEof((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TablePRDOC(int* Value/*[out,retval]*/)
{
  return (*this)->get_TablePRDOC(Value);
}

template <class T> int __fastcall
TCOMIOleDMGurAllDocT<T>::get_TablePRDOC(void)
{
  int Value;
  OLECHECK(this->get_TablePRDOC((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableTDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableTDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableTDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableTDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableNUMDOC(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableNUMDOC(Value);
}

template <class T> int __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableNUMDOC(void)
{
  int Value;
  OLECHECK(this->get_TableNUMDOC((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableSUMDOC(double* Value/*[out,retval]*/)
{
  return (*this)->get_TableSUMDOC(Value);
}

template <class T> double __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableSUMDOC(void)
{
  double Value;
  OLECHECK(this->get_TableSUMDOC((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableNAMEFIRM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableNAMEFIRM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableNAMEFIRM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableNAMEFIRM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableNAMESKLAD(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableNAMESKLAD(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableNAMESKLAD(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableNAMESKLAD((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableNAMEKLIENT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableNAMEKLIENT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableNAMEKLIENT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableNAMEKLIENT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableNAME_USER(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableNAME_USER(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableNAME_USER(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableNAME_USER((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TablePOSDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TablePOSDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_TablePOSDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TablePOSDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableIDDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableIDDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableIDFIRMDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDFIRMDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableIDFIRMDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDFIRMDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableIDSKLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDSKLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableIDSKLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDSKLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableIDKLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDKLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableIDKLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDKLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableIDDOGDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDDOGDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableIDDOGDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDDOGDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableIDUSERDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDUSERDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableIDUSERDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDUSERDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableIDDOCOSNDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDDOCOSNDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableIDDOCOSNDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDDOCOSNDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDBASE_GALLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMGurAllDocT<T>::get_TableIDBASE_GALLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDBASE_GALLDOC((BSTR*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IOleDMGurAllDoc
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {76C6259A-F143-4E40-9EBE-838B44404770}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMGurAllDocDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_PosNach(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PosNach"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_PosNach(void)
{
  BSTR Value;
  this->get_PosNach((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_PosNach(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PosNach"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_PosCon(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PosCon"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_PosCon(void)
{
  BSTR Value;
  this->get_PosCon((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_PosCon(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PosCon"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_IdDoc(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdDoc"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_IdDoc(void)
{
  BSTR Value;
  this->get_IdDoc((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_IdDoc(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdDoc"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_IdKlient(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdKlient"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_IdKlient(void)
{
  BSTR Value;
  this->get_IdKlient((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_IdKlient(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdKlient"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_IdSklad(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdSklad"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_IdSklad(void)
{
  BSTR Value;
  this->get_IdSklad((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_IdSklad(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdSklad"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_IdFirm(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdFirm"), DISPID(208));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_IdFirm(void)
{
  BSTR Value;
  this->get_IdFirm((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_IdFirm(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdFirm"), DISPID(208));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_StringTypeDoc(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StringTypeDoc"), DISPID(209));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_StringTypeDoc(void)
{
  BSTR Value;
  this->get_StringTypeDoc((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_StringTypeDoc(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StringTypeDoc"), DISPID(209));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_OtborVkl(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OtborVkl"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMGurAllDocDispT<T>::get_OtborVkl(void)
{
  int Value;
  this->get_OtborVkl((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_OtborVkl(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OtborVkl"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_NoCheck(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NoCheck"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMGurAllDocDispT<T>::get_NoCheck(void)
{
  int Value;
  this->get_NoCheck((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::set_NoCheck(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NoCheck"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::OpenTable()
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::UpdateTable()
{
  _TDispID _dispid(*this, OLETEXT("UpdateTable"), DISPID(213));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(214));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(215));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEof"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMGurAllDocDispT<T>::get_TableEof(void)
{
  int Value;
  this->get_TableEof((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TablePRDOC(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TablePRDOC"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMGurAllDocDispT<T>::get_TablePRDOC(void)
{
  int Value;
  this->get_TablePRDOC((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TableTDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableTDOC"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_TableTDOC(void)
{
  BSTR Value;
  this->get_TableTDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TableNUMDOC(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableNUMDOC"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMGurAllDocDispT<T>::get_TableNUMDOC(void)
{
  int Value;
  this->get_TableNUMDOC((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TableSUMDOC(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableSUMDOC"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMGurAllDocDispT<T>::get_TableSUMDOC(void)
{
  double Value;
  this->get_TableSUMDOC((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TableNAMEFIRM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableNAMEFIRM"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_TableNAMEFIRM(void)
{
  BSTR Value;
  this->get_TableNAMEFIRM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TableNAMESKLAD(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableNAMESKLAD"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_TableNAMESKLAD(void)
{
  BSTR Value;
  this->get_TableNAMESKLAD((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TableNAMEKLIENT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableNAMEKLIENT"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_TableNAMEKLIENT(void)
{
  BSTR Value;
  this->get_TableNAMEKLIENT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TableNAME_USER(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableNAME_USER"), DISPID(224));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_TableNAME_USER(void)
{
  BSTR Value;
  this->get_TableNAME_USER((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TablePOSDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TablePOSDOC"), DISPID(225));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_TablePOSDOC(void)
{
  BSTR Value;
  this->get_TablePOSDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TableIDDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDDOC"), DISPID(226));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_TableIDDOC(void)
{
  BSTR Value;
  this->get_TableIDDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TableIDFIRMDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDFIRMDOC"), DISPID(227));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_TableIDFIRMDOC(void)
{
  BSTR Value;
  this->get_TableIDFIRMDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TableIDSKLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDSKLDOC"), DISPID(228));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_TableIDSKLDOC(void)
{
  BSTR Value;
  this->get_TableIDSKLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TableIDKLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDKLDOC"), DISPID(229));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_TableIDKLDOC(void)
{
  BSTR Value;
  this->get_TableIDKLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TableIDDOGDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDDOGDOC"), DISPID(230));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_TableIDDOGDOC(void)
{
  BSTR Value;
  this->get_TableIDDOGDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TableIDUSERDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDUSERDOC"), DISPID(231));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_TableIDUSERDOC(void)
{
  BSTR Value;
  this->get_TableIDUSERDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TableIDDOCOSNDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDDOCOSNDOC"), DISPID(232));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_TableIDDOCOSNDOC(void)
{
  BSTR Value;
  this->get_TableIDDOCOSNDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMGurAllDocDispT<T>::get_TableIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDBASE_GALLDOC"), DISPID(233));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMGurAllDocDispT<T>::get_TableIDBASE_GALLDOC(void)
{
  BSTR Value;
  this->get_TableIDBASE_GALLDOC((BSTR*)&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprSklad
// Interface: IOleDMSprSklad
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprSkladT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::OpenTable(void)
{
  return (*this)->OpenTable();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  return (*this)->OpenElement(id, result);
}

template <class T> int __fastcall
TCOMIOleDMSprSkladT<T>::OpenElement(BSTR id/*[in]*/)
{
  int result;
  OLECHECK(this->OpenElement(id/*[in]*/, (int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::NewElement(void)
{
  return (*this)->NewElement();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::SaveElement(void)
{
  return (*this)->SaveElement();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/)
{
  return (*this)->GetIdElement(gid, id);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR id = 0;
  OLECHECK(this->GetIdElement(gid/*[in]*/, (BSTR*)&id));
  return id;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  return (*this)->GetGidElement(id, gid);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::GetGidElement(BSTR id/*[in]*/)
{
  BSTR gid = 0;
  OLECHECK(this->GetGidElement(id/*[in]*/, (BSTR*)&gid));
  return gid;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::DeleteElement(BSTR id/*[in]*/)
{
  return (*this)->DeleteElement(id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEof(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprSkladT<T>::get_TableEof(void)
{
  int Value;
  OLECHECK(this->get_TableEof((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_TableNAMESKLAD(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableNAMESKLAD(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::get_TableNAMESKLAD(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableNAMESKLAD((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_TableMOLSKLAD(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableMOLSKLAD(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::get_TableMOLSKLAD(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableMOLSKLAD((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_TableADRSKLAD(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableADRSKLAD(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::get_TableADRSKLAD(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableADRSKLAD((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_TableTSklad(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableTSklad(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprSkladT<T>::get_TableTSklad(void)
{
  int Value;
  OLECHECK(this->get_TableTSklad((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_TableIDSKLAD(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDSKLAD(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::get_TableIDSKLAD(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDSKLAD((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_TableGID_SSKLAD(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableGID_SSKLAD(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::get_TableGID_SSKLAD(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableGID_SSKLAD((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_ElementNAMESKLAD(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementNAMESKLAD(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::get_ElementNAMESKLAD(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementNAMESKLAD((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::set_ElementNAMESKLAD(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementNAMESKLAD(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_ElementMOLSKLAD(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementMOLSKLAD(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::get_ElementMOLSKLAD(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementMOLSKLAD((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::set_ElementMOLSKLAD(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementMOLSKLAD(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_ElementADRSKLAD(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementADRSKLAD(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::get_ElementADRSKLAD(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementADRSKLAD((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::set_ElementADRSKLAD(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementADRSKLAD(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_ElementTSKLAD(int* Value/*[out,retval]*/)
{
  return (*this)->get_ElementTSKLAD(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprSkladT<T>::get_ElementTSKLAD(void)
{
  int Value;
  OLECHECK(this->get_ElementTSKLAD((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::set_ElementTSKLAD(int Value/*[in]*/)
{
  return (*this)->set_ElementTSKLAD(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_ElementIDSKLAD(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementIDSKLAD(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::get_ElementIDSKLAD(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementIDSKLAD((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::set_ElementIDSKLAD(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementIDSKLAD(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::get_ElementGID_SSKLAD(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementGID_SSKLAD(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprSkladT<T>::get_ElementGID_SSKLAD(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementGID_SSKLAD((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprSkladT<T>::set_ElementGID_SSKLAD(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementGID_SSKLAD(Value);
}

// *********************************************************************//
// DispIntf:  IOleDMSprSklad
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1094236B-2344-47A0-8EF7-C36F82B71B48}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprSkladDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::OpenTable()
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(203));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenElement"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprSkladDispT<T>::OpenElement(BSTR id/*[in]*/)
{
  int result;
  this->OpenElement(id, (int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::NewElement()
{
  _TDispID _dispid(*this, OLETEXT("NewElement"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::SaveElement()
{
  _TDispID _dispid(*this, OLETEXT("SaveElement"), DISPID(206));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdElement"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = gid /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(id /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR id;
  this->GetIdElement(gid, (BSTR*)&id);
  return id;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetGidElement"), DISPID(208));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(gid /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::GetGidElement(BSTR id/*[in]*/)
{
  BSTR gid;
  this->GetGidElement(id, (BSTR*)&gid);
  return gid;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::DeleteElement(BSTR id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteElement"), DISPID(209));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(210));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(211));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEof"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprSkladDispT<T>::get_TableEof(void)
{
  int Value;
  this->get_TableEof((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_TableNAMESKLAD(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableNAMESKLAD"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::get_TableNAMESKLAD(void)
{
  BSTR Value;
  this->get_TableNAMESKLAD((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_TableMOLSKLAD(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableMOLSKLAD"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::get_TableMOLSKLAD(void)
{
  BSTR Value;
  this->get_TableMOLSKLAD((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_TableADRSKLAD(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableADRSKLAD"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::get_TableADRSKLAD(void)
{
  BSTR Value;
  this->get_TableADRSKLAD((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_TableTSklad(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableTSklad"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprSkladDispT<T>::get_TableTSklad(void)
{
  int Value;
  this->get_TableTSklad((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_TableIDSKLAD(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDSKLAD"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::get_TableIDSKLAD(void)
{
  BSTR Value;
  this->get_TableIDSKLAD((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_TableGID_SSKLAD(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableGID_SSKLAD"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::get_TableGID_SSKLAD(void)
{
  BSTR Value;
  this->get_TableGID_SSKLAD((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_ElementNAMESKLAD(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementNAMESKLAD"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::get_ElementNAMESKLAD(void)
{
  BSTR Value;
  this->get_ElementNAMESKLAD((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::set_ElementNAMESKLAD(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementNAMESKLAD"), DISPID(219));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_ElementMOLSKLAD(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementMOLSKLAD"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::get_ElementMOLSKLAD(void)
{
  BSTR Value;
  this->get_ElementMOLSKLAD((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::set_ElementMOLSKLAD(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementMOLSKLAD"), DISPID(220));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_ElementADRSKLAD(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementADRSKLAD"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::get_ElementADRSKLAD(void)
{
  BSTR Value;
  this->get_ElementADRSKLAD((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::set_ElementADRSKLAD(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementADRSKLAD"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_ElementTSKLAD(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementTSKLAD"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprSkladDispT<T>::get_ElementTSKLAD(void)
{
  int Value;
  this->get_ElementTSKLAD((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::set_ElementTSKLAD(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementTSKLAD"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_ElementIDSKLAD(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDSKLAD"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::get_ElementIDSKLAD(void)
{
  BSTR Value;
  this->get_ElementIDSKLAD((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::set_ElementIDSKLAD(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDSKLAD"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::get_ElementGID_SSKLAD(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementGID_SSKLAD"), DISPID(224));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprSkladDispT<T>::get_ElementGID_SSKLAD(void)
{
  BSTR Value;
  this->get_ElementGID_SSKLAD((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprSkladDispT<T>::set_ElementGID_SSKLAD(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementGID_SSKLAD"), DISPID(224));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprFirm
// Interface: IOleDMSprFirm
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprFirmT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::OpenTable(void)
{
  return (*this)->OpenTable();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  return (*this)->OpenElement(id, result);
}

template <class T> int __fastcall
TCOMIOleDMSprFirmT<T>::OpenElement(BSTR id/*[in]*/)
{
  int result;
  OLECHECK(this->OpenElement(id/*[in]*/, (int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::NewElement(void)
{
  return (*this)->NewElement();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::SaveElement(int* result/*[out,retval]*/)
{
  return (*this)->SaveElement(result);
}

template <class T> int __fastcall
TCOMIOleDMSprFirmT<T>::SaveElement(void)
{
  int result;
  OLECHECK(this->SaveElement((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::DeleteElement(BSTR id/*[in]*/)
{
  return (*this)->DeleteElement(id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  return (*this)->GetGidElement(id, gid);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::GetGidElement(BSTR id/*[in]*/)
{
  BSTR gid = 0;
  OLECHECK(this->GetGidElement(id/*[in]*/, (BSTR*)&gid));
  return gid;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/)
{
  return (*this)->GetIdElement(gid, id);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR id = 0;
  OLECHECK(this->GetIdElement(gid/*[in]*/, (BSTR*)&id));
  return id;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_TableINNFIRM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableINNFIRM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_TableINNFIRM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableINNFIRM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_TableNAMEFIRM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableNAMEFIRM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_TableNAMEFIRM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableNAMEFIRM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_TableIDFIRM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDFIRM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_TableIDFIRM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDFIRM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_ElementIDFIRM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementIDFIRM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_ElementIDFIRM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementIDFIRM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::set_ElementIDFIRM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementIDFIRM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_ElementNAMEFIRM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementNAMEFIRM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_ElementNAMEFIRM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementNAMEFIRM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::set_ElementNAMEFIRM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementNAMEFIRM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_ElementINNFIRM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementINNFIRM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_ElementINNFIRM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementINNFIRM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::set_ElementINNFIRM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementINNFIRM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEof(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprFirmT<T>::get_TableEof(void)
{
  int Value;
  OLECHECK(this->get_TableEof((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_TableGID_SFIRM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableGID_SFIRM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_TableGID_SFIRM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableGID_SFIRM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::get_ElementGID_SFIRM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementGID_SFIRM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprFirmT<T>::get_ElementGID_SFIRM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementGID_SFIRM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprFirmT<T>::set_ElementGID_SFIRM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementGID_SFIRM(Value);
}

// *********************************************************************//
// DispIntf:  IOleDMSprFirm
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6537D36E-E877-40F4-8BA1-EA8018256082}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprFirmDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::OpenTable()
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(203));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenElement"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprFirmDispT<T>::OpenElement(BSTR id/*[in]*/)
{
  int result;
  this->OpenElement(id, (int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::NewElement()
{
  _TDispID _dispid(*this, OLETEXT("NewElement"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::SaveElement(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveElement"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprFirmDispT<T>::SaveElement(void)
{
  int result;
  this->SaveElement((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::DeleteElement(BSTR id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteElement"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetGidElement"), DISPID(208));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(gid /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::GetGidElement(BSTR id/*[in]*/)
{
  BSTR gid;
  this->GetGidElement(id, (BSTR*)&gid);
  return gid;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdElement"), DISPID(209));
  TAutoArgs<1> _args;
  _args[1] = gid /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(id /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR id;
  this->GetIdElement(gid, (BSTR*)&id);
  return id;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_TableINNFIRM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableINNFIRM"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_TableINNFIRM(void)
{
  BSTR Value;
  this->get_TableINNFIRM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_TableNAMEFIRM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableNAMEFIRM"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_TableNAMEFIRM(void)
{
  BSTR Value;
  this->get_TableNAMEFIRM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_TableIDFIRM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDFIRM"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_TableIDFIRM(void)
{
  BSTR Value;
  this->get_TableIDFIRM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_ElementIDFIRM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDFIRM"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_ElementIDFIRM(void)
{
  BSTR Value;
  this->get_ElementIDFIRM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::set_ElementIDFIRM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDFIRM"), DISPID(213));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_ElementNAMEFIRM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementNAMEFIRM"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_ElementNAMEFIRM(void)
{
  BSTR Value;
  this->get_ElementNAMEFIRM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::set_ElementNAMEFIRM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementNAMEFIRM"), DISPID(214));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_ElementINNFIRM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementINNFIRM"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_ElementINNFIRM(void)
{
  BSTR Value;
  this->get_ElementINNFIRM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::set_ElementINNFIRM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementINNFIRM"), DISPID(215));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(216));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(217));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEof"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprFirmDispT<T>::get_TableEof(void)
{
  int Value;
  this->get_TableEof((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_TableGID_SFIRM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableGID_SFIRM"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_TableGID_SFIRM(void)
{
  BSTR Value;
  this->get_TableGID_SFIRM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::get_ElementGID_SFIRM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementGID_SFIRM"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprFirmDispT<T>::get_ElementGID_SFIRM(void)
{
  BSTR Value;
  this->get_ElementGID_SFIRM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprFirmDispT<T>::set_ElementGID_SFIRM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementGID_SFIRM"), DISPID(220));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprInfBase
// Interface: IOleDMSprInfBase
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprInfBaseT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprInfBaseT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::OpenTable(void)
{
  return (*this)->OpenTable();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  return (*this)->OpenElement(id, result);
}

template <class T> int __fastcall
TCOMIOleDMSprInfBaseT<T>::OpenElement(BSTR id/*[in]*/)
{
  int result;
  OLECHECK(this->OpenElement(id/*[in]*/, (int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::NewElement(void)
{
  return (*this)->NewElement();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::SaveElement(int* result/*[out,retval]*/)
{
  return (*this)->SaveElement(result);
}

template <class T> int __fastcall
TCOMIOleDMSprInfBaseT<T>::SaveElement(void)
{
  int result;
  OLECHECK(this->SaveElement((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::DeleteElement(BSTR id/*[in]*/)
{
  return (*this)->DeleteElement(id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::GetIdPoName(BSTR name/*[in]*/, BSTR* id/*[out,retval]*/)
{
  return (*this)->GetIdPoName(name, id);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprInfBaseT<T>::GetIdPoName(BSTR name/*[in]*/)
{
  BSTR id = 0;
  OLECHECK(this->GetIdPoName(name/*[in]*/, (BSTR*)&id));
  return id;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEof(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprInfBaseT<T>::get_TableEof(void)
{
  int Value;
  OLECHECK(this->get_TableEof((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::get_TableNAME_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableNAME_SINFBASE_OBMEN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprInfBaseT<T>::get_TableNAME_SINFBASE_OBMEN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableNAME_SINFBASE_OBMEN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::get_TableID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableID_SINFBASE_OBMEN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprInfBaseT<T>::get_TableID_SINFBASE_OBMEN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableID_SINFBASE_OBMEN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::get_TableGID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableGID_SINFBASE_OBMEN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprInfBaseT<T>::get_TableGID_SINFBASE_OBMEN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableGID_SINFBASE_OBMEN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::get_ElementNAME_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementNAME_SINFBASE_OBMEN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprInfBaseT<T>::get_ElementNAME_SINFBASE_OBMEN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementNAME_SINFBASE_OBMEN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::set_ElementNAME_SINFBASE_OBMEN(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementNAME_SINFBASE_OBMEN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::get_ElementID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementID_SINFBASE_OBMEN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprInfBaseT<T>::get_ElementID_SINFBASE_OBMEN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementID_SINFBASE_OBMEN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::set_ElementID_SINFBASE_OBMEN(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementID_SINFBASE_OBMEN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::get_ElementGID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementGID_SINFBASE_OBMEN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprInfBaseT<T>::get_ElementGID_SINFBASE_OBMEN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementGID_SINFBASE_OBMEN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprInfBaseT<T>::set_ElementGID_SINFBASE_OBMEN(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementGID_SINFBASE_OBMEN(Value);
}

// *********************************************************************//
// DispIntf:  IOleDMSprInfBase
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1C1C010E-C0C9-4871-BC0E-7A93E2CB6AD9}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprInfBaseDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprInfBaseDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::OpenTable()
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(203));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenElement"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprInfBaseDispT<T>::OpenElement(BSTR id/*[in]*/)
{
  int result;
  this->OpenElement(id, (int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::NewElement()
{
  _TDispID _dispid(*this, OLETEXT("NewElement"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::SaveElement(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveElement"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprInfBaseDispT<T>::SaveElement(void)
{
  int result;
  this->SaveElement((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::DeleteElement(BSTR id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteElement"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::GetIdPoName(BSTR name/*[in]*/, BSTR* id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdPoName"), DISPID(208));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(id /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprInfBaseDispT<T>::GetIdPoName(BSTR name/*[in]*/)
{
  BSTR id;
  this->GetIdPoName(name, (BSTR*)&id);
  return id;
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(209));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(210));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEof"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprInfBaseDispT<T>::get_TableEof(void)
{
  int Value;
  this->get_TableEof((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::get_TableNAME_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableNAME_SINFBASE_OBMEN"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprInfBaseDispT<T>::get_TableNAME_SINFBASE_OBMEN(void)
{
  BSTR Value;
  this->get_TableNAME_SINFBASE_OBMEN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::get_TableID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableID_SINFBASE_OBMEN"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprInfBaseDispT<T>::get_TableID_SINFBASE_OBMEN(void)
{
  BSTR Value;
  this->get_TableID_SINFBASE_OBMEN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::get_TableGID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableGID_SINFBASE_OBMEN"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprInfBaseDispT<T>::get_TableGID_SINFBASE_OBMEN(void)
{
  BSTR Value;
  this->get_TableGID_SINFBASE_OBMEN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::get_ElementNAME_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementNAME_SINFBASE_OBMEN"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprInfBaseDispT<T>::get_ElementNAME_SINFBASE_OBMEN(void)
{
  BSTR Value;
  this->get_ElementNAME_SINFBASE_OBMEN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::set_ElementNAME_SINFBASE_OBMEN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementNAME_SINFBASE_OBMEN"), DISPID(215));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::get_ElementID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementID_SINFBASE_OBMEN"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprInfBaseDispT<T>::get_ElementID_SINFBASE_OBMEN(void)
{
  BSTR Value;
  this->get_ElementID_SINFBASE_OBMEN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::set_ElementID_SINFBASE_OBMEN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementID_SINFBASE_OBMEN"), DISPID(216));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::get_ElementGID_SINFBASE_OBMEN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementGID_SINFBASE_OBMEN"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprInfBaseDispT<T>::get_ElementGID_SINFBASE_OBMEN(void)
{
  BSTR Value;
  this->get_ElementGID_SINFBASE_OBMEN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprInfBaseDispT<T>::set_ElementGID_SINFBASE_OBMEN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementGID_SINFBASE_OBMEN"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprEd
// Interface: IOleDMSprEd
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprEdT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::OpenTable(BSTR id_nom/*[in]*/)
{
  return (*this)->OpenTable(id_nom);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::NewElement(BSTR id_nom/*[in]*/, int* result/*[out,retval]*/)
{
  return (*this)->NewElement(id_nom, result);
}

template <class T> int __fastcall
TCOMIOleDMSprEdT<T>::NewElement(BSTR id_nom/*[in]*/)
{
  int result;
  OLECHECK(this->NewElement(id_nom/*[in]*/, (int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::SaveElement(int* result/*[out,retval]*/)
{
  return (*this)->SaveElement(result);
}

template <class T> int __fastcall
TCOMIOleDMSprEdT<T>::SaveElement(void)
{
  int result;
  OLECHECK(this->SaveElement((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::FindEdPoSh(BSTR sh/*[in]*/, BSTR* result/*[out,retval]*/)
{
  return (*this)->FindEdPoSh(sh, result);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::FindEdPoSh(BSTR sh/*[in]*/)
{
  BSTR result = 0;
  OLECHECK(this->FindEdPoSh(sh/*[in]*/, (BSTR*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/)
{
  return (*this)->GetIdElement(gid, id);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR id = 0;
  OLECHECK(this->GetIdElement(gid/*[in]*/, (BSTR*)&id));
  return id;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  return (*this)->GetGidElement(id, gid);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::GetGidElement(BSTR id/*[in]*/)
{
  BSTR gid = 0;
  OLECHECK(this->GetGidElement(id/*[in]*/, (BSTR*)&gid));
  return gid;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEof(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprEdT<T>::get_TableEof(void)
{
  int Value;
  OLECHECK(this->get_TableEof((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_TableNAMEED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableNAMEED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_TableNAMEED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableNAMEED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_TableKFED(double* Value/*[out,retval]*/)
{
  return (*this)->get_TableKFED(Value);
}

template <class T> double __fastcall
TCOMIOleDMSprEdT<T>::get_TableKFED(void)
{
  double Value;
  OLECHECK(this->get_TableKFED((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_TableTSHED(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableTSHED(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprEdT<T>::get_TableTSHED(void)
{
  int Value;
  OLECHECK(this->get_TableTSHED((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_TableSHED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableSHED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_TableSHED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableSHED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_TableIDED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_TableIDED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_TableIDNOMED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDNOMED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_TableIDNOMED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDNOMED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_TableIDOKEIED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDOKEIED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_TableIDOKEIED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDOKEIED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_TableGID_SED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableGID_SED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_TableGID_SED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableGID_SED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_TableCODE_SED(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableCODE_SED(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprEdT<T>::get_TableCODE_SED(void)
{
  int Value;
  OLECHECK(this->get_TableCODE_SED((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_ElementNAMEED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementNAMEED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_ElementNAMEED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementNAMEED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_ElementNAMEED(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementNAMEED(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_ElementKFED(double* Value/*[out,retval]*/)
{
  return (*this)->get_ElementKFED(Value);
}

template <class T> double __fastcall
TCOMIOleDMSprEdT<T>::get_ElementKFED(void)
{
  double Value;
  OLECHECK(this->get_ElementKFED((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_ElementKFED(double Value/*[in]*/)
{
  return (*this)->set_ElementKFED(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_ElementTSHED(int* Value/*[out,retval]*/)
{
  return (*this)->get_ElementTSHED(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprEdT<T>::get_ElementTSHED(void)
{
  int Value;
  OLECHECK(this->get_ElementTSHED((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_ElementTSHED(int Value/*[in]*/)
{
  return (*this)->set_ElementTSHED(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_ElementSHED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementSHED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_ElementSHED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementSHED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_ElementSHED(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementSHED(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_ElementIDED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementIDED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_ElementIDED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementIDED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_ElementIDED(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementIDED(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_ElementIDOKEIED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementIDOKEIED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_ElementIDOKEIED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementIDOKEIED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_ElementIDOKEIED(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementIDOKEIED(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_ElementGID_SED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementGID_SED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_ElementGID_SED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementGID_SED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_ElementGID_SED(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementGID_SED(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_ElementCODE_SED(int* Value/*[out,retval]*/)
{
  return (*this)->get_ElementCODE_SED(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprEdT<T>::get_ElementCODE_SED(void)
{
  int Value;
  OLECHECK(this->get_ElementCODE_SED((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_ElementCODE_SED(int Value/*[in]*/)
{
  return (*this)->set_ElementCODE_SED(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::get_ElementNAMEOKEI(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementNAMEOKEI(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprEdT<T>::get_ElementNAMEOKEI(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementNAMEOKEI((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::set_ElementNAMEOKEI(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementNAMEOKEI(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  return (*this)->OpenElement(id, result);
}

template <class T> int __fastcall
TCOMIOleDMSprEdT<T>::OpenElement(BSTR id/*[in]*/)
{
  int result;
  OLECHECK(this->OpenElement(id/*[in]*/, (int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprEdT<T>::DeleteElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  return (*this)->DeleteElement(id, result);
}

template <class T> int __fastcall
TCOMIOleDMSprEdT<T>::DeleteElement(BSTR id/*[in]*/)
{
  int result;
  OLECHECK(this->DeleteElement(id/*[in]*/, (int*)&result));
  return result;
}

// *********************************************************************//
// DispIntf:  IOleDMSprEd
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D28F8AE3-3B91-49E0-BE35-1133F9362791}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprEdDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::OpenTable(BSTR id_nom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = id_nom /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::NewElement(BSTR id_nom/*[in]*/, int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewElement"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = id_nom /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprEdDispT<T>::NewElement(BSTR id_nom/*[in]*/)
{
  int result;
  this->NewElement(id_nom, (int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::SaveElement(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveElement"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprEdDispT<T>::SaveElement(void)
{
  int result;
  this->SaveElement((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::FindEdPoSh(BSTR sh/*[in]*/, BSTR* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindEdPoSh"), DISPID(208));
  TAutoArgs<1> _args;
  _args[1] = sh /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::FindEdPoSh(BSTR sh/*[in]*/)
{
  BSTR result;
  this->FindEdPoSh(sh, (BSTR*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdElement"), DISPID(209));
  TAutoArgs<1> _args;
  _args[1] = gid /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(id /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR id;
  this->GetIdElement(gid, (BSTR*)&id);
  return id;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetGidElement"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(gid /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::GetGidElement(BSTR id/*[in]*/)
{
  BSTR gid;
  this->GetGidElement(id, (BSTR*)&gid);
  return gid;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(211));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEof"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprEdDispT<T>::get_TableEof(void)
{
  int Value;
  this->get_TableEof((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_TableNAMEED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableNAMEED"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_TableNAMEED(void)
{
  BSTR Value;
  this->get_TableNAMEED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_TableKFED(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableKFED"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMSprEdDispT<T>::get_TableKFED(void)
{
  double Value;
  this->get_TableKFED((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_TableTSHED(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableTSHED"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprEdDispT<T>::get_TableTSHED(void)
{
  int Value;
  this->get_TableTSHED((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_TableSHED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableSHED"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_TableSHED(void)
{
  BSTR Value;
  this->get_TableSHED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_TableIDED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDED"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_TableIDED(void)
{
  BSTR Value;
  this->get_TableIDED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_TableIDNOMED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDNOMED"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_TableIDNOMED(void)
{
  BSTR Value;
  this->get_TableIDNOMED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_TableIDOKEIED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDOKEIED"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_TableIDOKEIED(void)
{
  BSTR Value;
  this->get_TableIDOKEIED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_TableGID_SED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableGID_SED"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_TableGID_SED(void)
{
  BSTR Value;
  this->get_TableGID_SED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_TableCODE_SED(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableCODE_SED"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprEdDispT<T>::get_TableCODE_SED(void)
{
  int Value;
  this->get_TableCODE_SED((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_ElementNAMEED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementNAMEED"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_ElementNAMEED(void)
{
  BSTR Value;
  this->get_ElementNAMEED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_ElementNAMEED(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementNAMEED"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_ElementKFED(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementKFED"), DISPID(224));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMSprEdDispT<T>::get_ElementKFED(void)
{
  double Value;
  this->get_ElementKFED((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_ElementKFED(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementKFED"), DISPID(224));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_ElementTSHED(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementTSHED"), DISPID(225));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprEdDispT<T>::get_ElementTSHED(void)
{
  int Value;
  this->get_ElementTSHED((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_ElementTSHED(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementTSHED"), DISPID(225));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_ElementSHED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementSHED"), DISPID(226));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_ElementSHED(void)
{
  BSTR Value;
  this->get_ElementSHED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_ElementSHED(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementSHED"), DISPID(226));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_ElementIDED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDED"), DISPID(227));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_ElementIDED(void)
{
  BSTR Value;
  this->get_ElementIDED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_ElementIDED(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDED"), DISPID(227));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_ElementIDOKEIED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDOKEIED"), DISPID(228));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_ElementIDOKEIED(void)
{
  BSTR Value;
  this->get_ElementIDOKEIED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_ElementIDOKEIED(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDOKEIED"), DISPID(228));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_ElementGID_SED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementGID_SED"), DISPID(229));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_ElementGID_SED(void)
{
  BSTR Value;
  this->get_ElementGID_SED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_ElementGID_SED(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementGID_SED"), DISPID(229));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_ElementCODE_SED(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementCODE_SED"), DISPID(230));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprEdDispT<T>::get_ElementCODE_SED(void)
{
  int Value;
  this->get_ElementCODE_SED((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_ElementCODE_SED(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementCODE_SED"), DISPID(230));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::get_ElementNAMEOKEI(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementNAMEOKEI"), DISPID(231));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprEdDispT<T>::get_ElementNAMEOKEI(void)
{
  BSTR Value;
  this->get_ElementNAMEOKEI((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::set_ElementNAMEOKEI(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementNAMEOKEI"), DISPID(231));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenElement"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprEdDispT<T>::OpenElement(BSTR id/*[in]*/)
{
  int result;
  this->OpenElement(id, (int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprEdDispT<T>::DeleteElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteElement"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprEdDispT<T>::DeleteElement(BSTR id/*[in]*/)
{
  int result;
  this->DeleteElement(id, (int*)&result);
  return result;
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprGrpNom
// Interface: IOleDMSprGrpNom
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprGrpNomT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprGrpNomT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::NewElement(BSTR id_grp/*[in]*/)
{
  return (*this)->NewElement(id_grp);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::SaveElement(int* result/*[out,retval]*/)
{
  return (*this)->SaveElement(result);
}

template <class T> int __fastcall
TCOMIOleDMSprGrpNomT<T>::SaveElement(void)
{
  int result;
  OLECHECK(this->SaveElement((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  return (*this)->OpenElement(id, result);
}

template <class T> int __fastcall
TCOMIOleDMSprGrpNomT<T>::OpenElement(BSTR id/*[in]*/)
{
  int result;
  OLECHECK(this->OpenElement(id/*[in]*/, (int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::DeleteElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  return (*this)->DeleteElement(id, result);
}

template <class T> int __fastcall
TCOMIOleDMSprGrpNomT<T>::DeleteElement(BSTR id/*[in]*/)
{
  int result;
  OLECHECK(this->DeleteElement(id/*[in]*/, (int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::OpenTable(void)
{
  return (*this)->OpenTable();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEof(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprGrpNomT<T>::get_TableEof(void)
{
  int Value;
  OLECHECK(this->get_TableEof((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/)
{
  return (*this)->GetIdElement(gid, id);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprGrpNomT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR id = 0;
  OLECHECK(this->GetIdElement(gid/*[in]*/, (BSTR*)&id));
  return id;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  return (*this)->GetGidElement(id, gid);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprGrpNomT<T>::GetGidElement(BSTR id/*[in]*/)
{
  BSTR gid = 0;
  OLECHECK(this->GetGidElement(id/*[in]*/, (BSTR*)&gid));
  return gid;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_TableIDGN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDGN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprGrpNomT<T>::get_TableIDGN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDGN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_TableIDGRPGN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDGRPGN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprGrpNomT<T>::get_TableIDGRPGN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDGRPGN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_TableNAMEGN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableNAMEGN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprGrpNomT<T>::get_TableNAMEGN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableNAMEGN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_TableGID_SGRPNOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableGID_SGRPNOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprGrpNomT<T>::get_TableGID_SGRPNOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableGID_SGRPNOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_ElementIDGN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementIDGN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprGrpNomT<T>::get_ElementIDGN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementIDGN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::set_ElementIDGN(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementIDGN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_ElementIDGRPGN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementIDGRPGN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprGrpNomT<T>::get_ElementIDGRPGN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementIDGRPGN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::set_ElementIDGRPGN(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementIDGRPGN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_ElementNAMEGN(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementNAMEGN(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprGrpNomT<T>::get_ElementNAMEGN(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementNAMEGN((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::set_ElementNAMEGN(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementNAMEGN(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::get_ElementGID_SGRPNOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementGID_SGRPNOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprGrpNomT<T>::get_ElementGID_SGRPNOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementGID_SGRPNOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprGrpNomT<T>::set_ElementGID_SGRPNOM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementGID_SGRPNOM(Value);
}

// *********************************************************************//
// DispIntf:  IOleDMSprGrpNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E00B40C2-1DED-4F6C-8D31-FA94C078691E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprGrpNomDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprGrpNomDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::NewElement(BSTR id_grp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewElement"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = id_grp /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::SaveElement(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveElement"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprGrpNomDispT<T>::SaveElement(void)
{
  int result;
  this->SaveElement((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenElement"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprGrpNomDispT<T>::OpenElement(BSTR id/*[in]*/)
{
  int result;
  this->OpenElement(id, (int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::DeleteElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteElement"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprGrpNomDispT<T>::DeleteElement(BSTR id/*[in]*/)
{
  int result;
  this->DeleteElement(id, (int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::OpenTable()
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(207));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(209));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEof"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprGrpNomDispT<T>::get_TableEof(void)
{
  int Value;
  this->get_TableEof((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdElement"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = gid /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(id /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprGrpNomDispT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR id;
  this->GetIdElement(gid, (BSTR*)&id);
  return id;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetGidElement"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(gid /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprGrpNomDispT<T>::GetGidElement(BSTR id/*[in]*/)
{
  BSTR gid;
  this->GetGidElement(id, (BSTR*)&gid);
  return gid;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_TableIDGN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDGN"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprGrpNomDispT<T>::get_TableIDGN(void)
{
  BSTR Value;
  this->get_TableIDGN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_TableIDGRPGN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDGRPGN"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprGrpNomDispT<T>::get_TableIDGRPGN(void)
{
  BSTR Value;
  this->get_TableIDGRPGN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_TableNAMEGN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableNAMEGN"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprGrpNomDispT<T>::get_TableNAMEGN(void)
{
  BSTR Value;
  this->get_TableNAMEGN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_TableGID_SGRPNOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableGID_SGRPNOM"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprGrpNomDispT<T>::get_TableGID_SGRPNOM(void)
{
  BSTR Value;
  this->get_TableGID_SGRPNOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_ElementIDGN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDGN"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprGrpNomDispT<T>::get_ElementIDGN(void)
{
  BSTR Value;
  this->get_ElementIDGN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::set_ElementIDGN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDGN"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_ElementIDGRPGN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDGRPGN"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprGrpNomDispT<T>::get_ElementIDGRPGN(void)
{
  BSTR Value;
  this->get_ElementIDGRPGN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::set_ElementIDGRPGN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDGRPGN"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_ElementNAMEGN(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementNAMEGN"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprGrpNomDispT<T>::get_ElementNAMEGN(void)
{
  BSTR Value;
  this->get_ElementNAMEGN((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::set_ElementNAMEGN(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementNAMEGN"), DISPID(219));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::get_ElementGID_SGRPNOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementGID_SGRPNOM"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprGrpNomDispT<T>::get_ElementGID_SGRPNOM(void)
{
  BSTR Value;
  this->get_ElementGID_SGRPNOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprGrpNomDispT<T>::set_ElementGID_SGRPNOM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementGID_SGRPNOM"), DISPID(220));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprNom
// Interface: IOleDMSprNom
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprNomT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::NewElement(BSTR id_grp/*[in]*/, int* result/*[out,retval]*/)
{
  return (*this)->NewElement(id_grp, result);
}

template <class T> int __fastcall
TCOMIOleDMSprNomT<T>::NewElement(BSTR id_grp/*[in]*/)
{
  int result;
  OLECHECK(this->NewElement(id_grp/*[in]*/, (int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::SaveElement(int* result/*[out,retval]*/)
{
  return (*this)->SaveElement(result);
}

template <class T> int __fastcall
TCOMIOleDMSprNomT<T>::SaveElement(void)
{
  int result;
  OLECHECK(this->SaveElement((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  return (*this)->OpenElement(id, result);
}

template <class T> int __fastcall
TCOMIOleDMSprNomT<T>::OpenElement(BSTR id/*[in]*/)
{
  int result;
  OLECHECK(this->OpenElement(id/*[in]*/, (int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::DeleteElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  return (*this)->DeleteElement(id, result);
}

template <class T> int __fastcall
TCOMIOleDMSprNomT<T>::DeleteElement(BSTR id/*[in]*/)
{
  int result;
  OLECHECK(this->DeleteElement(id/*[in]*/, (int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::OpenTable(BSTR id_grp/*[in]*/, int all/*[in]*/)
{
  return (*this)->OpenTable(id_grp, all);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEof(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprNomT<T>::get_TableEof(void)
{
  int Value;
  OLECHECK(this->get_TableEof((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/)
{
  return (*this)->GetIdElement(gid, id);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR id = 0;
  OLECHECK(this->GetIdElement(gid/*[in]*/, (BSTR*)&id));
  return id;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  return (*this)->GetGidElement(id, gid);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::GetGidElement(BSTR id/*[in]*/)
{
  BSTR gid = 0;
  OLECHECK(this->GetGidElement(id/*[in]*/, (BSTR*)&gid));
  return gid;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_TableCODENOM(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableCODENOM(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprNomT<T>::get_TableCODENOM(void)
{
  int Value;
  OLECHECK(this->get_TableCODENOM((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_TableTNOM(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableTNOM(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprNomT<T>::get_TableTNOM(void)
{
  int Value;
  OLECHECK(this->get_TableTNOM((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_TableNAMENOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableNAMENOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_TableNAMENOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableNAMENOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_TableNAMEED(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableNAMEED(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_TableNAMEED(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableNAMEED((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_TableIDNOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDNOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_TableIDNOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDNOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_TableIDGRPNOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDGRPNOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_TableIDGRPNOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDGRPNOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_ElementTNOM(int* Value/*[out,retval]*/)
{
  return (*this)->get_ElementTNOM(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprNomT<T>::get_ElementTNOM(void)
{
  int Value;
  OLECHECK(this->get_ElementTNOM((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_ElementTNOM(int Value/*[in]*/)
{
  return (*this)->set_ElementTNOM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_ElementCODENOM(int* Value/*[out,retval]*/)
{
  return (*this)->get_ElementCODENOM(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprNomT<T>::get_ElementCODENOM(void)
{
  int Value;
  OLECHECK(this->get_ElementCODENOM((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_ElementCODENOM(int Value/*[in]*/)
{
  return (*this)->set_ElementCODENOM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_ElementNAMENOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementNAMENOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_ElementNAMENOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementNAMENOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_ElementNAMENOM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementNAMENOM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_ElementFNAMENOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementFNAMENOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_ElementFNAMENOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementFNAMENOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_ElementFNAMENOM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementFNAMENOM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_ElementKRNAMENOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementKRNAMENOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_ElementKRNAMENOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementKRNAMENOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_ElementKRNAMENOM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementKRNAMENOM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_ElementARTNOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementARTNOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_ElementARTNOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementARTNOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_ElementARTNOM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementARTNOM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_ElementSTNDSNOM(double* Value/*[out,retval]*/)
{
  return (*this)->get_ElementSTNDSNOM(Value);
}

template <class T> double __fastcall
TCOMIOleDMSprNomT<T>::get_ElementSTNDSNOM(void)
{
  double Value;
  OLECHECK(this->get_ElementSTNDSNOM((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_ElementSTNDSNOM(double Value/*[in]*/)
{
  return (*this)->set_ElementSTNDSNOM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_ElementIDBASEDNOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementIDBASEDNOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_ElementIDBASEDNOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementIDBASEDNOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_ElementIDBASEDNOM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementIDBASEDNOM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_ElementIDOSNEDNOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementIDOSNEDNOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_ElementIDOSNEDNOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementIDOSNEDNOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_ElementIDOSNEDNOM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementIDOSNEDNOM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_ElementIDNOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementIDNOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_ElementIDNOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementIDNOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_ElementIDNOM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementIDNOM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_ElementIDGRPNOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementIDGRPNOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_ElementIDGRPNOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementIDGRPNOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_ElementIDGRPNOM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementIDGRPNOM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_ElementIDFIRMNOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementIDFIRMNOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_ElementIDFIRMNOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementIDFIRMNOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_ElementIDFIRMNOM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementIDFIRMNOM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_ElementIDCOUNTRYNOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementIDCOUNTRYNOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_ElementIDCOUNTRYNOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementIDCOUNTRYNOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_ElementIDCOUNTRYNOM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementIDCOUNTRYNOM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_ElementGID_SNOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementGID_SNOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_ElementGID_SNOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementGID_SNOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_ElementGID_SNOM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementGID_SNOM(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::get_ElementIDVID_SNOM(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementIDVID_SNOM(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprNomT<T>::get_ElementIDVID_SNOM(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementIDVID_SNOM((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprNomT<T>::set_ElementIDVID_SNOM(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementIDVID_SNOM(Value);
}

// *********************************************************************//
// DispIntf:  IOleDMSprNom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5023B6C6-594F-4337-B907-E71269058E57}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprNomDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::NewElement(BSTR id_grp/*[in]*/, int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewElement"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = id_grp /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprNomDispT<T>::NewElement(BSTR id_grp/*[in]*/)
{
  int result;
  this->NewElement(id_grp, (int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::SaveElement(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveElement"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprNomDispT<T>::SaveElement(void)
{
  int result;
  this->SaveElement((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenElement"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprNomDispT<T>::OpenElement(BSTR id/*[in]*/)
{
  int result;
  this->OpenElement(id, (int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::DeleteElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteElement"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprNomDispT<T>::DeleteElement(BSTR id/*[in]*/)
{
  int result;
  this->DeleteElement(id, (int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::OpenTable(BSTR id_grp/*[in]*/, int all/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = id_grp /*[VT_BSTR:0]*/;
  _args[2] = all /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(209));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEof"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprNomDispT<T>::get_TableEof(void)
{
  int Value;
  this->get_TableEof((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdElement"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = gid /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(id /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR id;
  this->GetIdElement(gid, (BSTR*)&id);
  return id;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetGidElement"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(gid /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::GetGidElement(BSTR id/*[in]*/)
{
  BSTR gid;
  this->GetGidElement(id, (BSTR*)&gid);
  return gid;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_TableCODENOM(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableCODENOM"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprNomDispT<T>::get_TableCODENOM(void)
{
  int Value;
  this->get_TableCODENOM((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_TableTNOM(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableTNOM"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprNomDispT<T>::get_TableTNOM(void)
{
  int Value;
  this->get_TableTNOM((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_TableNAMENOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableNAMENOM"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_TableNAMENOM(void)
{
  BSTR Value;
  this->get_TableNAMENOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_TableNAMEED(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableNAMEED"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_TableNAMEED(void)
{
  BSTR Value;
  this->get_TableNAMEED((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_TableIDNOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDNOM"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_TableIDNOM(void)
{
  BSTR Value;
  this->get_TableIDNOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_TableIDGRPNOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDGRPNOM"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_TableIDGRPNOM(void)
{
  BSTR Value;
  this->get_TableIDGRPNOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_ElementTNOM(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementTNOM"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprNomDispT<T>::get_ElementTNOM(void)
{
  int Value;
  this->get_ElementTNOM((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_ElementTNOM(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementTNOM"), DISPID(219));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_ElementCODENOM(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementCODENOM"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprNomDispT<T>::get_ElementCODENOM(void)
{
  int Value;
  this->get_ElementCODENOM((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_ElementCODENOM(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementCODENOM"), DISPID(220));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_ElementNAMENOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementNAMENOM"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_ElementNAMENOM(void)
{
  BSTR Value;
  this->get_ElementNAMENOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_ElementNAMENOM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementNAMENOM"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_ElementFNAMENOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementFNAMENOM"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_ElementFNAMENOM(void)
{
  BSTR Value;
  this->get_ElementFNAMENOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_ElementFNAMENOM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementFNAMENOM"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_ElementKRNAMENOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementKRNAMENOM"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_ElementKRNAMENOM(void)
{
  BSTR Value;
  this->get_ElementKRNAMENOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_ElementKRNAMENOM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementKRNAMENOM"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_ElementARTNOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementARTNOM"), DISPID(224));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_ElementARTNOM(void)
{
  BSTR Value;
  this->get_ElementARTNOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_ElementARTNOM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementARTNOM"), DISPID(224));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_ElementSTNDSNOM(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementSTNDSNOM"), DISPID(225));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMSprNomDispT<T>::get_ElementSTNDSNOM(void)
{
  double Value;
  this->get_ElementSTNDSNOM((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_ElementSTNDSNOM(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementSTNDSNOM"), DISPID(225));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_ElementIDBASEDNOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDBASEDNOM"), DISPID(226));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_ElementIDBASEDNOM(void)
{
  BSTR Value;
  this->get_ElementIDBASEDNOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_ElementIDBASEDNOM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDBASEDNOM"), DISPID(226));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_ElementIDOSNEDNOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDOSNEDNOM"), DISPID(227));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_ElementIDOSNEDNOM(void)
{
  BSTR Value;
  this->get_ElementIDOSNEDNOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_ElementIDOSNEDNOM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDOSNEDNOM"), DISPID(227));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_ElementIDNOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDNOM"), DISPID(228));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_ElementIDNOM(void)
{
  BSTR Value;
  this->get_ElementIDNOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_ElementIDNOM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDNOM"), DISPID(228));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_ElementIDGRPNOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDGRPNOM"), DISPID(229));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_ElementIDGRPNOM(void)
{
  BSTR Value;
  this->get_ElementIDGRPNOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_ElementIDGRPNOM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDGRPNOM"), DISPID(229));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_ElementIDFIRMNOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDFIRMNOM"), DISPID(230));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_ElementIDFIRMNOM(void)
{
  BSTR Value;
  this->get_ElementIDFIRMNOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_ElementIDFIRMNOM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDFIRMNOM"), DISPID(230));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_ElementIDCOUNTRYNOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDCOUNTRYNOM"), DISPID(231));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_ElementIDCOUNTRYNOM(void)
{
  BSTR Value;
  this->get_ElementIDCOUNTRYNOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_ElementIDCOUNTRYNOM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDCOUNTRYNOM"), DISPID(231));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_ElementGID_SNOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementGID_SNOM"), DISPID(232));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_ElementGID_SNOM(void)
{
  BSTR Value;
  this->get_ElementGID_SNOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_ElementGID_SNOM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementGID_SNOM"), DISPID(232));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::get_ElementIDVID_SNOM(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDVID_SNOM"), DISPID(233));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprNomDispT<T>::get_ElementIDVID_SNOM(void)
{
  BSTR Value;
  this->get_ElementIDVID_SNOM((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprNomDispT<T>::set_ElementIDVID_SNOM(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDVID_SNOM"), DISPID(233));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprTypePrice
// Interface: IOleDMSprTypePrice
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprTypePriceT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprTypePriceT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::NewElement(void)
{
  return (*this)->NewElement();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::SaveElement(int* result/*[out,retval]*/)
{
  return (*this)->SaveElement(result);
}

template <class T> int __fastcall
TCOMIOleDMSprTypePriceT<T>::SaveElement(void)
{
  int result;
  OLECHECK(this->SaveElement((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  return (*this)->OpenElement(id, result);
}

template <class T> int __fastcall
TCOMIOleDMSprTypePriceT<T>::OpenElement(BSTR id/*[in]*/)
{
  int result;
  OLECHECK(this->OpenElement(id/*[in]*/, (int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::DeleteElement(BSTR id/*[in]*/)
{
  return (*this)->DeleteElement(id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::OpenTable(void)
{
  return (*this)->OpenTable();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEof(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprTypePriceT<T>::get_TableEof(void)
{
  int Value;
  OLECHECK(this->get_TableEof((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/)
{
  return (*this)->GetIdElement(gid, id);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprTypePriceT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR id = 0;
  OLECHECK(this->GetIdElement(gid/*[in]*/, (BSTR*)&id));
  return id;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  return (*this)->GetGidElement(id, gid);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprTypePriceT<T>::GetGidElement(BSTR id/*[in]*/)
{
  BSTR gid = 0;
  OLECHECK(this->GetGidElement(id/*[in]*/, (BSTR*)&gid));
  return gid;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::get_TableNAME_TPRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableNAME_TPRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprTypePriceT<T>::get_TableNAME_TPRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableNAME_TPRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::get_TableID_TPRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableID_TPRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprTypePriceT<T>::get_TableID_TPRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableID_TPRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::get_TableGID_STPRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableGID_STPRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprTypePriceT<T>::get_TableGID_STPRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableGID_STPRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::get_ElementNAME_TPRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementNAME_TPRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprTypePriceT<T>::get_ElementNAME_TPRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementNAME_TPRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::set_ElementNAME_TPRICE(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementNAME_TPRICE(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::get_ElementID_TPRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementID_TPRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprTypePriceT<T>::get_ElementID_TPRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementID_TPRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::set_ElementID_TPRICE(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementID_TPRICE(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::get_ElementGID_STPRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementGID_STPRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprTypePriceT<T>::get_ElementGID_STPRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementGID_STPRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprTypePriceT<T>::set_ElementGID_STPRICE(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementGID_STPRICE(Value);
}

// *********************************************************************//
// DispIntf:  IOleDMSprTypePrice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DA8FD0DF-AD0F-411A-B455-D9E2EC4DF13D}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprTypePriceDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprTypePriceDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::NewElement()
{
  _TDispID _dispid(*this, OLETEXT("NewElement"), DISPID(203));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::SaveElement(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveElement"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprTypePriceDispT<T>::SaveElement(void)
{
  int result;
  this->SaveElement((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenElement"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprTypePriceDispT<T>::OpenElement(BSTR id/*[in]*/)
{
  int result;
  this->OpenElement(id, (int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::DeleteElement(BSTR id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteElement"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::OpenTable()
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(207));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(209));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEof"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprTypePriceDispT<T>::get_TableEof(void)
{
  int Value;
  this->get_TableEof((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdElement"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = gid /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(id /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprTypePriceDispT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR id;
  this->GetIdElement(gid, (BSTR*)&id);
  return id;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetGidElement"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(gid /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprTypePriceDispT<T>::GetGidElement(BSTR id/*[in]*/)
{
  BSTR gid;
  this->GetGidElement(id, (BSTR*)&gid);
  return gid;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::get_TableNAME_TPRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableNAME_TPRICE"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprTypePriceDispT<T>::get_TableNAME_TPRICE(void)
{
  BSTR Value;
  this->get_TableNAME_TPRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::get_TableID_TPRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableID_TPRICE"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprTypePriceDispT<T>::get_TableID_TPRICE(void)
{
  BSTR Value;
  this->get_TableID_TPRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::get_TableGID_STPRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableGID_STPRICE"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprTypePriceDispT<T>::get_TableGID_STPRICE(void)
{
  BSTR Value;
  this->get_TableGID_STPRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::get_ElementNAME_TPRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementNAME_TPRICE"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprTypePriceDispT<T>::get_ElementNAME_TPRICE(void)
{
  BSTR Value;
  this->get_ElementNAME_TPRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::set_ElementNAME_TPRICE(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementNAME_TPRICE"), DISPID(216));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::get_ElementID_TPRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementID_TPRICE"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprTypePriceDispT<T>::get_ElementID_TPRICE(void)
{
  BSTR Value;
  this->get_ElementID_TPRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::set_ElementID_TPRICE(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementID_TPRICE"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::get_ElementGID_STPRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementGID_STPRICE"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprTypePriceDispT<T>::get_ElementGID_STPRICE(void)
{
  BSTR Value;
  this->get_ElementGID_STPRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprTypePriceDispT<T>::set_ElementGID_STPRICE(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementGID_STPRICE"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMSprPrice
// Interface: IOleDMSprPrice
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprPriceT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::NewElement(BSTR id_nom/*[in]*/, BSTR id_type_price/*[in]*/)
{
  return (*this)->NewElement(id_nom, id_type_price);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::SaveElement(int* result/*[out,retval]*/)
{
  return (*this)->SaveElement(result);
}

template <class T> int __fastcall
TCOMIOleDMSprPriceT<T>::SaveElement(void)
{
  int result;
  OLECHECK(this->SaveElement((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  return (*this)->OpenElement(id, result);
}

template <class T> int __fastcall
TCOMIOleDMSprPriceT<T>::OpenElement(BSTR id/*[in]*/)
{
  int result;
  OLECHECK(this->OpenElement(id/*[in]*/, (int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::DeleteElement(BSTR id/*[in]*/)
{
  return (*this)->DeleteElement(id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::OpenTable(BSTR id_nom/*[in]*/)
{
  return (*this)->OpenTable(id_nom);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::TableFirst(void)
{
  return (*this)->TableFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::TableNext(void)
{
  return (*this)->TableNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  return (*this)->get_TableEof(Value);
}

template <class T> int __fastcall
TCOMIOleDMSprPriceT<T>::get_TableEof(void)
{
  int Value;
  OLECHECK(this->get_TableEof((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/)
{
  return (*this)->GetIdElement(gid, id);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR id = 0;
  OLECHECK(this->GetIdElement(gid/*[in]*/, (BSTR*)&id));
  return id;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  return (*this)->GetGidElement(id, gid);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::GetGidElement(BSTR id/*[in]*/)
{
  BSTR gid = 0;
  OLECHECK(this->GetGidElement(id/*[in]*/, (BSTR*)&gid));
  return gid;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_TableNAME_TPRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableNAME_TPRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::get_TableNAME_TPRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableNAME_TPRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_TableID_PRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableID_PRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::get_TableID_PRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableID_PRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_TableIDNOM_PRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDNOM_PRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::get_TableIDNOM_PRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDNOM_PRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_TableIDTYPE_PRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableIDTYPE_PRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::get_TableIDTYPE_PRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableIDTYPE_PRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_TableGID_SPRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TableGID_SPRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::get_TableGID_SPRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TableGID_SPRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_ElementZNACH_PRICE(double* Value/*[out,retval]*/)
{
  return (*this)->get_ElementZNACH_PRICE(Value);
}

template <class T> double __fastcall
TCOMIOleDMSprPriceT<T>::get_ElementZNACH_PRICE(void)
{
  double Value;
  OLECHECK(this->get_ElementZNACH_PRICE((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::set_ElementZNACH_PRICE(double Value/*[in]*/)
{
  return (*this)->set_ElementZNACH_PRICE(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_ElementID_PRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementID_PRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::get_ElementID_PRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementID_PRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::set_ElementID_PRICE(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementID_PRICE(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_ElementIDNOM_PRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementIDNOM_PRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::get_ElementIDNOM_PRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementIDNOM_PRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::set_ElementIDNOM_PRICE(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementIDNOM_PRICE(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_ElementIDTYPE_PRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementIDTYPE_PRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::get_ElementIDTYPE_PRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementIDTYPE_PRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::set_ElementIDTYPE_PRICE(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementIDTYPE_PRICE(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_ElementGID_SPRICE(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ElementGID_SPRICE(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::get_ElementGID_SPRICE(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ElementGID_SPRICE((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::set_ElementGID_SPRICE(BSTR Value/*[in]*/)
{
  return (*this)->set_ElementGID_SPRICE(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::FindElement(BSTR id_type_price/*[in]*/, BSTR id_nom/*[in]*/, 
                                    BSTR* result/*[out,retval]*/)
{
  return (*this)->FindElement(id_type_price, id_nom, result);
}

template <class T> BSTR __fastcall
TCOMIOleDMSprPriceT<T>::FindElement(BSTR id_type_price/*[in]*/, BSTR id_nom/*[in]*/)
{
  BSTR result = 0;
  OLECHECK(this->FindElement(id_type_price/*[in]*/, id_nom/*[in]*/, (BSTR*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMSprPriceT<T>::get_TableZNACH_PRICE(double* Value/*[out,retval]*/)
{
  return (*this)->get_TableZNACH_PRICE(Value);
}

template <class T> double __fastcall
TCOMIOleDMSprPriceT<T>::get_TableZNACH_PRICE(void)
{
  double Value;
  OLECHECK(this->get_TableZNACH_PRICE((double*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IOleDMSprPrice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8FAC9484-DAC5-4142-B381-BB4AAFA0ECF8}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprPriceDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::NewElement(BSTR id_nom/*[in]*/, BSTR id_type_price/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewElement"), DISPID(203));
  TAutoArgs<2> _args;
  _args[1] = id_nom /*[VT_BSTR:0]*/;
  _args[2] = id_type_price /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::SaveElement(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveElement"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprPriceDispT<T>::SaveElement(void)
{
  int result;
  this->SaveElement((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::OpenElement(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenElement"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprPriceDispT<T>::OpenElement(BSTR id/*[in]*/)
{
  int result;
  this->OpenElement(id, (int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::DeleteElement(BSTR id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteElement"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::OpenTable(BSTR id_nom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = id_nom /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::TableFirst()
{
  _TDispID _dispid(*this, OLETEXT("TableFirst"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::TableNext()
{
  _TDispID _dispid(*this, OLETEXT("TableNext"), DISPID(209));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_TableEof(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableEof"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMSprPriceDispT<T>::get_TableEof(void)
{
  int Value;
  this->get_TableEof((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::GetIdElement(BSTR gid/*[in]*/, BSTR* id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdElement"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = gid /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(id /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::GetIdElement(BSTR gid/*[in]*/)
{
  BSTR id;
  this->GetIdElement(gid, (BSTR*)&id);
  return id;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::GetGidElement(BSTR id/*[in]*/, BSTR* gid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetGidElement"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(gid /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::GetGidElement(BSTR id/*[in]*/)
{
  BSTR gid;
  this->GetGidElement(id, (BSTR*)&gid);
  return gid;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_TableNAME_TPRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableNAME_TPRICE"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::get_TableNAME_TPRICE(void)
{
  BSTR Value;
  this->get_TableNAME_TPRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_TableID_PRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableID_PRICE"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::get_TableID_PRICE(void)
{
  BSTR Value;
  this->get_TableID_PRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_TableIDNOM_PRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDNOM_PRICE"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::get_TableIDNOM_PRICE(void)
{
  BSTR Value;
  this->get_TableIDNOM_PRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_TableIDTYPE_PRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableIDTYPE_PRICE"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::get_TableIDTYPE_PRICE(void)
{
  BSTR Value;
  this->get_TableIDTYPE_PRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_TableGID_SPRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableGID_SPRICE"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::get_TableGID_SPRICE(void)
{
  BSTR Value;
  this->get_TableGID_SPRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_ElementZNACH_PRICE(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementZNACH_PRICE"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMSprPriceDispT<T>::get_ElementZNACH_PRICE(void)
{
  double Value;
  this->get_ElementZNACH_PRICE((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::set_ElementZNACH_PRICE(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementZNACH_PRICE"), DISPID(219));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_ElementID_PRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementID_PRICE"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::get_ElementID_PRICE(void)
{
  BSTR Value;
  this->get_ElementID_PRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::set_ElementID_PRICE(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementID_PRICE"), DISPID(220));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_ElementIDNOM_PRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDNOM_PRICE"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::get_ElementIDNOM_PRICE(void)
{
  BSTR Value;
  this->get_ElementIDNOM_PRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::set_ElementIDNOM_PRICE(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDNOM_PRICE"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_ElementIDTYPE_PRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDTYPE_PRICE"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::get_ElementIDTYPE_PRICE(void)
{
  BSTR Value;
  this->get_ElementIDTYPE_PRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::set_ElementIDTYPE_PRICE(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementIDTYPE_PRICE"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_ElementGID_SPRICE(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementGID_SPRICE"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::get_ElementGID_SPRICE(void)
{
  BSTR Value;
  this->get_ElementGID_SPRICE((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::set_ElementGID_SPRICE(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementGID_SPRICE"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::FindElement(BSTR id_type_price/*[in]*/, BSTR id_nom/*[in]*/, 
                                    BSTR* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindElement"), DISPID(224));
  TAutoArgs<2> _args;
  _args[1] = id_type_price /*[VT_BSTR:0]*/;
  _args[2] = id_nom /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMSprPriceDispT<T>::FindElement(BSTR id_type_price/*[in]*/, BSTR id_nom/*[in]*/)
{
  BSTR result;
  this->FindElement(id_type_price, id_nom, (BSTR*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMSprPriceDispT<T>::get_TableZNACH_PRICE(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableZNACH_PRICE"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMSprPriceDispT<T>::get_TableZNACH_PRICE(void)
{
  double Value;
  this->get_TableZNACH_PRICE((double*)&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMIOleDMDocReal
// Interface: IOleDMDocReal
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  return (*this)->get_CodeError(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocRealT<T>::get_CodeError(void)
{
  int Value;
  OLECHECK(this->get_CodeError((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_TextError(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_TextError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_TextError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::NewDoc(void)
{
  return (*this)->NewDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::OpenDoc(BSTR id/*[in]*/)
{
  return (*this)->OpenDoc(id);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::SaveDoc(int* result/*[out,retval]*/)
{
  return (*this)->SaveDoc(result);
}

template <class T> int __fastcall
TCOMIOleDMDocRealT<T>::SaveDoc(void)
{
  int result;
  OLECHECK(this->SaveDoc((int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::CloseDoc(void)
{
  return (*this)->CloseDoc();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::DeleteDoc(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  return (*this)->DeleteDoc(id, result);
}

template <class T> int __fastcall
TCOMIOleDMDocRealT<T>::DeleteDoc(BSTR id/*[in]*/)
{
  int result;
  OLECHECK(this->DeleteDoc(id/*[in]*/, (int*)&result));
  return result;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::DocTFirst(void)
{
  return (*this)->DocTFirst();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::DocTNext(void)
{
  return (*this)->DocTNext();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTEof(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocTEof(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocRealT<T>::get_DocTEof(void)
{
  int Value;
  OLECHECK(this->get_DocTEof((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::GetIdDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/, 
                                BSTR* id/*[out,retval]*/)
{
  return (*this)->GetIdDoc(number_doc, date_doc, id);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::GetIdDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/)
{
  BSTR id = 0;
  OLECHECK(this->GetIdDoc(number_doc/*[in]*/, date_doc/*[in]*/, (BSTR*)&id));
  return id;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllPOSDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllPOSDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllPOSDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllPOSDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllPOSDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllTDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllTDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllTDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllTDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllTDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllTDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllNUMDOC(int* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllNUMDOC(Value);
}

template <class T> int __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllNUMDOC(void)
{
  int Value;
  OLECHECK(this->get_DocAllNUMDOC((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllNUMDOC(int Value/*[in]*/)
{
  return (*this)->set_DocAllNUMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllSUMDOC(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllSUMDOC(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllSUMDOC(void)
{
  double Value;
  OLECHECK(this->get_DocAllSUMDOC((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllSUMDOC(double Value/*[in]*/)
{
  return (*this)->set_DocAllSUMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDFIRMDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDFIRMDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDFIRMDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllIDFIRMDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDFIRMDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDSKLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDSKLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDSKLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllIDSKLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDSKLDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDKLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDKLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDKLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllIDKLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDKLDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocAllIDBASE_GALLDOC(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocAllIDBASE_GALLDOC(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/)
{
  return (*this)->set_DocAllIDBASE_GALLDOC(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocPRIMREA(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocPRIMREA(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocPRIMREA(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocPRIMREA((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocPRIMREA(BSTR Value/*[in]*/)
{
  return (*this)->set_DocPRIMREA(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocIDREA(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDREA(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocIDREA(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDREA((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocIDREA(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDREA(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocIDDOCREA(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDDOCREA(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocIDDOCREA(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDDOCREA((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocIDDOCREA(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDDOCREA(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocIDTPRICEREA(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDTPRICEREA(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocIDTPRICEREA(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDTPRICEREA((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocIDTPRICEREA(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDTPRICEREA(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocIDGRPOLREA(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDGRPOLREA(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocIDGRPOLREA(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDGRPOLREA((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocIDGRPOLREA(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDGRPOLREA(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocIDBSCHETREA(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocIDBSCHETREA(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocIDBSCHETREA(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocIDBSCHETREA((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocIDBSCHETREA(BSTR Value/*[in]*/)
{
  return (*this)->set_DocIDBSCHETREA(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTIDREAT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDREAT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocTIDREAT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDREAT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocTIDREAT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDREAT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTIDDOCREAT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDDOCREAT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocTIDDOCREAT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDDOCREAT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocTIDDOCREAT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDDOCREAT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTIDNOMREAT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDNOMREAT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocTIDNOMREAT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDNOMREAT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocTIDNOMREAT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDNOMREAT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTIDEDREAT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_DocTIDEDREAT(Value);
}

template <class T> BSTR __fastcall
TCOMIOleDMDocRealT<T>::get_DocTIDEDREAT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_DocTIDEDREAT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocTIDEDREAT(BSTR Value/*[in]*/)
{
  return (*this)->set_DocTIDEDREAT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTKOLREAT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTKOLREAT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRealT<T>::get_DocTKOLREAT(void)
{
  double Value;
  OLECHECK(this->get_DocTKOLREAT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocTKOLREAT(double Value/*[in]*/)
{
  return (*this)->set_DocTKOLREAT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTKFREAT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTKFREAT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRealT<T>::get_DocTKFREAT(void)
{
  double Value;
  OLECHECK(this->get_DocTKFREAT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocTKFREAT(double Value/*[in]*/)
{
  return (*this)->set_DocTKFREAT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTPRICEREAT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTPRICEREAT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRealT<T>::get_DocTPRICEREAT(void)
{
  double Value;
  OLECHECK(this->get_DocTPRICEREAT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocTPRICEREAT(double Value/*[in]*/)
{
  return (*this)->set_DocTPRICEREAT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::get_DocTSUMREAT(double* Value/*[out,retval]*/)
{
  return (*this)->get_DocTSUMREAT(Value);
}

template <class T> double __fastcall
TCOMIOleDMDocRealT<T>::get_DocTSUMREAT(void)
{
  double Value;
  OLECHECK(this->get_DocTSUMREAT((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::set_DocTSUMREAT(double Value/*[in]*/)
{
  return (*this)->set_DocTSUMREAT(Value);
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::DocTAppend(void)
{
  return (*this)->DocTAppend();
}

template <class T> HRESULT __fastcall
TCOMIOleDMDocRealT<T>::DocTDelete(void)
{
  return (*this)->DocTDelete();
}

// *********************************************************************//
// DispIntf:  IOleDMDocReal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C03B1E3C-DE78-4569-9A1D-A9C348DD9687}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_CodeError(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeError"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocRealDispT<T>::get_CodeError(void)
{
  int Value;
  this->get_CodeError((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_TextError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextError"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_TextError(void)
{
  BSTR Value;
  this->get_TextError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::NewDoc()
{
  _TDispID _dispid(*this, OLETEXT("NewDoc"), DISPID(203));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::OpenDoc(BSTR id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDoc"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::SaveDoc(int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveDoc"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocRealDispT<T>::SaveDoc(void)
{
  int result;
  this->SaveDoc((int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::CloseDoc()
{
  _TDispID _dispid(*this, OLETEXT("CloseDoc"), DISPID(206));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::DeleteDoc(BSTR id/*[in]*/, int* result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteDoc"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(result /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocRealDispT<T>::DeleteDoc(BSTR id/*[in]*/)
{
  int result;
  this->DeleteDoc(id, (int*)&result);
  return result;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::DocTFirst()
{
  _TDispID _dispid(*this, OLETEXT("DocTFirst"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::DocTNext()
{
  _TDispID _dispid(*this, OLETEXT("DocTNext"), DISPID(209));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTEof(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTEof"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocRealDispT<T>::get_DocTEof(void)
{
  int Value;
  this->get_DocTEof((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::GetIdDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/, 
                                BSTR* id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIdDoc"), DISPID(211));
  TAutoArgs<2> _args;
  _args[1] = number_doc /*[VT_INT:0]*/;
  _args[2] = date_doc /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(id /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::GetIdDoc(int number_doc/*[in]*/, BSTR date_doc/*[in]*/)
{
  BSTR id;
  this->GetIdDoc(number_doc, date_doc, (BSTR*)&id);
  return id;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllPOSDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPOSDOC"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocAllPOSDOC(void)
{
  BSTR Value;
  this->get_DocAllPOSDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllPOSDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllPOSDOC"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllTDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllTDOC"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocAllTDOC(void)
{
  BSTR Value;
  this->get_DocAllTDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllTDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllTDOC"), DISPID(213));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllNUMDOC(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNUMDOC"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IOleDMDocRealDispT<T>::get_DocAllNUMDOC(void)
{
  int Value;
  this->get_DocAllNUMDOC((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllNUMDOC(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllNUMDOC"), DISPID(214));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllSUMDOC(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllSUMDOC"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRealDispT<T>::get_DocAllSUMDOC(void)
{
  double Value;
  this->get_DocAllSUMDOC((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllSUMDOC(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllSUMDOC"), DISPID(215));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDDOC"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDDOC(void)
{
  BSTR Value;
  this->get_DocAllIDDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDFIRMDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDFIRMDOC"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDFIRMDOC(void)
{
  BSTR Value;
  this->get_DocAllIDFIRMDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllIDFIRMDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDFIRMDOC"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDSKLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDSKLDOC"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDSKLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDSKLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllIDSKLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDSKLDOC"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDKLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDKLDOC"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDKLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDKLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllIDKLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDKLDOC"), DISPID(219));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDBASE_GALLDOC(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDBASE_GALLDOC"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocAllIDBASE_GALLDOC(void)
{
  BSTR Value;
  this->get_DocAllIDBASE_GALLDOC((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocAllIDBASE_GALLDOC(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocAllIDBASE_GALLDOC"), DISPID(220));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocPRIMREA(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocPRIMREA"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocPRIMREA(void)
{
  BSTR Value;
  this->get_DocPRIMREA((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocPRIMREA(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocPRIMREA"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocIDREA(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDREA"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocIDREA(void)
{
  BSTR Value;
  this->get_DocIDREA((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocIDREA(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDREA"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocIDDOCREA(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDDOCREA"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocIDDOCREA(void)
{
  BSTR Value;
  this->get_DocIDDOCREA((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocIDDOCREA(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDDOCREA"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocIDTPRICEREA(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDTPRICEREA"), DISPID(224));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocIDTPRICEREA(void)
{
  BSTR Value;
  this->get_DocIDTPRICEREA((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocIDTPRICEREA(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDTPRICEREA"), DISPID(224));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocIDGRPOLREA(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDGRPOLREA"), DISPID(225));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocIDGRPOLREA(void)
{
  BSTR Value;
  this->get_DocIDGRPOLREA((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocIDGRPOLREA(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDGRPOLREA"), DISPID(225));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocIDBSCHETREA(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDBSCHETREA"), DISPID(226));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocIDBSCHETREA(void)
{
  BSTR Value;
  this->get_DocIDBSCHETREA((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocIDBSCHETREA(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocIDBSCHETREA"), DISPID(226));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTIDREAT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDREAT"), DISPID(227));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocTIDREAT(void)
{
  BSTR Value;
  this->get_DocTIDREAT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocTIDREAT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDREAT"), DISPID(227));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTIDDOCREAT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDDOCREAT"), DISPID(228));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocTIDDOCREAT(void)
{
  BSTR Value;
  this->get_DocTIDDOCREAT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocTIDDOCREAT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDDOCREAT"), DISPID(228));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTIDNOMREAT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDNOMREAT"), DISPID(229));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocTIDNOMREAT(void)
{
  BSTR Value;
  this->get_DocTIDNOMREAT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocTIDNOMREAT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDNOMREAT"), DISPID(229));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTIDEDREAT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDEDREAT"), DISPID(230));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOleDMDocRealDispT<T>::get_DocTIDEDREAT(void)
{
  BSTR Value;
  this->get_DocTIDEDREAT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocTIDEDREAT(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTIDEDREAT"), DISPID(230));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTKOLREAT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKOLREAT"), DISPID(231));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRealDispT<T>::get_DocTKOLREAT(void)
{
  double Value;
  this->get_DocTKOLREAT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocTKOLREAT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKOLREAT"), DISPID(231));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTKFREAT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKFREAT"), DISPID(232));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRealDispT<T>::get_DocTKFREAT(void)
{
  double Value;
  this->get_DocTKFREAT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocTKFREAT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTKFREAT"), DISPID(232));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTPRICEREAT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTPRICEREAT"), DISPID(233));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRealDispT<T>::get_DocTPRICEREAT(void)
{
  double Value;
  this->get_DocTPRICEREAT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocTPRICEREAT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTPRICEREAT"), DISPID(233));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::get_DocTSUMREAT(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTSUMREAT"), DISPID(234));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOleDMDocRealDispT<T>::get_DocTSUMREAT(void)
{
  double Value;
  this->get_DocTSUMREAT((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::set_DocTSUMREAT(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocTSUMREAT"), DISPID(234));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::DocTAppend()
{
  _TDispID _dispid(*this, OLETEXT("DocTAppend"), DISPID(235));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOleDMDocRealDispT<T>::DocTDelete()
{
  _TDispID _dispid(*this, OLETEXT("DocTDelete"), DISPID(236));
  return OleFunction(_dispid);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDM
// Interface: TCOMIOleDM
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDM, IOleDM, &CLSID_OleDM, &IID_IOleDM> CoOleDM;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMGurAllDoc
// Interface: TCOMIOleDMGurAllDoc
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMGurAllDoc, IOleDMGurAllDoc, &CLSID_OleDMGurAllDoc, &IID_IOleDMGurAllDoc> CoOleDMGurAllDoc;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMSprSklad
// Interface: TCOMIOleDMSprSklad
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMSprSklad, IOleDMSprSklad, &CLSID_OleDMSprSklad, &IID_IOleDMSprSklad> CoOleDMSprSklad;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMSprFirm
// Interface: TCOMIOleDMSprFirm
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMSprFirm, IOleDMSprFirm, &CLSID_OleDMSprFirm, &IID_IOleDMSprFirm> CoOleDMSprFirm;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMSprInfBase
// Interface: TCOMIOleDMSprInfBase
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMSprInfBase, IOleDMSprInfBase, &CLSID_OleDMSprInfBase, &IID_IOleDMSprInfBase> CoOleDMSprInfBase;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMSprEd
// Interface: TCOMIOleDMSprEd
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMSprEd, IOleDMSprEd, &CLSID_OleDMSprEd, &IID_IOleDMSprEd> CoOleDMSprEd;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMSprGrpNom
// Interface: TCOMIOleDMSprGrpNom
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMSprGrpNom, IOleDMSprGrpNom, &CLSID_OleDMSprGrpNom, &IID_IOleDMSprGrpNom> CoOleDMSprGrpNom;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMSprNom
// Interface: TCOMIOleDMSprNom
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMSprNom, IOleDMSprNom, &CLSID_OleDMSprNom, &IID_IOleDMSprNom> CoOleDMSprNom;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMSprTypePrice
// Interface: TCOMIOleDMSprTypePrice
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMSprTypePrice, IOleDMSprTypePrice, &CLSID_OleDMSprTypePrice, &IID_IOleDMSprTypePrice> CoOleDMSprTypePrice;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMSprPrice
// Interface: TCOMIOleDMSprPrice
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMSprPrice, IOleDMSprPrice, &CLSID_OleDMSprPrice, &IID_IOleDMSprPrice> CoOleDMSprPrice;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OleDMDocReal
// Interface: TCOMIOleDMDocReal
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOleDMDocReal, IOleDMDocReal, &CLSID_OleDMDocReal, &IID_IOleDMDocReal> CoOleDMDocReal;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Dbserv20_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Dbserv20_tlb;
#endif

#pragma option pop

#endif // DBServ20_TLBH
